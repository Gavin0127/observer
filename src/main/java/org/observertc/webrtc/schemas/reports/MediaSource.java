/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class MediaSource extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4057132056974692665L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MediaSource\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"fields\":[{\"name\":\"mediaUnitId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"callName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"browserId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"peerConnectionUUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mediaSourceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"audioLevel\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"framesPerSecond\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"height\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"width\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"mediaType\",\"type\":{\"type\":\"enum\",\"name\":\"MediaType\",\"symbols\":[\"AUDIO\",\"VIDEO\",\"UNKNOWN\",\"NULL\"]},\"default\":\"UNKNOWN\"},{\"name\":\"totalAudioEnergy\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"totalSamplesDuration\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"trackId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MediaSource> ENCODER =
      new BinaryMessageEncoder<MediaSource>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MediaSource> DECODER =
      new BinaryMessageDecoder<MediaSource>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MediaSource> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MediaSource> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MediaSource> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MediaSource>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MediaSource to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MediaSource from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MediaSource instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MediaSource fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private String mediaUnitId;
   private String callName;
   private String userId;
   private String browserId;
   private String peerConnectionUUID;
   private String mediaSourceId;
   private Float audioLevel;
   private Double framesPerSecond;
   private Double height;
   private Double width;
   private MediaType mediaType;
   private Float totalAudioEnergy;
   private Double totalSamplesDuration;
   private String trackId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MediaSource() {}

  /**
   * All-args constructor.
   * @param mediaUnitId The new value for mediaUnitId
   * @param callName The new value for callName
   * @param userId The new value for userId
   * @param browserId The new value for browserId
   * @param peerConnectionUUID The new value for peerConnectionUUID
   * @param mediaSourceId The new value for mediaSourceId
   * @param audioLevel The new value for audioLevel
   * @param framesPerSecond The new value for framesPerSecond
   * @param height The new value for height
   * @param width The new value for width
   * @param mediaType The new value for mediaType
   * @param totalAudioEnergy The new value for totalAudioEnergy
   * @param totalSamplesDuration The new value for totalSamplesDuration
   * @param trackId The new value for trackId
   */
  public MediaSource(String mediaUnitId, String callName, String userId, String browserId, String peerConnectionUUID, String mediaSourceId, Float audioLevel, Double framesPerSecond, Double height, Double width, MediaType mediaType, Float totalAudioEnergy, Double totalSamplesDuration, String trackId) {
    this.mediaUnitId = mediaUnitId;
    this.callName = callName;
    this.userId = userId;
    this.browserId = browserId;
    this.peerConnectionUUID = peerConnectionUUID;
    this.mediaSourceId = mediaSourceId;
    this.audioLevel = audioLevel;
    this.framesPerSecond = framesPerSecond;
    this.height = height;
    this.width = width;
    this.mediaType = mediaType;
    this.totalAudioEnergy = totalAudioEnergy;
    this.totalSamplesDuration = totalSamplesDuration;
    this.trackId = trackId;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return mediaUnitId;
    case 1: return callName;
    case 2: return userId;
    case 3: return browserId;
    case 4: return peerConnectionUUID;
    case 5: return mediaSourceId;
    case 6: return audioLevel;
    case 7: return framesPerSecond;
    case 8: return height;
    case 9: return width;
    case 10: return mediaType;
    case 11: return totalAudioEnergy;
    case 12: return totalSamplesDuration;
    case 13: return trackId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: mediaUnitId = value$ != null ? value$.toString() : null; break;
    case 1: callName = value$ != null ? value$.toString() : null; break;
    case 2: userId = value$ != null ? value$.toString() : null; break;
    case 3: browserId = value$ != null ? value$.toString() : null; break;
    case 4: peerConnectionUUID = value$ != null ? value$.toString() : null; break;
    case 5: mediaSourceId = value$ != null ? value$.toString() : null; break;
    case 6: audioLevel = (Float)value$; break;
    case 7: framesPerSecond = (Double)value$; break;
    case 8: height = (Double)value$; break;
    case 9: width = (Double)value$; break;
    case 10: mediaType = (MediaType)value$; break;
    case 11: totalAudioEnergy = (Float)value$; break;
    case 12: totalSamplesDuration = (Double)value$; break;
    case 13: trackId = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The value of the 'mediaUnitId' field.
   */
  public String getMediaUnitId() {
    return mediaUnitId;
  }



  /**
   * Gets the value of the 'callName' field.
   * @return The value of the 'callName' field.
   */
  public String getCallName() {
    return callName;
  }



  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public String getUserId() {
    return userId;
  }



  /**
   * Gets the value of the 'browserId' field.
   * @return The value of the 'browserId' field.
   */
  public String getBrowserId() {
    return browserId;
  }



  /**
   * Gets the value of the 'peerConnectionUUID' field.
   * @return The value of the 'peerConnectionUUID' field.
   */
  public String getPeerConnectionUUID() {
    return peerConnectionUUID;
  }



  /**
   * Gets the value of the 'mediaSourceId' field.
   * @return The value of the 'mediaSourceId' field.
   */
  public String getMediaSourceId() {
    return mediaSourceId;
  }



  /**
   * Gets the value of the 'audioLevel' field.
   * @return The value of the 'audioLevel' field.
   */
  public Float getAudioLevel() {
    return audioLevel;
  }



  /**
   * Gets the value of the 'framesPerSecond' field.
   * @return The value of the 'framesPerSecond' field.
   */
  public Double getFramesPerSecond() {
    return framesPerSecond;
  }



  /**
   * Gets the value of the 'height' field.
   * @return The value of the 'height' field.
   */
  public Double getHeight() {
    return height;
  }



  /**
   * Gets the value of the 'width' field.
   * @return The value of the 'width' field.
   */
  public Double getWidth() {
    return width;
  }



  /**
   * Gets the value of the 'mediaType' field.
   * @return The value of the 'mediaType' field.
   */
  public MediaType getMediaType() {
    return mediaType;
  }



  /**
   * Gets the value of the 'totalAudioEnergy' field.
   * @return The value of the 'totalAudioEnergy' field.
   */
  public Float getTotalAudioEnergy() {
    return totalAudioEnergy;
  }



  /**
   * Gets the value of the 'totalSamplesDuration' field.
   * @return The value of the 'totalSamplesDuration' field.
   */
  public Double getTotalSamplesDuration() {
    return totalSamplesDuration;
  }



  /**
   * Gets the value of the 'trackId' field.
   * @return The value of the 'trackId' field.
   */
  public String getTrackId() {
    return trackId;
  }



  /**
   * Creates a new MediaSource RecordBuilder.
   * @return A new MediaSource RecordBuilder
   */
  public static MediaSource.Builder newBuilder() {
    return new MediaSource.Builder();
  }

  /**
   * Creates a new MediaSource RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MediaSource RecordBuilder
   */
  public static MediaSource.Builder newBuilder(MediaSource.Builder other) {
    if (other == null) {
      return new MediaSource.Builder();
    } else {
      return new MediaSource.Builder(other);
    }
  }

  /**
   * Creates a new MediaSource RecordBuilder by copying an existing MediaSource instance.
   * @param other The existing instance to copy.
   * @return A new MediaSource RecordBuilder
   */
  public static MediaSource.Builder newBuilder(MediaSource other) {
    if (other == null) {
      return new MediaSource.Builder();
    } else {
      return new MediaSource.Builder(other);
    }
  }

  /**
   * RecordBuilder for MediaSource instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MediaSource>
    implements org.apache.avro.data.RecordBuilder<MediaSource> {

    private String mediaUnitId;
    private String callName;
    private String userId;
    private String browserId;
    private String peerConnectionUUID;
    private String mediaSourceId;
    private Float audioLevel;
    private Double framesPerSecond;
    private Double height;
    private Double width;
    private MediaType mediaType;
    private Float totalAudioEnergy;
    private Double totalSamplesDuration;
    private String trackId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(MediaSource.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.callName)) {
        this.callName = data().deepCopy(fields()[1].schema(), other.callName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.browserId)) {
        this.browserId = data().deepCopy(fields()[3].schema(), other.browserId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[4].schema(), other.peerConnectionUUID);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.mediaSourceId)) {
        this.mediaSourceId = data().deepCopy(fields()[5].schema(), other.mediaSourceId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.audioLevel)) {
        this.audioLevel = data().deepCopy(fields()[6].schema(), other.audioLevel);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.framesPerSecond)) {
        this.framesPerSecond = data().deepCopy(fields()[7].schema(), other.framesPerSecond);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.height)) {
        this.height = data().deepCopy(fields()[8].schema(), other.height);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.width)) {
        this.width = data().deepCopy(fields()[9].schema(), other.width);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[10].schema(), other.mediaType);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.totalAudioEnergy)) {
        this.totalAudioEnergy = data().deepCopy(fields()[11].schema(), other.totalAudioEnergy);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.totalSamplesDuration)) {
        this.totalSamplesDuration = data().deepCopy(fields()[12].schema(), other.totalSamplesDuration);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.trackId)) {
        this.trackId = data().deepCopy(fields()[13].schema(), other.trackId);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing MediaSource instance
     * @param other The existing instance to copy.
     */
    private Builder(MediaSource other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.callName)) {
        this.callName = data().deepCopy(fields()[1].schema(), other.callName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.browserId)) {
        this.browserId = data().deepCopy(fields()[3].schema(), other.browserId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[4].schema(), other.peerConnectionUUID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.mediaSourceId)) {
        this.mediaSourceId = data().deepCopy(fields()[5].schema(), other.mediaSourceId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.audioLevel)) {
        this.audioLevel = data().deepCopy(fields()[6].schema(), other.audioLevel);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.framesPerSecond)) {
        this.framesPerSecond = data().deepCopy(fields()[7].schema(), other.framesPerSecond);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.height)) {
        this.height = data().deepCopy(fields()[8].schema(), other.height);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.width)) {
        this.width = data().deepCopy(fields()[9].schema(), other.width);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[10].schema(), other.mediaType);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.totalAudioEnergy)) {
        this.totalAudioEnergy = data().deepCopy(fields()[11].schema(), other.totalAudioEnergy);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.totalSamplesDuration)) {
        this.totalSamplesDuration = data().deepCopy(fields()[12].schema(), other.totalSamplesDuration);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.trackId)) {
        this.trackId = data().deepCopy(fields()[13].schema(), other.trackId);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * @return The value.
      */
    public String getMediaUnitId() {
      return mediaUnitId;
    }


    /**
      * Sets the value of the 'mediaUnitId' field.
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public MediaSource.Builder setMediaUnitId(String value) {
      validate(fields()[0], value);
      this.mediaUnitId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * @return This builder.
      */
    public MediaSource.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'callName' field.
      * @return The value.
      */
    public String getCallName() {
      return callName;
    }


    /**
      * Sets the value of the 'callName' field.
      * @param value The value of 'callName'.
      * @return This builder.
      */
    public MediaSource.Builder setCallName(String value) {
      validate(fields()[1], value);
      this.callName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'callName' field has been set.
      * @return True if the 'callName' field has been set, false otherwise.
      */
    public boolean hasCallName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'callName' field.
      * @return This builder.
      */
    public MediaSource.Builder clearCallName() {
      callName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public MediaSource.Builder setUserId(String value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public MediaSource.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'browserId' field.
      * @return The value.
      */
    public String getBrowserId() {
      return browserId;
    }


    /**
      * Sets the value of the 'browserId' field.
      * @param value The value of 'browserId'.
      * @return This builder.
      */
    public MediaSource.Builder setBrowserId(String value) {
      validate(fields()[3], value);
      this.browserId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'browserId' field has been set.
      * @return True if the 'browserId' field has been set, false otherwise.
      */
    public boolean hasBrowserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'browserId' field.
      * @return This builder.
      */
    public MediaSource.Builder clearBrowserId() {
      browserId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionUUID' field.
      * @return The value.
      */
    public String getPeerConnectionUUID() {
      return peerConnectionUUID;
    }


    /**
      * Sets the value of the 'peerConnectionUUID' field.
      * @param value The value of 'peerConnectionUUID'.
      * @return This builder.
      */
    public MediaSource.Builder setPeerConnectionUUID(String value) {
      validate(fields()[4], value);
      this.peerConnectionUUID = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionUUID' field has been set.
      * @return True if the 'peerConnectionUUID' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionUUID() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'peerConnectionUUID' field.
      * @return This builder.
      */
    public MediaSource.Builder clearPeerConnectionUUID() {
      peerConnectionUUID = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaSourceId' field.
      * @return The value.
      */
    public String getMediaSourceId() {
      return mediaSourceId;
    }


    /**
      * Sets the value of the 'mediaSourceId' field.
      * @param value The value of 'mediaSourceId'.
      * @return This builder.
      */
    public MediaSource.Builder setMediaSourceId(String value) {
      validate(fields()[5], value);
      this.mediaSourceId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaSourceId' field has been set.
      * @return True if the 'mediaSourceId' field has been set, false otherwise.
      */
    public boolean hasMediaSourceId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'mediaSourceId' field.
      * @return This builder.
      */
    public MediaSource.Builder clearMediaSourceId() {
      mediaSourceId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'audioLevel' field.
      * @return The value.
      */
    public Float getAudioLevel() {
      return audioLevel;
    }


    /**
      * Sets the value of the 'audioLevel' field.
      * @param value The value of 'audioLevel'.
      * @return This builder.
      */
    public MediaSource.Builder setAudioLevel(Float value) {
      validate(fields()[6], value);
      this.audioLevel = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'audioLevel' field has been set.
      * @return True if the 'audioLevel' field has been set, false otherwise.
      */
    public boolean hasAudioLevel() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'audioLevel' field.
      * @return This builder.
      */
    public MediaSource.Builder clearAudioLevel() {
      audioLevel = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesPerSecond' field.
      * @return The value.
      */
    public Double getFramesPerSecond() {
      return framesPerSecond;
    }


    /**
      * Sets the value of the 'framesPerSecond' field.
      * @param value The value of 'framesPerSecond'.
      * @return This builder.
      */
    public MediaSource.Builder setFramesPerSecond(Double value) {
      validate(fields()[7], value);
      this.framesPerSecond = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'framesPerSecond' field has been set.
      * @return True if the 'framesPerSecond' field has been set, false otherwise.
      */
    public boolean hasFramesPerSecond() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'framesPerSecond' field.
      * @return This builder.
      */
    public MediaSource.Builder clearFramesPerSecond() {
      framesPerSecond = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'height' field.
      * @return The value.
      */
    public Double getHeight() {
      return height;
    }


    /**
      * Sets the value of the 'height' field.
      * @param value The value of 'height'.
      * @return This builder.
      */
    public MediaSource.Builder setHeight(Double value) {
      validate(fields()[8], value);
      this.height = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'height' field has been set.
      * @return True if the 'height' field has been set, false otherwise.
      */
    public boolean hasHeight() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'height' field.
      * @return This builder.
      */
    public MediaSource.Builder clearHeight() {
      height = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'width' field.
      * @return The value.
      */
    public Double getWidth() {
      return width;
    }


    /**
      * Sets the value of the 'width' field.
      * @param value The value of 'width'.
      * @return This builder.
      */
    public MediaSource.Builder setWidth(Double value) {
      validate(fields()[9], value);
      this.width = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'width' field has been set.
      * @return True if the 'width' field has been set, false otherwise.
      */
    public boolean hasWidth() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'width' field.
      * @return This builder.
      */
    public MediaSource.Builder clearWidth() {
      width = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaType' field.
      * @return The value.
      */
    public MediaType getMediaType() {
      return mediaType;
    }


    /**
      * Sets the value of the 'mediaType' field.
      * @param value The value of 'mediaType'.
      * @return This builder.
      */
    public MediaSource.Builder setMediaType(MediaType value) {
      validate(fields()[10], value);
      this.mediaType = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaType' field has been set.
      * @return True if the 'mediaType' field has been set, false otherwise.
      */
    public boolean hasMediaType() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'mediaType' field.
      * @return This builder.
      */
    public MediaSource.Builder clearMediaType() {
      mediaType = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalAudioEnergy' field.
      * @return The value.
      */
    public Float getTotalAudioEnergy() {
      return totalAudioEnergy;
    }


    /**
      * Sets the value of the 'totalAudioEnergy' field.
      * @param value The value of 'totalAudioEnergy'.
      * @return This builder.
      */
    public MediaSource.Builder setTotalAudioEnergy(Float value) {
      validate(fields()[11], value);
      this.totalAudioEnergy = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'totalAudioEnergy' field has been set.
      * @return True if the 'totalAudioEnergy' field has been set, false otherwise.
      */
    public boolean hasTotalAudioEnergy() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'totalAudioEnergy' field.
      * @return This builder.
      */
    public MediaSource.Builder clearTotalAudioEnergy() {
      totalAudioEnergy = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSamplesDuration' field.
      * @return The value.
      */
    public Double getTotalSamplesDuration() {
      return totalSamplesDuration;
    }


    /**
      * Sets the value of the 'totalSamplesDuration' field.
      * @param value The value of 'totalSamplesDuration'.
      * @return This builder.
      */
    public MediaSource.Builder setTotalSamplesDuration(Double value) {
      validate(fields()[12], value);
      this.totalSamplesDuration = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSamplesDuration' field has been set.
      * @return True if the 'totalSamplesDuration' field has been set, false otherwise.
      */
    public boolean hasTotalSamplesDuration() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'totalSamplesDuration' field.
      * @return This builder.
      */
    public MediaSource.Builder clearTotalSamplesDuration() {
      totalSamplesDuration = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'trackId' field.
      * @return The value.
      */
    public String getTrackId() {
      return trackId;
    }


    /**
      * Sets the value of the 'trackId' field.
      * @param value The value of 'trackId'.
      * @return This builder.
      */
    public MediaSource.Builder setTrackId(String value) {
      validate(fields()[13], value);
      this.trackId = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'trackId' field has been set.
      * @return True if the 'trackId' field has been set, false otherwise.
      */
    public boolean hasTrackId() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'trackId' field.
      * @return This builder.
      */
    public MediaSource.Builder clearTrackId() {
      trackId = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MediaSource build() {
      try {
        MediaSource record = new MediaSource();
        record.mediaUnitId = fieldSetFlags()[0] ? this.mediaUnitId : (String) defaultValue(fields()[0]);
        record.callName = fieldSetFlags()[1] ? this.callName : (String) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (String) defaultValue(fields()[2]);
        record.browserId = fieldSetFlags()[3] ? this.browserId : (String) defaultValue(fields()[3]);
        record.peerConnectionUUID = fieldSetFlags()[4] ? this.peerConnectionUUID : (String) defaultValue(fields()[4]);
        record.mediaSourceId = fieldSetFlags()[5] ? this.mediaSourceId : (String) defaultValue(fields()[5]);
        record.audioLevel = fieldSetFlags()[6] ? this.audioLevel : (Float) defaultValue(fields()[6]);
        record.framesPerSecond = fieldSetFlags()[7] ? this.framesPerSecond : (Double) defaultValue(fields()[7]);
        record.height = fieldSetFlags()[8] ? this.height : (Double) defaultValue(fields()[8]);
        record.width = fieldSetFlags()[9] ? this.width : (Double) defaultValue(fields()[9]);
        record.mediaType = fieldSetFlags()[10] ? this.mediaType : (MediaType) defaultValue(fields()[10]);
        record.totalAudioEnergy = fieldSetFlags()[11] ? this.totalAudioEnergy : (Float) defaultValue(fields()[11]);
        record.totalSamplesDuration = fieldSetFlags()[12] ? this.totalSamplesDuration : (Double) defaultValue(fields()[12]);
        record.trackId = fieldSetFlags()[13] ? this.trackId : (String) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MediaSource>
    WRITER$ = (org.apache.avro.io.DatumWriter<MediaSource>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MediaSource>
    READER$ = (org.apache.avro.io.DatumReader<MediaSource>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.mediaUnitId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mediaUnitId);
    }

    if (this.callName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.callName);
    }

    if (this.userId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.userId);
    }

    if (this.browserId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.browserId);
    }

    out.writeString(this.peerConnectionUUID);

    out.writeString(this.mediaSourceId);

    if (this.audioLevel == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeFloat(this.audioLevel);
    }

    if (this.framesPerSecond == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.framesPerSecond);
    }

    if (this.height == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.height);
    }

    if (this.width == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.width);
    }

    out.writeEnum(this.mediaType.ordinal());

    if (this.totalAudioEnergy == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeFloat(this.totalAudioEnergy);
    }

    if (this.totalSamplesDuration == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.totalSamplesDuration);
    }

    if (this.trackId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.trackId);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.mediaUnitId = null;
      } else {
        this.mediaUnitId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.callName = null;
      } else {
        this.callName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.userId = null;
      } else {
        this.userId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.browserId = null;
      } else {
        this.browserId = in.readString();
      }

      this.peerConnectionUUID = in.readString();

      this.mediaSourceId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.audioLevel = null;
      } else {
        this.audioLevel = in.readFloat();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesPerSecond = null;
      } else {
        this.framesPerSecond = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.height = null;
      } else {
        this.height = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.width = null;
      } else {
        this.width = in.readDouble();
      }

      this.mediaType = MediaType.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalAudioEnergy = null;
      } else {
        this.totalAudioEnergy = in.readFloat();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalSamplesDuration = null;
      } else {
        this.totalSamplesDuration = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.trackId = null;
      } else {
        this.trackId = in.readString();
      }

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mediaUnitId = null;
          } else {
            this.mediaUnitId = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.callName = null;
          } else {
            this.callName = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.userId = null;
          } else {
            this.userId = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.browserId = null;
          } else {
            this.browserId = in.readString();
          }
          break;

        case 4:
          this.peerConnectionUUID = in.readString();
          break;

        case 5:
          this.mediaSourceId = in.readString();
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.audioLevel = null;
          } else {
            this.audioLevel = in.readFloat();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesPerSecond = null;
          } else {
            this.framesPerSecond = in.readDouble();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.height = null;
          } else {
            this.height = in.readDouble();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.width = null;
          } else {
            this.width = in.readDouble();
          }
          break;

        case 10:
          this.mediaType = MediaType.values()[in.readEnum()];
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalAudioEnergy = null;
          } else {
            this.totalAudioEnergy = in.readFloat();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalSamplesDuration = null;
          } else {
            this.totalSamplesDuration = in.readDouble();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.trackId = null;
          } else {
            this.trackId = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










