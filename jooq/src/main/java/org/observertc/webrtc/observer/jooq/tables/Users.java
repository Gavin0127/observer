/*
 * Copyright  2020 Balazs Kreith
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package org.observertc.webrtc.observer.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.observertc.webrtc.observer.jooq.Indexes;
import org.observertc.webrtc.observer.jooq.Keys;
import org.observertc.webrtc.observer.jooq.Webrtcobserver;
import org.observertc.webrtc.observer.jooq.enums.UsersRole;
import org.observertc.webrtc.observer.jooq.tables.records.UsersRecord;


/**
 * Users
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 537097752;

    /**
     * The reference instance of <code>WebRTCObserver.Users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>WebRTCObserver.Users.id</code>. The identifier of the user for inside relations, never outside
     */
    public final TableField<UsersRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "The identifier of the user for inside relations, never outside");

    /**
     * The column <code>WebRTCObserver.Users.uuid</code>. The UUID of the user published outside 
     */
    public final TableField<UsersRecord, byte[]> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.BINARY(16), this, "The UUID of the user published outside ");

    /**
     * The column <code>WebRTCObserver.Users.username</code>. The username of the user
     */
    public final TableField<UsersRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "The username of the user");

    /**
     * The column <code>WebRTCObserver.Users.password_digest</code>. The hash of the password using the salt
     */
    public final TableField<UsersRecord, byte[]> PASSWORD_DIGEST = createField(DSL.name("password_digest"), org.jooq.impl.SQLDataType.BINARY(64), this, "The hash of the password using the salt");

    /**
     * The column <code>WebRTCObserver.Users.password_salt</code>. The salt for the password
     */
    public final TableField<UsersRecord, byte[]> PASSWORD_SALT = createField(DSL.name("password_salt"), org.jooq.impl.SQLDataType.BINARY(32), this, "The salt for the password");

    /**
     * The column <code>WebRTCObserver.Users.role</code>. The role of the user determines of which endpoint it can access to
     */
    public final TableField<UsersRecord, UsersRole> ROLE = createField(DSL.name("role"), org.jooq.impl.SQLDataType.VARCHAR(6).nullable(false).asEnumDataType(org.observertc.webrtc.observer.jooq.enums.UsersRole.class), this, "The role of the user determines of which endpoint it can access to");

    /**
     * Create a <code>WebRTCObserver.Users</code> table reference
     */
    public Users() {
        this(DSL.name("Users"), null);
    }

    /**
     * Create an aliased <code>WebRTCObserver.Users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>WebRTCObserver.Users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Users"), TableOptions.table());
    }

    public <O extends Record> Users(Table<O> child, ForeignKey<O, UsersRecord> key) {
        super(child, key, USERS);
    }

    @Override
    public Schema getSchema() {
        return Webrtcobserver.WEBRTCOBSERVER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERS_USERS_USERNAME_KEY);
    }

    @Override
    public Identity<UsersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USERS;
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.KEY_USERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<UsersRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersRecord>>asList(Keys.KEY_USERS_PRIMARY, Keys.KEY_USERS_UUID, Keys.KEY_USERS_USERNAME);
    }

    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, byte[], String, byte[], byte[], UsersRole> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
