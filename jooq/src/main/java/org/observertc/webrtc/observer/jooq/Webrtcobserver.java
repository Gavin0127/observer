/*
 * Copyright  2020 Balazs Kreith
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package org.observertc.webrtc.observer.jooq;


import java.util.Arrays;
import java.util.List;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;
import org.observertc.webrtc.observer.jooq.tables.Activestreams;
import org.observertc.webrtc.observer.jooq.tables.Bridges;
import org.observertc.webrtc.observer.jooq.tables.Customers;
import org.observertc.webrtc.observer.jooq.tables.Peerconnections;
import org.observertc.webrtc.observer.jooq.tables.Sentreports;
import org.observertc.webrtc.observer.jooq.tables.Services;
import org.observertc.webrtc.observer.jooq.tables.Users;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Webrtcobserver extends SchemaImpl {

    private static final long serialVersionUID = -1546041154;

    /**
     * The reference instance of <code>WebRTCObserver</code>
     */
    public static final Webrtcobserver WEBRTCOBSERVER = new Webrtcobserver();

    /**
     * A table to track the active streams
     */
    public final Activestreams ACTIVESTREAMS = Activestreams.ACTIVESTREAMS;

    /**
     * Services
     */
    public final Bridges BRIDGES = Bridges.BRIDGES;

    /**
     * Customers
     */
    public final Customers CUSTOMERS = Customers.CUSTOMERS;

    /**
     * A table to store information related to peer connections
     */
    public final Peerconnections PEERCONNECTIONS = Peerconnections.PEERCONNECTIONS;

    /**
     * SentReports
     */
    public final Sentreports SENTREPORTS = Sentreports.SENTREPORTS;

    /**
     * Services
     */
    public final Services SERVICES = Services.SERVICES;

    /**
     * Users
     */
    public final Users USERS = Users.USERS;

    /**
     * No further instances allowed
     */
    private Webrtcobserver() {
        super("WebRTCObserver", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.<Table<?>>asList(
            Activestreams.ACTIVESTREAMS,
            Bridges.BRIDGES,
            Customers.CUSTOMERS,
            Peerconnections.PEERCONNECTIONS,
            Sentreports.SENTREPORTS,
            Services.SERVICES,
            Users.USERS);
    }
}
