/*
 * This file is generated by jOOQ.
 */
package org.observertc.webrtc.observer.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.observertc.webrtc.observer.jooq.Indexes;
import org.observertc.webrtc.observer.jooq.Keys;
import org.observertc.webrtc.observer.jooq.Webrtcobserver;
import org.observertc.webrtc.observer.jooq.tables.records.ActivestreamsRecord;


/**
 * A table to track the active streams
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Activestreams extends TableImpl<ActivestreamsRecord> {

    private static final long serialVersionUID = -1974867936;

    /**
     * The reference instance of <code>WebRTCObserver.ActiveStreams</code>
     */
    public static final Activestreams ACTIVESTREAMS = new Activestreams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivestreamsRecord> getRecordType() {
        return ActivestreamsRecord.class;
    }

    /**
     * The column <code>WebRTCObserver.ActiveStreams.serviceUUID</code>.
     */
    public final TableField<ActivestreamsRecord, byte[]> SERVICEUUID = createField(DSL.name("serviceUUID"), org.jooq.impl.SQLDataType.BINARY(16).nullable(false), this, "");

    /**
     * The column <code>WebRTCObserver.ActiveStreams.SSRC</code>.
     */
    public final TableField<ActivestreamsRecord, Long> SSRC = createField(DSL.name("SSRC"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>WebRTCObserver.ActiveStreams.callUUID</code>.
     */
    public final TableField<ActivestreamsRecord, byte[]> CALLUUID = createField(DSL.name("callUUID"), org.jooq.impl.SQLDataType.BINARY(16), this, "");

    /**
     * Create a <code>WebRTCObserver.ActiveStreams</code> table reference
     */
    public Activestreams() {
        this(DSL.name("ActiveStreams"), null);
    }

    /**
     * Create an aliased <code>WebRTCObserver.ActiveStreams</code> table reference
     */
    public Activestreams(String alias) {
        this(DSL.name(alias), ACTIVESTREAMS);
    }

    /**
     * Create an aliased <code>WebRTCObserver.ActiveStreams</code> table reference
     */
    public Activestreams(Name alias) {
        this(alias, ACTIVESTREAMS);
    }

    private Activestreams(Name alias, Table<ActivestreamsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Activestreams(Name alias, Table<ActivestreamsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("A table to track the active streams"), TableOptions.table());
    }

    public <O extends Record> Activestreams(Table<O> child, ForeignKey<O, ActivestreamsRecord> key) {
        super(child, key, ACTIVESTREAMS);
    }

    @Override
    public Schema getSchema() {
        return Webrtcobserver.WEBRTCOBSERVER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACTIVESTREAMS_ACTIVESTREAMS_CALL_INDEX);
    }

    @Override
    public UniqueKey<ActivestreamsRecord> getPrimaryKey() {
        return Keys.KEY_ACTIVESTREAMS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ActivestreamsRecord>> getKeys() {
        return Arrays.<UniqueKey<ActivestreamsRecord>>asList(Keys.KEY_ACTIVESTREAMS_PRIMARY);
    }

    @Override
    public Activestreams as(String alias) {
        return new Activestreams(DSL.name(alias), this);
    }

    @Override
    public Activestreams as(Name alias) {
        return new Activestreams(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Activestreams rename(String name) {
        return new Activestreams(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Activestreams rename(Name name) {
        return new Activestreams(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<byte[], Long, byte[]> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
