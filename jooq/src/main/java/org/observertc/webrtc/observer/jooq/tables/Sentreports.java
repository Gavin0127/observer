/*
 * This file is generated by jOOQ.
 */
package org.observertc.webrtc.observer.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.observertc.webrtc.observer.jooq.Indexes;
import org.observertc.webrtc.observer.jooq.Keys;
import org.observertc.webrtc.observer.jooq.Webrtcobserver;
import org.observertc.webrtc.observer.jooq.tables.records.SentreportsRecord;


/**
 * SentReports
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sentreports extends TableImpl<SentreportsRecord> {

    private static final long serialVersionUID = 2048452476;

    /**
     * The reference instance of <code>WebRTCObserver.SentReports</code>
     */
    public static final Sentreports SENTREPORTS = new Sentreports();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SentreportsRecord> getRecordType() {
        return SentreportsRecord.class;
    }

    /**
     * The column <code>WebRTCObserver.SentReports.signature</code>. The signature of the report, which is sent
     */
    public final TableField<SentreportsRecord, byte[]> SIGNATURE = createField(DSL.name("signature"), org.jooq.impl.SQLDataType.VARBINARY(255).nullable(false), this, "The signature of the report, which is sent");

    /**
     * The column <code>WebRTCObserver.SentReports.peerConnectionUUID</code>. The UUID of the peerConnection sent the report
     */
    public final TableField<SentreportsRecord, byte[]> PEERCONNECTIONUUID = createField(DSL.name("peerConnectionUUID"), org.jooq.impl.SQLDataType.BINARY(16), this, "The UUID of the peerConnection sent the report");

    /**
     * The column <code>WebRTCObserver.SentReports.reported</code>. The timestamp of the report has been sent
     */
    public final TableField<SentreportsRecord, LocalDateTime> REPORTED = createField(DSL.name("reported"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "The timestamp of the report has been sent");

    /**
     * Create a <code>WebRTCObserver.SentReports</code> table reference
     */
    public Sentreports() {
        this(DSL.name("SentReports"), null);
    }

    /**
     * Create an aliased <code>WebRTCObserver.SentReports</code> table reference
     */
    public Sentreports(String alias) {
        this(DSL.name(alias), SENTREPORTS);
    }

    /**
     * Create an aliased <code>WebRTCObserver.SentReports</code> table reference
     */
    public Sentreports(Name alias) {
        this(alias, SENTREPORTS);
    }

    private Sentreports(Name alias, Table<SentreportsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sentreports(Name alias, Table<SentreportsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("SentReports"), TableOptions.table());
    }

    public <O extends Record> Sentreports(Table<O> child, ForeignKey<O, SentreportsRecord> key) {
        super(child, key, SENTREPORTS);
    }

    @Override
    public Schema getSchema() {
        return Webrtcobserver.WEBRTCOBSERVER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SENTREPORTS_SENTREPORTS_PEERCONNECTIONUUID_INDEX);
    }

    @Override
    public UniqueKey<SentreportsRecord> getPrimaryKey() {
        return Keys.KEY_SENTREPORTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SentreportsRecord>> getKeys() {
        return Arrays.<UniqueKey<SentreportsRecord>>asList(Keys.KEY_SENTREPORTS_PRIMARY);
    }

    @Override
    public Sentreports as(String alias) {
        return new Sentreports(DSL.name(alias), this);
    }

    @Override
    public Sentreports as(Name alias) {
        return new Sentreports(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sentreports rename(String name) {
        return new Sentreports(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sentreports rename(Name name) {
        return new Sentreports(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<byte[], byte[], LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
