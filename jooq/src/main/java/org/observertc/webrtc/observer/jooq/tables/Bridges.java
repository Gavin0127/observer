/*
 * This file is generated by jOOQ.
 */
package org.observertc.webrtc.observer.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.observertc.webrtc.observer.jooq.Keys;
import org.observertc.webrtc.observer.jooq.Webrtcobserver;
import org.observertc.webrtc.observer.jooq.tables.records.BridgesRecord;


/**
 * Services
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bridges extends TableImpl<BridgesRecord> {

    private static final long serialVersionUID = 1728390966;

    /**
     * The reference instance of <code>WebRTCObserver.Bridges</code>
     */
    public static final Bridges BRIDGES = new Bridges();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BridgesRecord> getRecordType() {
        return BridgesRecord.class;
    }

    /**
     * The column <code>WebRTCObserver.Bridges.id</code>.
     */
    public final TableField<BridgesRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>WebRTCObserver.Bridges.service_id</code>.
     */
    public final TableField<BridgesRecord, Integer> SERVICE_ID = createField(DSL.name("service_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>WebRTCObserver.Bridges.name</code>.
     */
    public final TableField<BridgesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>WebRTCObserver.Bridges.description</code>.
     */
    public final TableField<BridgesRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>WebRTCObserver.Bridges</code> table reference
     */
    public Bridges() {
        this(DSL.name("Bridges"), null);
    }

    /**
     * Create an aliased <code>WebRTCObserver.Bridges</code> table reference
     */
    public Bridges(String alias) {
        this(DSL.name(alias), BRIDGES);
    }

    /**
     * Create an aliased <code>WebRTCObserver.Bridges</code> table reference
     */
    public Bridges(Name alias) {
        this(alias, BRIDGES);
    }

    private Bridges(Name alias, Table<BridgesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bridges(Name alias, Table<BridgesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Services"), TableOptions.table());
    }

    public <O extends Record> Bridges(Table<O> child, ForeignKey<O, BridgesRecord> key) {
        super(child, key, BRIDGES);
    }

    @Override
    public Schema getSchema() {
        return Webrtcobserver.WEBRTCOBSERVER;
    }

    @Override
    public Identity<BridgesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BRIDGES;
    }

    @Override
    public UniqueKey<BridgesRecord> getPrimaryKey() {
        return Keys.KEY_BRIDGES_PRIMARY;
    }

    @Override
    public List<UniqueKey<BridgesRecord>> getKeys() {
        return Arrays.<UniqueKey<BridgesRecord>>asList(Keys.KEY_BRIDGES_PRIMARY, Keys.KEY_BRIDGES_BRIDGES_UNIQUE_INDEX);
    }

    @Override
    public List<ForeignKey<BridgesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BridgesRecord, ?>>asList(Keys.BRIDGES_IBFK_1);
    }

    public Services services() {
        return new Services(this, Keys.BRIDGES_IBFK_1);
    }

    @Override
    public Bridges as(String alias) {
        return new Bridges(DSL.name(alias), this);
    }

    @Override
    public Bridges as(Name alias) {
        return new Bridges(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bridges rename(String name) {
        return new Bridges(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bridges rename(Name name) {
        return new Bridges(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
