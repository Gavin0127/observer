/*
 * This file is generated by jOOQ.
 */
package org.observertc.webrtc.observer.jooq;


import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;
import org.observertc.webrtc.observer.jooq.tables.Activestreams;
import org.observertc.webrtc.observer.jooq.tables.Bridges;
import org.observertc.webrtc.observer.jooq.tables.Customers;
import org.observertc.webrtc.observer.jooq.tables.Peerconnections;
import org.observertc.webrtc.observer.jooq.tables.Sentreports;
import org.observertc.webrtc.observer.jooq.tables.Services;
import org.observertc.webrtc.observer.jooq.tables.Users;
import org.observertc.webrtc.observer.jooq.tables.records.ActivestreamsRecord;
import org.observertc.webrtc.observer.jooq.tables.records.BridgesRecord;
import org.observertc.webrtc.observer.jooq.tables.records.CustomersRecord;
import org.observertc.webrtc.observer.jooq.tables.records.PeerconnectionsRecord;
import org.observertc.webrtc.observer.jooq.tables.records.SentreportsRecord;
import org.observertc.webrtc.observer.jooq.tables.records.ServicesRecord;
import org.observertc.webrtc.observer.jooq.tables.records.UsersRecord;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>WebRTCObserver</code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<BridgesRecord, Integer> IDENTITY_BRIDGES = Identities0.IDENTITY_BRIDGES;
    public static final Identity<CustomersRecord, Integer> IDENTITY_CUSTOMERS = Identities0.IDENTITY_CUSTOMERS;
    public static final Identity<ServicesRecord, Integer> IDENTITY_SERVICES = Identities0.IDENTITY_SERVICES;
    public static final Identity<UsersRecord, Integer> IDENTITY_USERS = Identities0.IDENTITY_USERS;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ActivestreamsRecord> KEY_ACTIVESTREAMS_PRIMARY = UniqueKeys0.KEY_ACTIVESTREAMS_PRIMARY;
    public static final UniqueKey<BridgesRecord> KEY_BRIDGES_PRIMARY = UniqueKeys0.KEY_BRIDGES_PRIMARY;
    public static final UniqueKey<BridgesRecord> KEY_BRIDGES_BRIDGES_UNIQUE_INDEX = UniqueKeys0.KEY_BRIDGES_BRIDGES_UNIQUE_INDEX;
    public static final UniqueKey<CustomersRecord> KEY_CUSTOMERS_PRIMARY = UniqueKeys0.KEY_CUSTOMERS_PRIMARY;
    public static final UniqueKey<CustomersRecord> KEY_CUSTOMERS_UUID = UniqueKeys0.KEY_CUSTOMERS_UUID;
    public static final UniqueKey<PeerconnectionsRecord> KEY_PEERCONNECTIONS_PRIMARY = UniqueKeys0.KEY_PEERCONNECTIONS_PRIMARY;
    public static final UniqueKey<SentreportsRecord> KEY_SENTREPORTS_PRIMARY = UniqueKeys0.KEY_SENTREPORTS_PRIMARY;
    public static final UniqueKey<ServicesRecord> KEY_SERVICES_PRIMARY = UniqueKeys0.KEY_SERVICES_PRIMARY;
    public static final UniqueKey<ServicesRecord> KEY_SERVICES_UUID = UniqueKeys0.KEY_SERVICES_UUID;
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = UniqueKeys0.KEY_USERS_PRIMARY;
    public static final UniqueKey<UsersRecord> KEY_USERS_UUID = UniqueKeys0.KEY_USERS_UUID;
    public static final UniqueKey<UsersRecord> KEY_USERS_USERNAME = UniqueKeys0.KEY_USERS_USERNAME;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BridgesRecord, ServicesRecord> BRIDGES_IBFK_1 = ForeignKeys0.BRIDGES_IBFK_1;
    public static final ForeignKey<ServicesRecord, CustomersRecord> SERVICES_IBFK_1 = ForeignKeys0.SERVICES_IBFK_1;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<BridgesRecord, Integer> IDENTITY_BRIDGES = Internal.createIdentity(Bridges.BRIDGES, Bridges.BRIDGES.ID);
        public static Identity<CustomersRecord, Integer> IDENTITY_CUSTOMERS = Internal.createIdentity(Customers.CUSTOMERS, Customers.CUSTOMERS.ID);
        public static Identity<ServicesRecord, Integer> IDENTITY_SERVICES = Internal.createIdentity(Services.SERVICES, Services.SERVICES.ID);
        public static Identity<UsersRecord, Integer> IDENTITY_USERS = Internal.createIdentity(Users.USERS, Users.USERS.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<ActivestreamsRecord> KEY_ACTIVESTREAMS_PRIMARY = Internal.createUniqueKey(Activestreams.ACTIVESTREAMS, "KEY_ActiveStreams_PRIMARY", new TableField[] { Activestreams.ACTIVESTREAMS.SERVICEUUID, Activestreams.ACTIVESTREAMS.SSRC }, true);
        public static final UniqueKey<BridgesRecord> KEY_BRIDGES_PRIMARY = Internal.createUniqueKey(Bridges.BRIDGES, "KEY_Bridges_PRIMARY", new TableField[] { Bridges.BRIDGES.ID }, true);
        public static final UniqueKey<BridgesRecord> KEY_BRIDGES_BRIDGES_UNIQUE_INDEX = Internal.createUniqueKey(Bridges.BRIDGES, "KEY_Bridges_bridges_unique_index", new TableField[] { Bridges.BRIDGES.SERVICE_ID, Bridges.BRIDGES.NAME }, true);
        public static final UniqueKey<CustomersRecord> KEY_CUSTOMERS_PRIMARY = Internal.createUniqueKey(Customers.CUSTOMERS, "KEY_Customers_PRIMARY", new TableField[] { Customers.CUSTOMERS.ID }, true);
        public static final UniqueKey<CustomersRecord> KEY_CUSTOMERS_UUID = Internal.createUniqueKey(Customers.CUSTOMERS, "KEY_Customers_uuid", new TableField[] { Customers.CUSTOMERS.UUID }, true);
        public static final UniqueKey<PeerconnectionsRecord> KEY_PEERCONNECTIONS_PRIMARY = Internal.createUniqueKey(Peerconnections.PEERCONNECTIONS, "KEY_PeerConnections_PRIMARY", new TableField[] { Peerconnections.PEERCONNECTIONS.PEERCONNECTIONUUID }, true);
        public static final UniqueKey<SentreportsRecord> KEY_SENTREPORTS_PRIMARY = Internal.createUniqueKey(Sentreports.SENTREPORTS, "KEY_SentReports_PRIMARY", new TableField[] { Sentreports.SENTREPORTS.SIGNATURE }, true);
        public static final UniqueKey<ServicesRecord> KEY_SERVICES_PRIMARY = Internal.createUniqueKey(Services.SERVICES, "KEY_Services_PRIMARY", new TableField[] { Services.SERVICES.ID }, true);
        public static final UniqueKey<ServicesRecord> KEY_SERVICES_UUID = Internal.createUniqueKey(Services.SERVICES, "KEY_Services_uuid", new TableField[] { Services.SERVICES.UUID }, true);
        public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, "KEY_Users_PRIMARY", new TableField[] { Users.USERS.ID }, true);
        public static final UniqueKey<UsersRecord> KEY_USERS_UUID = Internal.createUniqueKey(Users.USERS, "KEY_Users_uuid", new TableField[] { Users.USERS.UUID }, true);
        public static final UniqueKey<UsersRecord> KEY_USERS_USERNAME = Internal.createUniqueKey(Users.USERS, "KEY_Users_username", new TableField[] { Users.USERS.USERNAME }, true);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<BridgesRecord, ServicesRecord> BRIDGES_IBFK_1 = Internal.createForeignKey(Keys.KEY_SERVICES_PRIMARY, Bridges.BRIDGES, "Bridges_ibfk_1", new TableField[] { Bridges.BRIDGES.SERVICE_ID }, true);
        public static final ForeignKey<ServicesRecord, CustomersRecord> SERVICES_IBFK_1 = Internal.createForeignKey(Keys.KEY_CUSTOMERS_PRIMARY, Services.SERVICES, "Services_ibfk_1", new TableField[] { Services.SERVICES.CUSTOMER_ID }, true);
    }
}
