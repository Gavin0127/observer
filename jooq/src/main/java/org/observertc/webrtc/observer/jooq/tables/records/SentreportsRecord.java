/*
 * This file is generated by jOOQ.
 */
package org.observertc.webrtc.observer.jooq.tables.records;


import java.time.LocalDateTime;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.observertc.webrtc.observer.jooq.tables.Sentreports;


/**
 * SentReports
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SentreportsRecord extends UpdatableRecordImpl<SentreportsRecord> implements Record3<byte[], byte[], LocalDateTime> {

    private static final long serialVersionUID = 1677246020;

    /**
     * Setter for <code>WebRTCObserver.SentReports.signature</code>. The signature of the report, which is sent
     */
    public SentreportsRecord setSignature(byte[] value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>WebRTCObserver.SentReports.signature</code>. The signature of the report, which is sent
     */
    @NotNull
    @Size(max = 255)
    public byte[] getSignature() {
        return (byte[]) get(0);
    }

    /**
     * Setter for <code>WebRTCObserver.SentReports.peerConnectionUUID</code>. The UUID of the peerConnection sent the report
     */
    public SentreportsRecord setPeerconnectionuuid(byte[] value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>WebRTCObserver.SentReports.peerConnectionUUID</code>. The UUID of the peerConnection sent the report
     */
    @Size(max = 16)
    public byte[] getPeerconnectionuuid() {
        return (byte[]) get(1);
    }

    /**
     * Setter for <code>WebRTCObserver.SentReports.reported</code>. The timestamp of the report has been sent
     */
    public SentreportsRecord setReported(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>WebRTCObserver.SentReports.reported</code>. The timestamp of the report has been sent
     */
    public LocalDateTime getReported() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<byte[]> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<byte[], byte[], LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<byte[], byte[], LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<byte[]> field1() {
        return Sentreports.SENTREPORTS.SIGNATURE;
    }

    @Override
    public Field<byte[]> field2() {
        return Sentreports.SENTREPORTS.PEERCONNECTIONUUID;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Sentreports.SENTREPORTS.REPORTED;
    }

    @Override
    public byte[] component1() {
        return getSignature();
    }

    @Override
    public byte[] component2() {
        return getPeerconnectionuuid();
    }

    @Override
    public LocalDateTime component3() {
        return getReported();
    }

    @Override
    public byte[] value1() {
        return getSignature();
    }

    @Override
    public byte[] value2() {
        return getPeerconnectionuuid();
    }

    @Override
    public LocalDateTime value3() {
        return getReported();
    }

    @Override
    public SentreportsRecord value1(byte[] value) {
        setSignature(value);
        return this;
    }

    @Override
    public SentreportsRecord value2(byte[] value) {
        setPeerconnectionuuid(value);
        return this;
    }

    @Override
    public SentreportsRecord value3(LocalDateTime value) {
        setReported(value);
        return this;
    }

    @Override
    public SentreportsRecord values(byte[] value1, byte[] value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SentreportsRecord
     */
    public SentreportsRecord() {
        super(Sentreports.SENTREPORTS);
    }

    /**
     * Create a detached, initialised SentreportsRecord
     */
    public SentreportsRecord(byte[] signature, byte[] peerconnectionuuid, LocalDateTime reported) {
        super(Sentreports.SENTREPORTS);

        set(0, signature);
        set(1, peerconnectionuuid);
        set(2, reported);
    }
}
