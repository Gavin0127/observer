/*
 * Copyright  2020 Balazs Kreith
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package org.observertc.webrtc.observer.jooq.tables.records;


import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;
import org.observertc.webrtc.observer.jooq.enums.UsersRole;
import org.observertc.webrtc.observer.jooq.tables.Users;


/**
 * Users
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersRecord extends UpdatableRecordImpl<UsersRecord> implements Record6<Integer, byte[], String, byte[], byte[], UsersRole> {

    private static final long serialVersionUID = -901357283;

    /**
     * Setter for <code>WebRTCObserver.Users.id</code>. The identifier of the user for inside relations, never outside
     */
    public UsersRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>WebRTCObserver.Users.id</code>. The identifier of the user for inside relations, never outside
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>WebRTCObserver.Users.uuid</code>. The UUID of the user published outside 
     */
    public UsersRecord setUuid(byte[] value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>WebRTCObserver.Users.uuid</code>. The UUID of the user published outside 
     */
    @Size(max = 16)
    public byte[] getUuid() {
        return (byte[]) get(1);
    }

    /**
     * Setter for <code>WebRTCObserver.Users.username</code>. The username of the user
     */
    public UsersRecord setUsername(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>WebRTCObserver.Users.username</code>. The username of the user
     */
    @Size(max = 255)
    public String getUsername() {
        return (String) get(2);
    }

    /**
     * Setter for <code>WebRTCObserver.Users.password_digest</code>. The hash of the password using the salt
     */
    public UsersRecord setPasswordDigest(byte[] value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>WebRTCObserver.Users.password_digest</code>. The hash of the password using the salt
     */
    @Size(max = 64)
    public byte[] getPasswordDigest() {
        return (byte[]) get(3);
    }

    /**
     * Setter for <code>WebRTCObserver.Users.password_salt</code>. The salt for the password
     */
    public UsersRecord setPasswordSalt(byte[] value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>WebRTCObserver.Users.password_salt</code>. The salt for the password
     */
    @Size(max = 32)
    public byte[] getPasswordSalt() {
        return (byte[]) get(4);
    }

    /**
     * Setter for <code>WebRTCObserver.Users.role</code>. The role of the user determines of which endpoint it can access to
     */
    public UsersRecord setRole(UsersRole value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>WebRTCObserver.Users.role</code>. The role of the user determines of which endpoint it can access to
     */
    @NotNull
    public UsersRole getRole() {
        return (UsersRole) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, byte[], String, byte[], byte[], UsersRole> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, byte[], String, byte[], byte[], UsersRole> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Users.USERS.ID;
    }

    @Override
    public Field<byte[]> field2() {
        return Users.USERS.UUID;
    }

    @Override
    public Field<String> field3() {
        return Users.USERS.USERNAME;
    }

    @Override
    public Field<byte[]> field4() {
        return Users.USERS.PASSWORD_DIGEST;
    }

    @Override
    public Field<byte[]> field5() {
        return Users.USERS.PASSWORD_SALT;
    }

    @Override
    public Field<UsersRole> field6() {
        return Users.USERS.ROLE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public byte[] component2() {
        return getUuid();
    }

    @Override
    public String component3() {
        return getUsername();
    }

    @Override
    public byte[] component4() {
        return getPasswordDigest();
    }

    @Override
    public byte[] component5() {
        return getPasswordSalt();
    }

    @Override
    public UsersRole component6() {
        return getRole();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public byte[] value2() {
        return getUuid();
    }

    @Override
    public String value3() {
        return getUsername();
    }

    @Override
    public byte[] value4() {
        return getPasswordDigest();
    }

    @Override
    public byte[] value5() {
        return getPasswordSalt();
    }

    @Override
    public UsersRole value6() {
        return getRole();
    }

    @Override
    public UsersRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public UsersRecord value2(byte[] value) {
        setUuid(value);
        return this;
    }

    @Override
    public UsersRecord value3(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public UsersRecord value4(byte[] value) {
        setPasswordDigest(value);
        return this;
    }

    @Override
    public UsersRecord value5(byte[] value) {
        setPasswordSalt(value);
        return this;
    }

    @Override
    public UsersRecord value6(UsersRole value) {
        setRole(value);
        return this;
    }

    @Override
    public UsersRecord values(Integer value1, byte[] value2, String value3, byte[] value4, byte[] value5, UsersRole value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsersRecord
     */
    public UsersRecord() {
        super(Users.USERS);
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(Integer id, byte[] uuid, String username, byte[] passwordDigest, byte[] passwordSalt, UsersRole role) {
        super(Users.USERS);

        set(0, id);
        set(1, uuid);
        set(2, username);
        set(3, passwordDigest);
        set(4, passwordSalt);
        set(5, role);
    }
}
