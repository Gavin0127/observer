/*
 * This file is generated by jOOQ.
 */
package org.observertc.webrtc.observer.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.observertc.webrtc.observer.jooq.Indexes;
import org.observertc.webrtc.observer.jooq.Keys;
import org.observertc.webrtc.observer.jooq.Webrtcobserver;
import org.observertc.webrtc.observer.jooq.tables.records.PeerconnectionsRecord;


/**
 * A table to store information related to peer connections
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Peerconnections extends TableImpl<PeerconnectionsRecord> {

    private static final long serialVersionUID = -1132466978;

    /**
     * The reference instance of <code>WebRTCObserver.PeerConnections</code>
     */
    public static final Peerconnections PEERCONNECTIONS = new Peerconnections();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PeerconnectionsRecord> getRecordType() {
        return PeerconnectionsRecord.class;
    }

    /**
     * The column <code>WebRTCObserver.PeerConnections.peerConnectionUUID</code>.
     */
    public final TableField<PeerconnectionsRecord, byte[]> PEERCONNECTIONUUID = createField(DSL.name("peerConnectionUUID"), org.jooq.impl.SQLDataType.BINARY(16).nullable(false), this, "");

    /**
     * The column <code>WebRTCObserver.PeerConnections.callUUID</code>.
     */
    public final TableField<PeerconnectionsRecord, byte[]> CALLUUID = createField(DSL.name("callUUID"), org.jooq.impl.SQLDataType.BINARY(16), this, "");

    /**
     * The column <code>WebRTCObserver.PeerConnections.serviceUUID</code>.
     */
    public final TableField<PeerconnectionsRecord, byte[]> SERVICEUUID = createField(DSL.name("serviceUUID"), org.jooq.impl.SQLDataType.BINARY(16), this, "");

    /**
     * The column <code>WebRTCObserver.PeerConnections.joined</code>.
     */
    public final TableField<PeerconnectionsRecord, Long> JOINED = createField(DSL.name("joined"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>WebRTCObserver.PeerConnections.updated</code>.
     */
    public final TableField<PeerconnectionsRecord, Long> UPDATED = createField(DSL.name("updated"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>WebRTCObserver.PeerConnections.detached</code>.
     */
    public final TableField<PeerconnectionsRecord, Long> DETACHED = createField(DSL.name("detached"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>WebRTCObserver.PeerConnections.bridgeID</code>.
     */
    public final TableField<PeerconnectionsRecord, String> BRIDGEID = createField(DSL.name("bridgeID"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>WebRTCObserver.PeerConnections.browserID</code>.
     */
    public final TableField<PeerconnectionsRecord, String> BROWSERID = createField(DSL.name("browserID"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>WebRTCObserver.PeerConnections.providedUserID</code>.
     */
    public final TableField<PeerconnectionsRecord, String> PROVIDEDUSERID = createField(DSL.name("providedUserID"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>WebRTCObserver.PeerConnections.providedCallID</code>.
     */
    public final TableField<PeerconnectionsRecord, String> PROVIDEDCALLID = createField(DSL.name("providedCallID"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>WebRTCObserver.PeerConnections.timeZone</code>.
     */
    public final TableField<PeerconnectionsRecord, String> TIMEZONE = createField(DSL.name("timeZone"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>WebRTCObserver.PeerConnections.serviceName</code>.
     */
    public final TableField<PeerconnectionsRecord, String> SERVICENAME = createField(DSL.name("serviceName"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>WebRTCObserver.PeerConnections</code> table reference
     */
    public Peerconnections() {
        this(DSL.name("PeerConnections"), null);
    }

    /**
     * Create an aliased <code>WebRTCObserver.PeerConnections</code> table reference
     */
    public Peerconnections(String alias) {
        this(DSL.name(alias), PEERCONNECTIONS);
    }

    /**
     * Create an aliased <code>WebRTCObserver.PeerConnections</code> table reference
     */
    public Peerconnections(Name alias) {
        this(alias, PEERCONNECTIONS);
    }

    private Peerconnections(Name alias, Table<PeerconnectionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Peerconnections(Name alias, Table<PeerconnectionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("A table to store information related to peer connections"), TableOptions.table());
    }

    public <O extends Record> Peerconnections(Table<O> child, ForeignKey<O, PeerconnectionsRecord> key) {
        super(child, key, PEERCONNECTIONS);
    }

    @Override
    public Schema getSchema() {
        return Webrtcobserver.WEBRTCOBSERVER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PEERCONNECTIONS_PEERCONNECTIONS_BROWSERID_INDEX, Indexes.PEERCONNECTIONS_PEERCONNECTIONS_CALLUUID_INDEX, Indexes.PEERCONNECTIONS_PEERCONNECTIONS_DETACHED_INDEX, Indexes.PEERCONNECTIONS_PEERCONNECTIONS_PROVIDEDCALLID_INDEX, Indexes.PEERCONNECTIONS_PEERCONNECTIONS_UPDATED_INDEX);
    }

    @Override
    public UniqueKey<PeerconnectionsRecord> getPrimaryKey() {
        return Keys.KEY_PEERCONNECTIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PeerconnectionsRecord>> getKeys() {
        return Arrays.<UniqueKey<PeerconnectionsRecord>>asList(Keys.KEY_PEERCONNECTIONS_PRIMARY);
    }

    @Override
    public Peerconnections as(String alias) {
        return new Peerconnections(DSL.name(alias), this);
    }

    @Override
    public Peerconnections as(Name alias) {
        return new Peerconnections(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Peerconnections rename(String name) {
        return new Peerconnections(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Peerconnections rename(Name name) {
        return new Peerconnections(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<byte[], byte[], byte[], Long, Long, Long, String, String, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
