/*
 * Copyright  2020 Balazs Kreith
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package org.observertc.webrtc.observer.jooq.tables.records;


import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.observertc.webrtc.observer.jooq.tables.Activestreams;


/**
 * A table to track the active streams
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActivestreamsRecord extends UpdatableRecordImpl<ActivestreamsRecord> implements Record3<byte[], Long, byte[]> {

    private static final long serialVersionUID = 137974039;

    /**
     * Setter for <code>WebRTCObserver.ActiveStreams.serviceUUID</code>.
     */
    public ActivestreamsRecord setServiceuuid(byte[] value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>WebRTCObserver.ActiveStreams.serviceUUID</code>.
     */
    @NotNull
    @Size(max = 16)
    public byte[] getServiceuuid() {
        return (byte[]) get(0);
    }

    /**
     * Setter for <code>WebRTCObserver.ActiveStreams.SSRC</code>.
     */
    public ActivestreamsRecord setSsrc(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>WebRTCObserver.ActiveStreams.SSRC</code>.
     */
    @NotNull
    public Long getSsrc() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>WebRTCObserver.ActiveStreams.callUUID</code>.
     */
    public ActivestreamsRecord setCalluuid(byte[] value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>WebRTCObserver.ActiveStreams.callUUID</code>.
     */
    @Size(max = 16)
    public byte[] getCalluuid() {
        return (byte[]) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<byte[], Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<byte[], Long, byte[]> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<byte[], Long, byte[]> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<byte[]> field1() {
        return Activestreams.ACTIVESTREAMS.SERVICEUUID;
    }

    @Override
    public Field<Long> field2() {
        return Activestreams.ACTIVESTREAMS.SSRC;
    }

    @Override
    public Field<byte[]> field3() {
        return Activestreams.ACTIVESTREAMS.CALLUUID;
    }

    @Override
    public byte[] component1() {
        return getServiceuuid();
    }

    @Override
    public Long component2() {
        return getSsrc();
    }

    @Override
    public byte[] component3() {
        return getCalluuid();
    }

    @Override
    public byte[] value1() {
        return getServiceuuid();
    }

    @Override
    public Long value2() {
        return getSsrc();
    }

    @Override
    public byte[] value3() {
        return getCalluuid();
    }

    @Override
    public ActivestreamsRecord value1(byte[] value) {
        setServiceuuid(value);
        return this;
    }

    @Override
    public ActivestreamsRecord value2(Long value) {
        setSsrc(value);
        return this;
    }

    @Override
    public ActivestreamsRecord value3(byte[] value) {
        setCalluuid(value);
        return this;
    }

    @Override
    public ActivestreamsRecord values(byte[] value1, Long value2, byte[] value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ActivestreamsRecord
     */
    public ActivestreamsRecord() {
        super(Activestreams.ACTIVESTREAMS);
    }

    /**
     * Create a detached, initialised ActivestreamsRecord
     */
    public ActivestreamsRecord(byte[] serviceuuid, Long ssrc, byte[] calluuid) {
        super(Activestreams.ACTIVESTREAMS);

        set(0, serviceuuid);
        set(1, ssrc);
        set(2, calluuid);
    }
}
