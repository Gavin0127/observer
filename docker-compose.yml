version: '3.3'
services:
  #  webrtc-observer:
  #    restart: always
  #    container_name: docker_webrtc_observer
  #    image: observertc/webrtc-observer:0.4
  #    links:
  #      - kafka
  #      - mysql
  #    ports:
  #      - 8088:7080
  #    environment:
  #      - INITIAL_WAITING_TIME_IN_S=20
  #      - APPLICATION_SERVER_PORT=7080
  #      - KAFKA_HOSTS=docker_kafka:29092
  #      - DATABASE_USERNAME=root
  #      - DATABSE_PASSWORD=password
  #      - JDBC_URL=jdbc:mysql://mysqldb:3306/WebRTCObserver
  #      - MICRONAUT_CONFIG_FILES=/observer-config.yml
  #    depends_on:
  #      - kafka
  #      - mysql
  #    volumes:
  #      - ./observer-config.yml:/observer-config.yml
  # Infrastructure behind the Observer
  zookeeper:
    container_name: docker_zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    container_name: docker_kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: docker_zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://docker_kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # This "container" is a workaround to pre-create topics
  kafka-setup:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-setup
    container_name: docker_kafka_setup
    depends_on:
      - kafka
    command: "bash -c ' cub kafka-ready -b docker_kafka:29092 1 20 &&
                        kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 12 --replication-factor 1 --topic observedPCS && \
                        kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 6 --replication-factor 1 --topic reports && \
                        kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 4 --replication-factor 1 --topic reportDrafts  \
                        sleep 30'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  prometheus:
    image: prom/prometheus
    command:
      - --web.enable-lifecycle
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9099:9090
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml

  nodeexporter:
    image: prom/node-exporter
    ports:
      - "9100:9100"
  cadvisor:
    image: google/cadvisor
    ports:
      - "8081:8080"
  grafana:
    image: grafana/grafana:6.3.5
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: mtanda-histogram-panel
    ports:
      - "3001:3000"
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/dashboards:/var/lib/grafana/dashboards/default/grafana-dashboard.json



volumes:
  my-db:
    driver: local
