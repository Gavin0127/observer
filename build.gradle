import java.nio.file.Paths

class ServiceBuilder extends Copy {
    private static final String BUILD_SOURCE_DIR = "devopscripts/build/"
    private static final String DOCKER_COMPOSE_SOURCE_DIR = BUILD_SOURCE_DIR + "docker_compose/"
    private static final String MICRONAUT_APPLICATION_YAML_SOURCE_DIR = BUILD_SOURCE_DIR + "micronaut_application_yaml/"
    private static final String USED_PROFILE_SOURCE_DIR = BUILD_SOURCE_DIR + "micronaut_application_yaml/"

    private enum Service {
        WEBRTCSTAT,
    };

    private enum Datasource {
        H2,
        MYSQL,
    };

    private enum Subscriber {
        Elasticsearch
    }

    private Service service = Service.WEBRTCSTAT;

    private Datasource datasource = Datasource.H2;

    private Subscriber subscriber

    @Option(option = "service", description = "The service designated to build the configuration for")
    public void forService(Service service) {
        this.service = service
    }

    public String getService() {
        return this.service.toString().toLowerCase();
    }

    @Option(option = "datasource", description = "The datasource used in the service")
    public void forDatasource(Datasource datasource) {
        this.datasource = datasource
    }

    @Option(option = "subscriber", description = "The subscriber listening the service calculations")
    public void forSubscriber(Subscriber subscriber) {
        this.subscriber = subscriber
    }

    public String getConfiguration() {
        List<String> configurations = new ArrayList<>()
        configurations.add(this.service.toString().toLowerCase())
        configurations.add(this.datasource.toString().toLowerCase())
        if (this.subscriber != null) {
            configurations.add(this.subscriber.toString().toLowerCase())
        }
        return String.join("_", configurations)
    }

    public File getDockerComposeFile(String configuration) {
        return new File(Paths.get(this.project.rootDir, BUILD_SOURCE_DIR, DOCKER_COMPOSE_SOURCE_DIR, configuration + "yml"))
    }

    private File getMicronautApplicationYaml(String configuration) {
        return new File(Paths.get(this.project.rootDir, BUILD_SOURCE_DIR, MICRONAUT_APPLICATION_YAML_SOURCE_DIR, configuration + "yml"))
    }


//    @TaskAction
//    void execute() {
//        List<String> configurations = new ArrayList<>()
//        configurations.add(this.service.toString().toLowerCase())
//        configurations.add(this.datasource.toString().toLowerCase())
//        if (this.subscriber != null) {
//            configurations.add(this.subscriber.toString().toLowerCase())
//        }
//        String configuration = String.join("_", configurations)
//        println "Selected configuration key:" + configuration
////        File dockerComposeFile = new File(DOCKER_COMPOSE_SOURCE_DIR + configuration + ".yml")
////        File micronautApplicationFile = new File(MICRONAUT_APPLICATION_YAML_SOURCE_DIR + configuration + ".yaml")
////        File usedProfileFile = new File(USED_PROFILE_SOURCE_DIR + configuration + ".properties")
////        sun.nio.fs.UnixPath destiny = Paths.get(project.getProjectDir().tÂ§oString(), "docker-compose")
////        Files.copy(dockerComposeFile.toPath(), destiny, StandardCopyOption.REPLACE_EXISTING)
////        FileUtils.copyFile(dockerComposeFile, new File("./"))
////        this.from(dockerComposeFile).into(this.project.rootDir.toPath())
////        File dockerComposeFile = this.getDockerComposeFile()
//        println this.getDockerComposeFile(configuration).toString()
////        this.from(this.getDockerComposeFile(configuration).toString())
////                .into(this.project.rootDir.toString()).copy()
////                .rename(Paths.get(this.project.rootDir, configuration + "yml"), "docker-comopose.yyaml")
////        Files.copy(dockerComposeFile.getPath(), Path.of("./docker-comoposess"))
////        new Copy()
////                .from(dockerComposeFile)
////                .into(rootDir)
////                .rename("(.*?)", "docker-compose-candidate.yml")
////        println "${this.service.toString()}, ${this.datasource.toString()}"
//    }
}

//tasks.register("serviceBuilder", ServiceBuilder) {
//    copy {
//        from("${rootDir}/devopscripts/build/docker_compose/${getConfiguration()}.yml")
//        into rootDir
//        rename "(.*)", "docker-compose-adae.yml"
//    }
//
//    copy {
//        from("${rootDir}/devopscripts/build/used_profiles/${getConfiguration()}.yml")
//        into rootDir
//        rename "(.*)", "used-profiles.candidate.properties"
//    }
//
//
//    copy {
//        from("${rootDir}/${service}/src/main/resources/${getConfiguration()}.yml")
//        into rootDir
//        rename "(.*)", "application-candidate"
//    }
//}

