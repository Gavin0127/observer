/*
 * This file is generated by jOOQ.
 */
package com.observertc.gatekeeper.jooq.tables;


import com.observertc.gatekeeper.jooq.Indexes;
import com.observertc.gatekeeper.jooq.Keys;
import com.observertc.gatekeeper.jooq.Observertc;
import com.observertc.gatekeeper.jooq.tables.records.ObserverevaluatorsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * An associative table to map Observers to Evaluators
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Observerevaluators extends TableImpl<ObserverevaluatorsRecord> {

    private static final long serialVersionUID = -87002744;

    /**
     * The reference instance of <code>ObserveRTC.ObserverEvaluators</code>
     */
    public static final Observerevaluators OBSERVEREVALUATORS = new Observerevaluators();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ObserverevaluatorsRecord> getRecordType() {
        return ObserverevaluatorsRecord.class;
    }

    /**
     * The column <code>ObserveRTC.ObserverEvaluators.observer_id</code>. The identifier of the observer for inside relations, never outside
     */
    public final TableField<ObserverevaluatorsRecord, Integer> OBSERVER_ID = createField(DSL.name("observer_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "The identifier of the observer for inside relations, never outside");

    /**
     * The column <code>ObserveRTC.ObserverEvaluators.evaluator_id</code>. The UUID of the observer published outside 
     */
    public final TableField<ObserverevaluatorsRecord, Integer> EVALUATOR_ID = createField(DSL.name("evaluator_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "The UUID of the observer published outside ");

    /**
     * Create a <code>ObserveRTC.ObserverEvaluators</code> table reference
     */
    public Observerevaluators() {
        this(DSL.name("ObserverEvaluators"), null);
    }

    /**
     * Create an aliased <code>ObserveRTC.ObserverEvaluators</code> table reference
     */
    public Observerevaluators(String alias) {
        this(DSL.name(alias), OBSERVEREVALUATORS);
    }

    /**
     * Create an aliased <code>ObserveRTC.ObserverEvaluators</code> table reference
     */
    public Observerevaluators(Name alias) {
        this(alias, OBSERVEREVALUATORS);
    }

    private Observerevaluators(Name alias, Table<ObserverevaluatorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Observerevaluators(Name alias, Table<ObserverevaluatorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("An associative table to map Observers to Evaluators"), TableOptions.table());
    }

    public <O extends Record> Observerevaluators(Table<O> child, ForeignKey<O, ObserverevaluatorsRecord> key) {
        super(child, key, OBSERVEREVALUATORS);
    }

    @Override
    public Schema getSchema() {
        return Observertc.OBSERVERTC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OBSERVEREVALUATORS_EVALUATOR_ID, Indexes.OBSERVEREVALUATORS_OBSERVER_ID);
    }

    @Override
    public List<ForeignKey<ObserverevaluatorsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ObserverevaluatorsRecord, ?>>asList(Keys.OBSERVEREVALUATORS_IBFK_1, Keys.OBSERVEREVALUATORS_IBFK_2);
    }

    public Observers observers() {
        return new Observers(this, Keys.OBSERVEREVALUATORS_IBFK_1);
    }

    public Evaluators evaluators() {
        return new Evaluators(this, Keys.OBSERVEREVALUATORS_IBFK_2);
    }

    @Override
    public Observerevaluators as(String alias) {
        return new Observerevaluators(DSL.name(alias), this);
    }

    @Override
    public Observerevaluators as(Name alias) {
        return new Observerevaluators(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Observerevaluators rename(String name) {
        return new Observerevaluators(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Observerevaluators rename(Name name) {
        return new Observerevaluators(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
