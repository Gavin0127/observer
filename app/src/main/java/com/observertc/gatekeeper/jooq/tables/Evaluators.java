/*
 * This file is generated by jOOQ.
 */
package com.observertc.gatekeeper.jooq.tables;


import com.observertc.gatekeeper.jooq.Keys;
import com.observertc.gatekeeper.jooq.Observertc;
import com.observertc.gatekeeper.jooq.tables.records.EvaluatorsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Evaluators
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Evaluators extends TableImpl<EvaluatorsRecord> {

    private static final long serialVersionUID = 1443195124;

    /**
     * The reference instance of <code>ObserveRTC.Evaluators</code>
     */
    public static final Evaluators EVALUATORS = new Evaluators();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EvaluatorsRecord> getRecordType() {
        return EvaluatorsRecord.class;
    }

    /**
     * The column <code>ObserveRTC.Evaluators.id</code>. The identifier of the observer for inside relations, never outside
     */
    public final TableField<EvaluatorsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "The identifier of the observer for inside relations, never outside");

    /**
     * The column <code>ObserveRTC.Evaluators.uuid</code>. The UUID of the observer published outside 
     */
    public final TableField<EvaluatorsRecord, byte[]> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.BINARY(16), this, "The UUID of the observer published outside ");

    /**
     * The column <code>ObserveRTC.Evaluators.name</code>. The name of the obersver
     */
    public final TableField<EvaluatorsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "The name of the obersver");

    /**
     * The column <code>ObserveRTC.Evaluators.description</code>. The description for the observer
     */
    public final TableField<EvaluatorsRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "The description for the observer");

    /**
     * Create a <code>ObserveRTC.Evaluators</code> table reference
     */
    public Evaluators() {
        this(DSL.name("Evaluators"), null);
    }

    /**
     * Create an aliased <code>ObserveRTC.Evaluators</code> table reference
     */
    public Evaluators(String alias) {
        this(DSL.name(alias), EVALUATORS);
    }

    /**
     * Create an aliased <code>ObserveRTC.Evaluators</code> table reference
     */
    public Evaluators(Name alias) {
        this(alias, EVALUATORS);
    }

    private Evaluators(Name alias, Table<EvaluatorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Evaluators(Name alias, Table<EvaluatorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Evaluators"), TableOptions.table());
    }

    public <O extends Record> Evaluators(Table<O> child, ForeignKey<O, EvaluatorsRecord> key) {
        super(child, key, EVALUATORS);
    }

    @Override
    public Schema getSchema() {
        return Observertc.OBSERVERTC;
    }

    @Override
    public Identity<EvaluatorsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EVALUATORS;
    }

    @Override
    public UniqueKey<EvaluatorsRecord> getPrimaryKey() {
        return Keys.KEY_EVALUATORS_PRIMARY;
    }

    @Override
    public List<UniqueKey<EvaluatorsRecord>> getKeys() {
        return Arrays.<UniqueKey<EvaluatorsRecord>>asList(Keys.KEY_EVALUATORS_PRIMARY, Keys.KEY_EVALUATORS_UUID, Keys.KEY_EVALUATORS_NAME);
    }

    @Override
    public Evaluators as(String alias) {
        return new Evaluators(DSL.name(alias), this);
    }

    @Override
    public Evaluators as(Name alias) {
        return new Evaluators(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Evaluators rename(String name) {
        return new Evaluators(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Evaluators rename(Name name) {
        return new Evaluators(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, byte[], String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
