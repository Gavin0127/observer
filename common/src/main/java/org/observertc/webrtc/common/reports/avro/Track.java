/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.common.reports.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Track extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 868931198833256389L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Track\",\"namespace\":\"org.observertc.webrtc.common.reports.avro\",\"fields\":[{\"name\":\"peerConnectionUUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mediaUnit\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"concealedSamples\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"concealmentEvents\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"detached\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"ended\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"framesDecoded\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"framesDropped\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"framesReceived\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"hugeFramesSent\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"insertedSamplesForDeceleration\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"jitterBufferDelay\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"jitterBufferEmittedCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"mediaSourceID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"mediaType\",\"type\":{\"type\":\"enum\",\"name\":\"MediaType\",\"symbols\":[\"AUDIO\",\"VIDEO\",\"UNKNOWN\"]},\"default\":\"UNKNOWN\"},{\"name\":\"remoteSource\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"removedSamplesForAcceleration\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"samplesDuration\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"silentConcealedSamples\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"totalSamplesReceived\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Track> ENCODER =
      new BinaryMessageEncoder<Track>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Track> DECODER =
      new BinaryMessageDecoder<Track>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Track> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Track> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Track> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Track>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Track to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Track from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Track instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Track fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String peerConnectionUUID;
   private java.lang.String mediaUnit;
   private java.lang.Integer concealedSamples;
   private java.lang.Integer concealmentEvents;
   private java.lang.Boolean detached;
   private java.lang.Boolean ended;
   private java.lang.Long framesDecoded;
   private java.lang.Long framesDropped;
   private java.lang.Long framesReceived;
   private java.lang.Long hugeFramesSent;
   private java.lang.String id;
   private java.lang.Integer insertedSamplesForDeceleration;
   private java.lang.Double jitterBufferDelay;
   private java.lang.Integer jitterBufferEmittedCount;
   private java.lang.String mediaSourceID;
   private org.observertc.webrtc.common.reports.avro.MediaType mediaType;
   private java.lang.Boolean remoteSource;
   private java.lang.Long removedSamplesForAcceleration;
   private java.lang.Double samplesDuration;
   private java.lang.Integer silentConcealedSamples;
   private java.lang.Integer totalSamplesReceived;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Track() {}

  /**
   * All-args constructor.
   * @param peerConnectionUUID The new value for peerConnectionUUID
   * @param mediaUnit The new value for mediaUnit
   * @param concealedSamples The new value for concealedSamples
   * @param concealmentEvents The new value for concealmentEvents
   * @param detached The new value for detached
   * @param ended The new value for ended
   * @param framesDecoded The new value for framesDecoded
   * @param framesDropped The new value for framesDropped
   * @param framesReceived The new value for framesReceived
   * @param hugeFramesSent The new value for hugeFramesSent
   * @param id The new value for id
   * @param insertedSamplesForDeceleration The new value for insertedSamplesForDeceleration
   * @param jitterBufferDelay The new value for jitterBufferDelay
   * @param jitterBufferEmittedCount The new value for jitterBufferEmittedCount
   * @param mediaSourceID The new value for mediaSourceID
   * @param mediaType The new value for mediaType
   * @param remoteSource The new value for remoteSource
   * @param removedSamplesForAcceleration The new value for removedSamplesForAcceleration
   * @param samplesDuration The new value for samplesDuration
   * @param silentConcealedSamples The new value for silentConcealedSamples
   * @param totalSamplesReceived The new value for totalSamplesReceived
   */
  public Track(java.lang.String peerConnectionUUID, java.lang.String mediaUnit, java.lang.Integer concealedSamples, java.lang.Integer concealmentEvents, java.lang.Boolean detached, java.lang.Boolean ended, java.lang.Long framesDecoded, java.lang.Long framesDropped, java.lang.Long framesReceived, java.lang.Long hugeFramesSent, java.lang.String id, java.lang.Integer insertedSamplesForDeceleration, java.lang.Double jitterBufferDelay, java.lang.Integer jitterBufferEmittedCount, java.lang.String mediaSourceID, org.observertc.webrtc.common.reports.avro.MediaType mediaType, java.lang.Boolean remoteSource, java.lang.Long removedSamplesForAcceleration, java.lang.Double samplesDuration, java.lang.Integer silentConcealedSamples, java.lang.Integer totalSamplesReceived) {
    this.peerConnectionUUID = peerConnectionUUID;
    this.mediaUnit = mediaUnit;
    this.concealedSamples = concealedSamples;
    this.concealmentEvents = concealmentEvents;
    this.detached = detached;
    this.ended = ended;
    this.framesDecoded = framesDecoded;
    this.framesDropped = framesDropped;
    this.framesReceived = framesReceived;
    this.hugeFramesSent = hugeFramesSent;
    this.id = id;
    this.insertedSamplesForDeceleration = insertedSamplesForDeceleration;
    this.jitterBufferDelay = jitterBufferDelay;
    this.jitterBufferEmittedCount = jitterBufferEmittedCount;
    this.mediaSourceID = mediaSourceID;
    this.mediaType = mediaType;
    this.remoteSource = remoteSource;
    this.removedSamplesForAcceleration = removedSamplesForAcceleration;
    this.samplesDuration = samplesDuration;
    this.silentConcealedSamples = silentConcealedSamples;
    this.totalSamplesReceived = totalSamplesReceived;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return peerConnectionUUID;
    case 1: return mediaUnit;
    case 2: return concealedSamples;
    case 3: return concealmentEvents;
    case 4: return detached;
    case 5: return ended;
    case 6: return framesDecoded;
    case 7: return framesDropped;
    case 8: return framesReceived;
    case 9: return hugeFramesSent;
    case 10: return id;
    case 11: return insertedSamplesForDeceleration;
    case 12: return jitterBufferDelay;
    case 13: return jitterBufferEmittedCount;
    case 14: return mediaSourceID;
    case 15: return mediaType;
    case 16: return remoteSource;
    case 17: return removedSamplesForAcceleration;
    case 18: return samplesDuration;
    case 19: return silentConcealedSamples;
    case 20: return totalSamplesReceived;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: peerConnectionUUID = value$ != null ? value$.toString() : null; break;
    case 1: mediaUnit = value$ != null ? value$.toString() : null; break;
    case 2: concealedSamples = (java.lang.Integer)value$; break;
    case 3: concealmentEvents = (java.lang.Integer)value$; break;
    case 4: detached = (java.lang.Boolean)value$; break;
    case 5: ended = (java.lang.Boolean)value$; break;
    case 6: framesDecoded = (java.lang.Long)value$; break;
    case 7: framesDropped = (java.lang.Long)value$; break;
    case 8: framesReceived = (java.lang.Long)value$; break;
    case 9: hugeFramesSent = (java.lang.Long)value$; break;
    case 10: id = value$ != null ? value$.toString() : null; break;
    case 11: insertedSamplesForDeceleration = (java.lang.Integer)value$; break;
    case 12: jitterBufferDelay = (java.lang.Double)value$; break;
    case 13: jitterBufferEmittedCount = (java.lang.Integer)value$; break;
    case 14: mediaSourceID = value$ != null ? value$.toString() : null; break;
    case 15: mediaType = (org.observertc.webrtc.common.reports.avro.MediaType)value$; break;
    case 16: remoteSource = (java.lang.Boolean)value$; break;
    case 17: removedSamplesForAcceleration = (java.lang.Long)value$; break;
    case 18: samplesDuration = (java.lang.Double)value$; break;
    case 19: silentConcealedSamples = (java.lang.Integer)value$; break;
    case 20: totalSamplesReceived = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'peerConnectionUUID' field.
   * @return The value of the 'peerConnectionUUID' field.
   */
  public java.lang.String getPeerConnectionUUID() {
    return peerConnectionUUID;
  }



  /**
   * Gets the value of the 'mediaUnit' field.
   * @return The value of the 'mediaUnit' field.
   */
  public java.lang.String getMediaUnit() {
    return mediaUnit;
  }



  /**
   * Gets the value of the 'concealedSamples' field.
   * @return The value of the 'concealedSamples' field.
   */
  public java.lang.Integer getConcealedSamples() {
    return concealedSamples;
  }



  /**
   * Gets the value of the 'concealmentEvents' field.
   * @return The value of the 'concealmentEvents' field.
   */
  public java.lang.Integer getConcealmentEvents() {
    return concealmentEvents;
  }



  /**
   * Gets the value of the 'detached' field.
   * @return The value of the 'detached' field.
   */
  public java.lang.Boolean getDetached() {
    return detached;
  }



  /**
   * Gets the value of the 'ended' field.
   * @return The value of the 'ended' field.
   */
  public java.lang.Boolean getEnded() {
    return ended;
  }



  /**
   * Gets the value of the 'framesDecoded' field.
   * @return The value of the 'framesDecoded' field.
   */
  public java.lang.Long getFramesDecoded() {
    return framesDecoded;
  }



  /**
   * Gets the value of the 'framesDropped' field.
   * @return The value of the 'framesDropped' field.
   */
  public java.lang.Long getFramesDropped() {
    return framesDropped;
  }



  /**
   * Gets the value of the 'framesReceived' field.
   * @return The value of the 'framesReceived' field.
   */
  public java.lang.Long getFramesReceived() {
    return framesReceived;
  }



  /**
   * Gets the value of the 'hugeFramesSent' field.
   * @return The value of the 'hugeFramesSent' field.
   */
  public java.lang.Long getHugeFramesSent() {
    return hugeFramesSent;
  }



  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }



  /**
   * Gets the value of the 'insertedSamplesForDeceleration' field.
   * @return The value of the 'insertedSamplesForDeceleration' field.
   */
  public java.lang.Integer getInsertedSamplesForDeceleration() {
    return insertedSamplesForDeceleration;
  }



  /**
   * Gets the value of the 'jitterBufferDelay' field.
   * @return The value of the 'jitterBufferDelay' field.
   */
  public java.lang.Double getJitterBufferDelay() {
    return jitterBufferDelay;
  }



  /**
   * Gets the value of the 'jitterBufferEmittedCount' field.
   * @return The value of the 'jitterBufferEmittedCount' field.
   */
  public java.lang.Integer getJitterBufferEmittedCount() {
    return jitterBufferEmittedCount;
  }



  /**
   * Gets the value of the 'mediaSourceID' field.
   * @return The value of the 'mediaSourceID' field.
   */
  public java.lang.String getMediaSourceID() {
    return mediaSourceID;
  }



  /**
   * Gets the value of the 'mediaType' field.
   * @return The value of the 'mediaType' field.
   */
  public org.observertc.webrtc.common.reports.avro.MediaType getMediaType() {
    return mediaType;
  }



  /**
   * Gets the value of the 'remoteSource' field.
   * @return The value of the 'remoteSource' field.
   */
  public java.lang.Boolean getRemoteSource() {
    return remoteSource;
  }



  /**
   * Gets the value of the 'removedSamplesForAcceleration' field.
   * @return The value of the 'removedSamplesForAcceleration' field.
   */
  public java.lang.Long getRemovedSamplesForAcceleration() {
    return removedSamplesForAcceleration;
  }



  /**
   * Gets the value of the 'samplesDuration' field.
   * @return The value of the 'samplesDuration' field.
   */
  public java.lang.Double getSamplesDuration() {
    return samplesDuration;
  }



  /**
   * Gets the value of the 'silentConcealedSamples' field.
   * @return The value of the 'silentConcealedSamples' field.
   */
  public java.lang.Integer getSilentConcealedSamples() {
    return silentConcealedSamples;
  }



  /**
   * Gets the value of the 'totalSamplesReceived' field.
   * @return The value of the 'totalSamplesReceived' field.
   */
  public java.lang.Integer getTotalSamplesReceived() {
    return totalSamplesReceived;
  }



  /**
   * Creates a new Track RecordBuilder.
   * @return A new Track RecordBuilder
   */
  public static org.observertc.webrtc.common.reports.avro.Track.Builder newBuilder() {
    return new org.observertc.webrtc.common.reports.avro.Track.Builder();
  }

  /**
   * Creates a new Track RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Track RecordBuilder
   */
  public static org.observertc.webrtc.common.reports.avro.Track.Builder newBuilder(org.observertc.webrtc.common.reports.avro.Track.Builder other) {
    if (other == null) {
      return new org.observertc.webrtc.common.reports.avro.Track.Builder();
    } else {
      return new org.observertc.webrtc.common.reports.avro.Track.Builder(other);
    }
  }

  /**
   * Creates a new Track RecordBuilder by copying an existing Track instance.
   * @param other The existing instance to copy.
   * @return A new Track RecordBuilder
   */
  public static org.observertc.webrtc.common.reports.avro.Track.Builder newBuilder(org.observertc.webrtc.common.reports.avro.Track other) {
    if (other == null) {
      return new org.observertc.webrtc.common.reports.avro.Track.Builder();
    } else {
      return new org.observertc.webrtc.common.reports.avro.Track.Builder(other);
    }
  }

  /**
   * RecordBuilder for Track instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Track>
    implements org.apache.avro.data.RecordBuilder<Track> {

    private java.lang.String peerConnectionUUID;
    private java.lang.String mediaUnit;
    private java.lang.Integer concealedSamples;
    private java.lang.Integer concealmentEvents;
    private java.lang.Boolean detached;
    private java.lang.Boolean ended;
    private java.lang.Long framesDecoded;
    private java.lang.Long framesDropped;
    private java.lang.Long framesReceived;
    private java.lang.Long hugeFramesSent;
    private java.lang.String id;
    private java.lang.Integer insertedSamplesForDeceleration;
    private java.lang.Double jitterBufferDelay;
    private java.lang.Integer jitterBufferEmittedCount;
    private java.lang.String mediaSourceID;
    private org.observertc.webrtc.common.reports.avro.MediaType mediaType;
    private java.lang.Boolean remoteSource;
    private java.lang.Long removedSamplesForAcceleration;
    private java.lang.Double samplesDuration;
    private java.lang.Integer silentConcealedSamples;
    private java.lang.Integer totalSamplesReceived;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.webrtc.common.reports.avro.Track.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[0].schema(), other.peerConnectionUUID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mediaUnit)) {
        this.mediaUnit = data().deepCopy(fields()[1].schema(), other.mediaUnit);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.concealedSamples)) {
        this.concealedSamples = data().deepCopy(fields()[2].schema(), other.concealedSamples);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.concealmentEvents)) {
        this.concealmentEvents = data().deepCopy(fields()[3].schema(), other.concealmentEvents);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.detached)) {
        this.detached = data().deepCopy(fields()[4].schema(), other.detached);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.ended)) {
        this.ended = data().deepCopy(fields()[5].schema(), other.ended);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.framesDecoded)) {
        this.framesDecoded = data().deepCopy(fields()[6].schema(), other.framesDecoded);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.framesDropped)) {
        this.framesDropped = data().deepCopy(fields()[7].schema(), other.framesDropped);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.framesReceived)) {
        this.framesReceived = data().deepCopy(fields()[8].schema(), other.framesReceived);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.hugeFramesSent)) {
        this.hugeFramesSent = data().deepCopy(fields()[9].schema(), other.hugeFramesSent);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.id)) {
        this.id = data().deepCopy(fields()[10].schema(), other.id);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.insertedSamplesForDeceleration)) {
        this.insertedSamplesForDeceleration = data().deepCopy(fields()[11].schema(), other.insertedSamplesForDeceleration);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.jitterBufferDelay)) {
        this.jitterBufferDelay = data().deepCopy(fields()[12].schema(), other.jitterBufferDelay);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.jitterBufferEmittedCount)) {
        this.jitterBufferEmittedCount = data().deepCopy(fields()[13].schema(), other.jitterBufferEmittedCount);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.mediaSourceID)) {
        this.mediaSourceID = data().deepCopy(fields()[14].schema(), other.mediaSourceID);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[15].schema(), other.mediaType);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.remoteSource)) {
        this.remoteSource = data().deepCopy(fields()[16].schema(), other.remoteSource);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.removedSamplesForAcceleration)) {
        this.removedSamplesForAcceleration = data().deepCopy(fields()[17].schema(), other.removedSamplesForAcceleration);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.samplesDuration)) {
        this.samplesDuration = data().deepCopy(fields()[18].schema(), other.samplesDuration);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.silentConcealedSamples)) {
        this.silentConcealedSamples = data().deepCopy(fields()[19].schema(), other.silentConcealedSamples);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.totalSamplesReceived)) {
        this.totalSamplesReceived = data().deepCopy(fields()[20].schema(), other.totalSamplesReceived);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
    }

    /**
     * Creates a Builder by copying an existing Track instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.webrtc.common.reports.avro.Track other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[0].schema(), other.peerConnectionUUID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnit)) {
        this.mediaUnit = data().deepCopy(fields()[1].schema(), other.mediaUnit);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.concealedSamples)) {
        this.concealedSamples = data().deepCopy(fields()[2].schema(), other.concealedSamples);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.concealmentEvents)) {
        this.concealmentEvents = data().deepCopy(fields()[3].schema(), other.concealmentEvents);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.detached)) {
        this.detached = data().deepCopy(fields()[4].schema(), other.detached);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ended)) {
        this.ended = data().deepCopy(fields()[5].schema(), other.ended);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.framesDecoded)) {
        this.framesDecoded = data().deepCopy(fields()[6].schema(), other.framesDecoded);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.framesDropped)) {
        this.framesDropped = data().deepCopy(fields()[7].schema(), other.framesDropped);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.framesReceived)) {
        this.framesReceived = data().deepCopy(fields()[8].schema(), other.framesReceived);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.hugeFramesSent)) {
        this.hugeFramesSent = data().deepCopy(fields()[9].schema(), other.hugeFramesSent);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.id)) {
        this.id = data().deepCopy(fields()[10].schema(), other.id);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.insertedSamplesForDeceleration)) {
        this.insertedSamplesForDeceleration = data().deepCopy(fields()[11].schema(), other.insertedSamplesForDeceleration);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.jitterBufferDelay)) {
        this.jitterBufferDelay = data().deepCopy(fields()[12].schema(), other.jitterBufferDelay);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.jitterBufferEmittedCount)) {
        this.jitterBufferEmittedCount = data().deepCopy(fields()[13].schema(), other.jitterBufferEmittedCount);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.mediaSourceID)) {
        this.mediaSourceID = data().deepCopy(fields()[14].schema(), other.mediaSourceID);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[15].schema(), other.mediaType);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.remoteSource)) {
        this.remoteSource = data().deepCopy(fields()[16].schema(), other.remoteSource);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.removedSamplesForAcceleration)) {
        this.removedSamplesForAcceleration = data().deepCopy(fields()[17].schema(), other.removedSamplesForAcceleration);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.samplesDuration)) {
        this.samplesDuration = data().deepCopy(fields()[18].schema(), other.samplesDuration);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.silentConcealedSamples)) {
        this.silentConcealedSamples = data().deepCopy(fields()[19].schema(), other.silentConcealedSamples);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.totalSamplesReceived)) {
        this.totalSamplesReceived = data().deepCopy(fields()[20].schema(), other.totalSamplesReceived);
        fieldSetFlags()[20] = true;
      }
    }

    /**
      * Gets the value of the 'peerConnectionUUID' field.
      * @return The value.
      */
    public java.lang.String getPeerConnectionUUID() {
      return peerConnectionUUID;
    }


    /**
      * Sets the value of the 'peerConnectionUUID' field.
      * @param value The value of 'peerConnectionUUID'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setPeerConnectionUUID(java.lang.String value) {
      validate(fields()[0], value);
      this.peerConnectionUUID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionUUID' field has been set.
      * @return True if the 'peerConnectionUUID' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionUUID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'peerConnectionUUID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearPeerConnectionUUID() {
      peerConnectionUUID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnit' field.
      * @return The value.
      */
    public java.lang.String getMediaUnit() {
      return mediaUnit;
    }


    /**
      * Sets the value of the 'mediaUnit' field.
      * @param value The value of 'mediaUnit'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setMediaUnit(java.lang.String value) {
      validate(fields()[1], value);
      this.mediaUnit = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnit' field has been set.
      * @return True if the 'mediaUnit' field has been set, false otherwise.
      */
    public boolean hasMediaUnit() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mediaUnit' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearMediaUnit() {
      mediaUnit = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'concealedSamples' field.
      * @return The value.
      */
    public java.lang.Integer getConcealedSamples() {
      return concealedSamples;
    }


    /**
      * Sets the value of the 'concealedSamples' field.
      * @param value The value of 'concealedSamples'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setConcealedSamples(java.lang.Integer value) {
      validate(fields()[2], value);
      this.concealedSamples = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'concealedSamples' field has been set.
      * @return True if the 'concealedSamples' field has been set, false otherwise.
      */
    public boolean hasConcealedSamples() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'concealedSamples' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearConcealedSamples() {
      concealedSamples = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'concealmentEvents' field.
      * @return The value.
      */
    public java.lang.Integer getConcealmentEvents() {
      return concealmentEvents;
    }


    /**
      * Sets the value of the 'concealmentEvents' field.
      * @param value The value of 'concealmentEvents'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setConcealmentEvents(java.lang.Integer value) {
      validate(fields()[3], value);
      this.concealmentEvents = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'concealmentEvents' field has been set.
      * @return True if the 'concealmentEvents' field has been set, false otherwise.
      */
    public boolean hasConcealmentEvents() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'concealmentEvents' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearConcealmentEvents() {
      concealmentEvents = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'detached' field.
      * @return The value.
      */
    public java.lang.Boolean getDetached() {
      return detached;
    }


    /**
      * Sets the value of the 'detached' field.
      * @param value The value of 'detached'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setDetached(java.lang.Boolean value) {
      validate(fields()[4], value);
      this.detached = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'detached' field has been set.
      * @return True if the 'detached' field has been set, false otherwise.
      */
    public boolean hasDetached() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'detached' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearDetached() {
      detached = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'ended' field.
      * @return The value.
      */
    public java.lang.Boolean getEnded() {
      return ended;
    }


    /**
      * Sets the value of the 'ended' field.
      * @param value The value of 'ended'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setEnded(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.ended = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'ended' field has been set.
      * @return True if the 'ended' field has been set, false otherwise.
      */
    public boolean hasEnded() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'ended' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearEnded() {
      ended = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesDecoded' field.
      * @return The value.
      */
    public java.lang.Long getFramesDecoded() {
      return framesDecoded;
    }


    /**
      * Sets the value of the 'framesDecoded' field.
      * @param value The value of 'framesDecoded'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setFramesDecoded(java.lang.Long value) {
      validate(fields()[6], value);
      this.framesDecoded = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'framesDecoded' field has been set.
      * @return True if the 'framesDecoded' field has been set, false otherwise.
      */
    public boolean hasFramesDecoded() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'framesDecoded' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearFramesDecoded() {
      framesDecoded = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesDropped' field.
      * @return The value.
      */
    public java.lang.Long getFramesDropped() {
      return framesDropped;
    }


    /**
      * Sets the value of the 'framesDropped' field.
      * @param value The value of 'framesDropped'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setFramesDropped(java.lang.Long value) {
      validate(fields()[7], value);
      this.framesDropped = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'framesDropped' field has been set.
      * @return True if the 'framesDropped' field has been set, false otherwise.
      */
    public boolean hasFramesDropped() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'framesDropped' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearFramesDropped() {
      framesDropped = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesReceived' field.
      * @return The value.
      */
    public java.lang.Long getFramesReceived() {
      return framesReceived;
    }


    /**
      * Sets the value of the 'framesReceived' field.
      * @param value The value of 'framesReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setFramesReceived(java.lang.Long value) {
      validate(fields()[8], value);
      this.framesReceived = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'framesReceived' field has been set.
      * @return True if the 'framesReceived' field has been set, false otherwise.
      */
    public boolean hasFramesReceived() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'framesReceived' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearFramesReceived() {
      framesReceived = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'hugeFramesSent' field.
      * @return The value.
      */
    public java.lang.Long getHugeFramesSent() {
      return hugeFramesSent;
    }


    /**
      * Sets the value of the 'hugeFramesSent' field.
      * @param value The value of 'hugeFramesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setHugeFramesSent(java.lang.Long value) {
      validate(fields()[9], value);
      this.hugeFramesSent = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'hugeFramesSent' field has been set.
      * @return True if the 'hugeFramesSent' field has been set, false otherwise.
      */
    public boolean hasHugeFramesSent() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'hugeFramesSent' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearHugeFramesSent() {
      hugeFramesSent = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setId(java.lang.String value) {
      validate(fields()[10], value);
      this.id = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearId() {
      id = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'insertedSamplesForDeceleration' field.
      * @return The value.
      */
    public java.lang.Integer getInsertedSamplesForDeceleration() {
      return insertedSamplesForDeceleration;
    }


    /**
      * Sets the value of the 'insertedSamplesForDeceleration' field.
      * @param value The value of 'insertedSamplesForDeceleration'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setInsertedSamplesForDeceleration(java.lang.Integer value) {
      validate(fields()[11], value);
      this.insertedSamplesForDeceleration = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'insertedSamplesForDeceleration' field has been set.
      * @return True if the 'insertedSamplesForDeceleration' field has been set, false otherwise.
      */
    public boolean hasInsertedSamplesForDeceleration() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'insertedSamplesForDeceleration' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearInsertedSamplesForDeceleration() {
      insertedSamplesForDeceleration = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitterBufferDelay' field.
      * @return The value.
      */
    public java.lang.Double getJitterBufferDelay() {
      return jitterBufferDelay;
    }


    /**
      * Sets the value of the 'jitterBufferDelay' field.
      * @param value The value of 'jitterBufferDelay'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setJitterBufferDelay(java.lang.Double value) {
      validate(fields()[12], value);
      this.jitterBufferDelay = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'jitterBufferDelay' field has been set.
      * @return True if the 'jitterBufferDelay' field has been set, false otherwise.
      */
    public boolean hasJitterBufferDelay() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'jitterBufferDelay' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearJitterBufferDelay() {
      jitterBufferDelay = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitterBufferEmittedCount' field.
      * @return The value.
      */
    public java.lang.Integer getJitterBufferEmittedCount() {
      return jitterBufferEmittedCount;
    }


    /**
      * Sets the value of the 'jitterBufferEmittedCount' field.
      * @param value The value of 'jitterBufferEmittedCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setJitterBufferEmittedCount(java.lang.Integer value) {
      validate(fields()[13], value);
      this.jitterBufferEmittedCount = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'jitterBufferEmittedCount' field has been set.
      * @return True if the 'jitterBufferEmittedCount' field has been set, false otherwise.
      */
    public boolean hasJitterBufferEmittedCount() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'jitterBufferEmittedCount' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearJitterBufferEmittedCount() {
      jitterBufferEmittedCount = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaSourceID' field.
      * @return The value.
      */
    public java.lang.String getMediaSourceID() {
      return mediaSourceID;
    }


    /**
      * Sets the value of the 'mediaSourceID' field.
      * @param value The value of 'mediaSourceID'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setMediaSourceID(java.lang.String value) {
      validate(fields()[14], value);
      this.mediaSourceID = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaSourceID' field has been set.
      * @return True if the 'mediaSourceID' field has been set, false otherwise.
      */
    public boolean hasMediaSourceID() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'mediaSourceID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearMediaSourceID() {
      mediaSourceID = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaType' field.
      * @return The value.
      */
    public org.observertc.webrtc.common.reports.avro.MediaType getMediaType() {
      return mediaType;
    }


    /**
      * Sets the value of the 'mediaType' field.
      * @param value The value of 'mediaType'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setMediaType(org.observertc.webrtc.common.reports.avro.MediaType value) {
      validate(fields()[15], value);
      this.mediaType = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaType' field has been set.
      * @return True if the 'mediaType' field has been set, false otherwise.
      */
    public boolean hasMediaType() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'mediaType' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearMediaType() {
      mediaType = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteSource' field.
      * @return The value.
      */
    public java.lang.Boolean getRemoteSource() {
      return remoteSource;
    }


    /**
      * Sets the value of the 'remoteSource' field.
      * @param value The value of 'remoteSource'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setRemoteSource(java.lang.Boolean value) {
      validate(fields()[16], value);
      this.remoteSource = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteSource' field has been set.
      * @return True if the 'remoteSource' field has been set, false otherwise.
      */
    public boolean hasRemoteSource() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'remoteSource' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearRemoteSource() {
      remoteSource = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'removedSamplesForAcceleration' field.
      * @return The value.
      */
    public java.lang.Long getRemovedSamplesForAcceleration() {
      return removedSamplesForAcceleration;
    }


    /**
      * Sets the value of the 'removedSamplesForAcceleration' field.
      * @param value The value of 'removedSamplesForAcceleration'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setRemovedSamplesForAcceleration(java.lang.Long value) {
      validate(fields()[17], value);
      this.removedSamplesForAcceleration = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'removedSamplesForAcceleration' field has been set.
      * @return True if the 'removedSamplesForAcceleration' field has been set, false otherwise.
      */
    public boolean hasRemovedSamplesForAcceleration() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'removedSamplesForAcceleration' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearRemovedSamplesForAcceleration() {
      removedSamplesForAcceleration = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'samplesDuration' field.
      * @return The value.
      */
    public java.lang.Double getSamplesDuration() {
      return samplesDuration;
    }


    /**
      * Sets the value of the 'samplesDuration' field.
      * @param value The value of 'samplesDuration'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setSamplesDuration(java.lang.Double value) {
      validate(fields()[18], value);
      this.samplesDuration = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'samplesDuration' field has been set.
      * @return True if the 'samplesDuration' field has been set, false otherwise.
      */
    public boolean hasSamplesDuration() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'samplesDuration' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearSamplesDuration() {
      samplesDuration = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'silentConcealedSamples' field.
      * @return The value.
      */
    public java.lang.Integer getSilentConcealedSamples() {
      return silentConcealedSamples;
    }


    /**
      * Sets the value of the 'silentConcealedSamples' field.
      * @param value The value of 'silentConcealedSamples'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setSilentConcealedSamples(java.lang.Integer value) {
      validate(fields()[19], value);
      this.silentConcealedSamples = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'silentConcealedSamples' field has been set.
      * @return True if the 'silentConcealedSamples' field has been set, false otherwise.
      */
    public boolean hasSilentConcealedSamples() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'silentConcealedSamples' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearSilentConcealedSamples() {
      silentConcealedSamples = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSamplesReceived' field.
      * @return The value.
      */
    public java.lang.Integer getTotalSamplesReceived() {
      return totalSamplesReceived;
    }


    /**
      * Sets the value of the 'totalSamplesReceived' field.
      * @param value The value of 'totalSamplesReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder setTotalSamplesReceived(java.lang.Integer value) {
      validate(fields()[20], value);
      this.totalSamplesReceived = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSamplesReceived' field has been set.
      * @return True if the 'totalSamplesReceived' field has been set, false otherwise.
      */
    public boolean hasTotalSamplesReceived() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'totalSamplesReceived' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.Track.Builder clearTotalSamplesReceived() {
      totalSamplesReceived = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Track build() {
      try {
        Track record = new Track();
        record.peerConnectionUUID = fieldSetFlags()[0] ? this.peerConnectionUUID : (java.lang.String) defaultValue(fields()[0]);
        record.mediaUnit = fieldSetFlags()[1] ? this.mediaUnit : (java.lang.String) defaultValue(fields()[1]);
        record.concealedSamples = fieldSetFlags()[2] ? this.concealedSamples : (java.lang.Integer) defaultValue(fields()[2]);
        record.concealmentEvents = fieldSetFlags()[3] ? this.concealmentEvents : (java.lang.Integer) defaultValue(fields()[3]);
        record.detached = fieldSetFlags()[4] ? this.detached : (java.lang.Boolean) defaultValue(fields()[4]);
        record.ended = fieldSetFlags()[5] ? this.ended : (java.lang.Boolean) defaultValue(fields()[5]);
        record.framesDecoded = fieldSetFlags()[6] ? this.framesDecoded : (java.lang.Long) defaultValue(fields()[6]);
        record.framesDropped = fieldSetFlags()[7] ? this.framesDropped : (java.lang.Long) defaultValue(fields()[7]);
        record.framesReceived = fieldSetFlags()[8] ? this.framesReceived : (java.lang.Long) defaultValue(fields()[8]);
        record.hugeFramesSent = fieldSetFlags()[9] ? this.hugeFramesSent : (java.lang.Long) defaultValue(fields()[9]);
        record.id = fieldSetFlags()[10] ? this.id : (java.lang.String) defaultValue(fields()[10]);
        record.insertedSamplesForDeceleration = fieldSetFlags()[11] ? this.insertedSamplesForDeceleration : (java.lang.Integer) defaultValue(fields()[11]);
        record.jitterBufferDelay = fieldSetFlags()[12] ? this.jitterBufferDelay : (java.lang.Double) defaultValue(fields()[12]);
        record.jitterBufferEmittedCount = fieldSetFlags()[13] ? this.jitterBufferEmittedCount : (java.lang.Integer) defaultValue(fields()[13]);
        record.mediaSourceID = fieldSetFlags()[14] ? this.mediaSourceID : (java.lang.String) defaultValue(fields()[14]);
        record.mediaType = fieldSetFlags()[15] ? this.mediaType : (org.observertc.webrtc.common.reports.avro.MediaType) defaultValue(fields()[15]);
        record.remoteSource = fieldSetFlags()[16] ? this.remoteSource : (java.lang.Boolean) defaultValue(fields()[16]);
        record.removedSamplesForAcceleration = fieldSetFlags()[17] ? this.removedSamplesForAcceleration : (java.lang.Long) defaultValue(fields()[17]);
        record.samplesDuration = fieldSetFlags()[18] ? this.samplesDuration : (java.lang.Double) defaultValue(fields()[18]);
        record.silentConcealedSamples = fieldSetFlags()[19] ? this.silentConcealedSamples : (java.lang.Integer) defaultValue(fields()[19]);
        record.totalSamplesReceived = fieldSetFlags()[20] ? this.totalSamplesReceived : (java.lang.Integer) defaultValue(fields()[20]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Track>
    WRITER$ = (org.apache.avro.io.DatumWriter<Track>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Track>
    READER$ = (org.apache.avro.io.DatumReader<Track>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.peerConnectionUUID);

    out.writeString(this.mediaUnit);

    if (this.concealedSamples == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.concealedSamples);
    }

    if (this.concealmentEvents == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.concealmentEvents);
    }

    if (this.detached == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.detached);
    }

    if (this.ended == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.ended);
    }

    if (this.framesDecoded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.framesDecoded);
    }

    if (this.framesDropped == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.framesDropped);
    }

    if (this.framesReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.framesReceived);
    }

    if (this.hugeFramesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.hugeFramesSent);
    }

    out.writeString(this.id);

    if (this.insertedSamplesForDeceleration == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.insertedSamplesForDeceleration);
    }

    if (this.jitterBufferDelay == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.jitterBufferDelay);
    }

    if (this.jitterBufferEmittedCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.jitterBufferEmittedCount);
    }

    if (this.mediaSourceID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mediaSourceID);
    }

    out.writeEnum(this.mediaType.ordinal());

    if (this.remoteSource == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.remoteSource);
    }

    if (this.removedSamplesForAcceleration == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.removedSamplesForAcceleration);
    }

    if (this.samplesDuration == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.samplesDuration);
    }

    if (this.silentConcealedSamples == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.silentConcealedSamples);
    }

    if (this.totalSamplesReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.totalSamplesReceived);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.peerConnectionUUID = in.readString();

      this.mediaUnit = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.concealedSamples = null;
      } else {
        this.concealedSamples = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.concealmentEvents = null;
      } else {
        this.concealmentEvents = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.detached = null;
      } else {
        this.detached = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.ended = null;
      } else {
        this.ended = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesDecoded = null;
      } else {
        this.framesDecoded = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesDropped = null;
      } else {
        this.framesDropped = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesReceived = null;
      } else {
        this.framesReceived = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hugeFramesSent = null;
      } else {
        this.hugeFramesSent = in.readLong();
      }

      this.id = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.insertedSamplesForDeceleration = null;
      } else {
        this.insertedSamplesForDeceleration = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.jitterBufferDelay = null;
      } else {
        this.jitterBufferDelay = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.jitterBufferEmittedCount = null;
      } else {
        this.jitterBufferEmittedCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mediaSourceID = null;
      } else {
        this.mediaSourceID = in.readString();
      }

      this.mediaType = org.observertc.webrtc.common.reports.avro.MediaType.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.remoteSource = null;
      } else {
        this.remoteSource = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.removedSamplesForAcceleration = null;
      } else {
        this.removedSamplesForAcceleration = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.samplesDuration = null;
      } else {
        this.samplesDuration = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.silentConcealedSamples = null;
      } else {
        this.silentConcealedSamples = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalSamplesReceived = null;
      } else {
        this.totalSamplesReceived = in.readInt();
      }

    } else {
      for (int i = 0; i < 21; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.peerConnectionUUID = in.readString();
          break;

        case 1:
          this.mediaUnit = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.concealedSamples = null;
          } else {
            this.concealedSamples = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.concealmentEvents = null;
          } else {
            this.concealmentEvents = in.readInt();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.detached = null;
          } else {
            this.detached = in.readBoolean();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ended = null;
          } else {
            this.ended = in.readBoolean();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesDecoded = null;
          } else {
            this.framesDecoded = in.readLong();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesDropped = null;
          } else {
            this.framesDropped = in.readLong();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesReceived = null;
          } else {
            this.framesReceived = in.readLong();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hugeFramesSent = null;
          } else {
            this.hugeFramesSent = in.readLong();
          }
          break;

        case 10:
          this.id = in.readString();
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.insertedSamplesForDeceleration = null;
          } else {
            this.insertedSamplesForDeceleration = in.readInt();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.jitterBufferDelay = null;
          } else {
            this.jitterBufferDelay = in.readDouble();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.jitterBufferEmittedCount = null;
          } else {
            this.jitterBufferEmittedCount = in.readInt();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mediaSourceID = null;
          } else {
            this.mediaSourceID = in.readString();
          }
          break;

        case 15:
          this.mediaType = org.observertc.webrtc.common.reports.avro.MediaType.values()[in.readEnum()];
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.remoteSource = null;
          } else {
            this.remoteSource = in.readBoolean();
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.removedSamplesForAcceleration = null;
          } else {
            this.removedSamplesForAcceleration = in.readLong();
          }
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.samplesDuration = null;
          } else {
            this.samplesDuration = in.readDouble();
          }
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.silentConcealedSamples = null;
          } else {
            this.silentConcealedSamples = in.readInt();
          }
          break;

        case 20:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalSamplesReceived = null;
          } else {
            this.totalSamplesReceived = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










