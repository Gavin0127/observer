/*
 * Copyright  2020 Balazs Kreith
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.common.reports.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OutboundRTP extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7399591475411471820L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OutboundRTP\",\"namespace\":\"org.observertc.webrtc.common.reports.avro\",\"fields\":[{\"name\":\"peerConnectionUUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mediaUnit\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bytesSent\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"codecID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"encoderImplementation\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"firCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"framesEncoded\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"headerBytesSent\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isRemote\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"keyFramesEncoded\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"mediaSourceID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"mediaType\",\"type\":{\"type\":\"enum\",\"name\":\"MediaType\",\"symbols\":[\"AUDIO\",\"VIDEO\",\"UNKNOWN\"]},\"default\":\"UNKNOWN\"},{\"name\":\"nackCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"packetsSent\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"pliCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"qpSum\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"qualityLimitationReason\",\"type\":{\"type\":\"enum\",\"name\":\"RTCQualityLimitationReason\",\"symbols\":[\"BANDWIDTH\",\"CPU\",\"NONE\",\"OTHER\",\"UNKNOWN\"]},\"default\":\"unknown\"},{\"name\":\"qualityLimitationResolutionChanges\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"remoteID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"retransmittedBytesSent\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"retransmittedPacketsSent\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"ssrc\",\"type\":\"long\"},{\"name\":\"totalEncodedBytesTarget\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"totalEncodeTime\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"totalPacketSendDelay\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"trackID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"transportID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OutboundRTP> ENCODER =
      new BinaryMessageEncoder<OutboundRTP>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OutboundRTP> DECODER =
      new BinaryMessageDecoder<OutboundRTP>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OutboundRTP> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OutboundRTP> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OutboundRTP> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OutboundRTP>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OutboundRTP to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OutboundRTP from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OutboundRTP instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OutboundRTP fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String peerConnectionUUID;
   private java.lang.String mediaUnit;
   private java.lang.Long bytesSent;
   private java.lang.String codecID;
   private java.lang.String encoderImplementation;
   private java.lang.Integer firCount;
   private java.lang.Integer framesEncoded;
   private java.lang.Long headerBytesSent;
   private java.lang.String id;
   private java.lang.Boolean isRemote;
   private java.lang.Long keyFramesEncoded;
   private java.lang.String mediaSourceID;
   private org.observertc.webrtc.common.reports.avro.MediaType mediaType;
   private java.lang.Integer nackCount;
   private java.lang.Integer packetsSent;
   private java.lang.Integer pliCount;
   private java.lang.Double qpSum;
   private org.observertc.webrtc.common.reports.avro.RTCQualityLimitationReason qualityLimitationReason;
   private java.lang.Long qualityLimitationResolutionChanges;
   private java.lang.String remoteID;
   private java.lang.Long retransmittedBytesSent;
   private java.lang.Integer retransmittedPacketsSent;
   private long ssrc;
   private java.lang.Long totalEncodedBytesTarget;
   private java.lang.Double totalEncodeTime;
   private java.lang.Double totalPacketSendDelay;
   private java.lang.String trackID;
   private java.lang.String transportID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OutboundRTP() {}

  /**
   * All-args constructor.
   * @param peerConnectionUUID The new value for peerConnectionUUID
   * @param mediaUnit The new value for mediaUnit
   * @param bytesSent The new value for bytesSent
   * @param codecID The new value for codecID
   * @param encoderImplementation The new value for encoderImplementation
   * @param firCount The new value for firCount
   * @param framesEncoded The new value for framesEncoded
   * @param headerBytesSent The new value for headerBytesSent
   * @param id The new value for id
   * @param isRemote The new value for isRemote
   * @param keyFramesEncoded The new value for keyFramesEncoded
   * @param mediaSourceID The new value for mediaSourceID
   * @param mediaType The new value for mediaType
   * @param nackCount The new value for nackCount
   * @param packetsSent The new value for packetsSent
   * @param pliCount The new value for pliCount
   * @param qpSum The new value for qpSum
   * @param qualityLimitationReason The new value for qualityLimitationReason
   * @param qualityLimitationResolutionChanges The new value for qualityLimitationResolutionChanges
   * @param remoteID The new value for remoteID
   * @param retransmittedBytesSent The new value for retransmittedBytesSent
   * @param retransmittedPacketsSent The new value for retransmittedPacketsSent
   * @param ssrc The new value for ssrc
   * @param totalEncodedBytesTarget The new value for totalEncodedBytesTarget
   * @param totalEncodeTime The new value for totalEncodeTime
   * @param totalPacketSendDelay The new value for totalPacketSendDelay
   * @param trackID The new value for trackID
   * @param transportID The new value for transportID
   */
  public OutboundRTP(java.lang.String peerConnectionUUID, java.lang.String mediaUnit, java.lang.Long bytesSent, java.lang.String codecID, java.lang.String encoderImplementation, java.lang.Integer firCount, java.lang.Integer framesEncoded, java.lang.Long headerBytesSent, java.lang.String id, java.lang.Boolean isRemote, java.lang.Long keyFramesEncoded, java.lang.String mediaSourceID, org.observertc.webrtc.common.reports.avro.MediaType mediaType, java.lang.Integer nackCount, java.lang.Integer packetsSent, java.lang.Integer pliCount, java.lang.Double qpSum, org.observertc.webrtc.common.reports.avro.RTCQualityLimitationReason qualityLimitationReason, java.lang.Long qualityLimitationResolutionChanges, java.lang.String remoteID, java.lang.Long retransmittedBytesSent, java.lang.Integer retransmittedPacketsSent, java.lang.Long ssrc, java.lang.Long totalEncodedBytesTarget, java.lang.Double totalEncodeTime, java.lang.Double totalPacketSendDelay, java.lang.String trackID, java.lang.String transportID) {
    this.peerConnectionUUID = peerConnectionUUID;
    this.mediaUnit = mediaUnit;
    this.bytesSent = bytesSent;
    this.codecID = codecID;
    this.encoderImplementation = encoderImplementation;
    this.firCount = firCount;
    this.framesEncoded = framesEncoded;
    this.headerBytesSent = headerBytesSent;
    this.id = id;
    this.isRemote = isRemote;
    this.keyFramesEncoded = keyFramesEncoded;
    this.mediaSourceID = mediaSourceID;
    this.mediaType = mediaType;
    this.nackCount = nackCount;
    this.packetsSent = packetsSent;
    this.pliCount = pliCount;
    this.qpSum = qpSum;
    this.qualityLimitationReason = qualityLimitationReason;
    this.qualityLimitationResolutionChanges = qualityLimitationResolutionChanges;
    this.remoteID = remoteID;
    this.retransmittedBytesSent = retransmittedBytesSent;
    this.retransmittedPacketsSent = retransmittedPacketsSent;
    this.ssrc = ssrc;
    this.totalEncodedBytesTarget = totalEncodedBytesTarget;
    this.totalEncodeTime = totalEncodeTime;
    this.totalPacketSendDelay = totalPacketSendDelay;
    this.trackID = trackID;
    this.transportID = transportID;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return peerConnectionUUID;
    case 1: return mediaUnit;
    case 2: return bytesSent;
    case 3: return codecID;
    case 4: return encoderImplementation;
    case 5: return firCount;
    case 6: return framesEncoded;
    case 7: return headerBytesSent;
    case 8: return id;
    case 9: return isRemote;
    case 10: return keyFramesEncoded;
    case 11: return mediaSourceID;
    case 12: return mediaType;
    case 13: return nackCount;
    case 14: return packetsSent;
    case 15: return pliCount;
    case 16: return qpSum;
    case 17: return qualityLimitationReason;
    case 18: return qualityLimitationResolutionChanges;
    case 19: return remoteID;
    case 20: return retransmittedBytesSent;
    case 21: return retransmittedPacketsSent;
    case 22: return ssrc;
    case 23: return totalEncodedBytesTarget;
    case 24: return totalEncodeTime;
    case 25: return totalPacketSendDelay;
    case 26: return trackID;
    case 27: return transportID;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: peerConnectionUUID = value$ != null ? value$.toString() : null; break;
    case 1: mediaUnit = value$ != null ? value$.toString() : null; break;
    case 2: bytesSent = (java.lang.Long)value$; break;
    case 3: codecID = value$ != null ? value$.toString() : null; break;
    case 4: encoderImplementation = value$ != null ? value$.toString() : null; break;
    case 5: firCount = (java.lang.Integer)value$; break;
    case 6: framesEncoded = (java.lang.Integer)value$; break;
    case 7: headerBytesSent = (java.lang.Long)value$; break;
    case 8: id = value$ != null ? value$.toString() : null; break;
    case 9: isRemote = (java.lang.Boolean)value$; break;
    case 10: keyFramesEncoded = (java.lang.Long)value$; break;
    case 11: mediaSourceID = value$ != null ? value$.toString() : null; break;
    case 12: mediaType = (org.observertc.webrtc.common.reports.avro.MediaType)value$; break;
    case 13: nackCount = (java.lang.Integer)value$; break;
    case 14: packetsSent = (java.lang.Integer)value$; break;
    case 15: pliCount = (java.lang.Integer)value$; break;
    case 16: qpSum = (java.lang.Double)value$; break;
    case 17: qualityLimitationReason = (org.observertc.webrtc.common.reports.avro.RTCQualityLimitationReason)value$; break;
    case 18: qualityLimitationResolutionChanges = (java.lang.Long)value$; break;
    case 19: remoteID = value$ != null ? value$.toString() : null; break;
    case 20: retransmittedBytesSent = (java.lang.Long)value$; break;
    case 21: retransmittedPacketsSent = (java.lang.Integer)value$; break;
    case 22: ssrc = (java.lang.Long)value$; break;
    case 23: totalEncodedBytesTarget = (java.lang.Long)value$; break;
    case 24: totalEncodeTime = (java.lang.Double)value$; break;
    case 25: totalPacketSendDelay = (java.lang.Double)value$; break;
    case 26: trackID = value$ != null ? value$.toString() : null; break;
    case 27: transportID = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'peerConnectionUUID' field.
   * @return The value of the 'peerConnectionUUID' field.
   */
  public java.lang.String getPeerConnectionUUID() {
    return peerConnectionUUID;
  }



  /**
   * Gets the value of the 'mediaUnit' field.
   * @return The value of the 'mediaUnit' field.
   */
  public java.lang.String getMediaUnit() {
    return mediaUnit;
  }



  /**
   * Gets the value of the 'bytesSent' field.
   * @return The value of the 'bytesSent' field.
   */
  public java.lang.Long getBytesSent() {
    return bytesSent;
  }



  /**
   * Gets the value of the 'codecID' field.
   * @return The value of the 'codecID' field.
   */
  public java.lang.String getCodecID() {
    return codecID;
  }



  /**
   * Gets the value of the 'encoderImplementation' field.
   * @return The value of the 'encoderImplementation' field.
   */
  public java.lang.String getEncoderImplementation() {
    return encoderImplementation;
  }



  /**
   * Gets the value of the 'firCount' field.
   * @return The value of the 'firCount' field.
   */
  public java.lang.Integer getFirCount() {
    return firCount;
  }



  /**
   * Gets the value of the 'framesEncoded' field.
   * @return The value of the 'framesEncoded' field.
   */
  public java.lang.Integer getFramesEncoded() {
    return framesEncoded;
  }



  /**
   * Gets the value of the 'headerBytesSent' field.
   * @return The value of the 'headerBytesSent' field.
   */
  public java.lang.Long getHeaderBytesSent() {
    return headerBytesSent;
  }



  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }



  /**
   * Gets the value of the 'isRemote' field.
   * @return The value of the 'isRemote' field.
   */
  public java.lang.Boolean getIsRemote() {
    return isRemote;
  }



  /**
   * Gets the value of the 'keyFramesEncoded' field.
   * @return The value of the 'keyFramesEncoded' field.
   */
  public java.lang.Long getKeyFramesEncoded() {
    return keyFramesEncoded;
  }



  /**
   * Gets the value of the 'mediaSourceID' field.
   * @return The value of the 'mediaSourceID' field.
   */
  public java.lang.String getMediaSourceID() {
    return mediaSourceID;
  }



  /**
   * Gets the value of the 'mediaType' field.
   * @return The value of the 'mediaType' field.
   */
  public org.observertc.webrtc.common.reports.avro.MediaType getMediaType() {
    return mediaType;
  }



  /**
   * Gets the value of the 'nackCount' field.
   * @return The value of the 'nackCount' field.
   */
  public java.lang.Integer getNackCount() {
    return nackCount;
  }



  /**
   * Gets the value of the 'packetsSent' field.
   * @return The value of the 'packetsSent' field.
   */
  public java.lang.Integer getPacketsSent() {
    return packetsSent;
  }



  /**
   * Gets the value of the 'pliCount' field.
   * @return The value of the 'pliCount' field.
   */
  public java.lang.Integer getPliCount() {
    return pliCount;
  }



  /**
   * Gets the value of the 'qpSum' field.
   * @return The value of the 'qpSum' field.
   */
  public java.lang.Double getQpSum() {
    return qpSum;
  }



  /**
   * Gets the value of the 'qualityLimitationReason' field.
   * @return The value of the 'qualityLimitationReason' field.
   */
  public org.observertc.webrtc.common.reports.avro.RTCQualityLimitationReason getQualityLimitationReason() {
    return qualityLimitationReason;
  }



  /**
   * Gets the value of the 'qualityLimitationResolutionChanges' field.
   * @return The value of the 'qualityLimitationResolutionChanges' field.
   */
  public java.lang.Long getQualityLimitationResolutionChanges() {
    return qualityLimitationResolutionChanges;
  }



  /**
   * Gets the value of the 'remoteID' field.
   * @return The value of the 'remoteID' field.
   */
  public java.lang.String getRemoteID() {
    return remoteID;
  }



  /**
   * Gets the value of the 'retransmittedBytesSent' field.
   * @return The value of the 'retransmittedBytesSent' field.
   */
  public java.lang.Long getRetransmittedBytesSent() {
    return retransmittedBytesSent;
  }



  /**
   * Gets the value of the 'retransmittedPacketsSent' field.
   * @return The value of the 'retransmittedPacketsSent' field.
   */
  public java.lang.Integer getRetransmittedPacketsSent() {
    return retransmittedPacketsSent;
  }



  /**
   * Gets the value of the 'ssrc' field.
   * @return The value of the 'ssrc' field.
   */
  public long getSsrc() {
    return ssrc;
  }



  /**
   * Gets the value of the 'totalEncodedBytesTarget' field.
   * @return The value of the 'totalEncodedBytesTarget' field.
   */
  public java.lang.Long getTotalEncodedBytesTarget() {
    return totalEncodedBytesTarget;
  }



  /**
   * Gets the value of the 'totalEncodeTime' field.
   * @return The value of the 'totalEncodeTime' field.
   */
  public java.lang.Double getTotalEncodeTime() {
    return totalEncodeTime;
  }



  /**
   * Gets the value of the 'totalPacketSendDelay' field.
   * @return The value of the 'totalPacketSendDelay' field.
   */
  public java.lang.Double getTotalPacketSendDelay() {
    return totalPacketSendDelay;
  }



  /**
   * Gets the value of the 'trackID' field.
   * @return The value of the 'trackID' field.
   */
  public java.lang.String getTrackID() {
    return trackID;
  }



  /**
   * Gets the value of the 'transportID' field.
   * @return The value of the 'transportID' field.
   */
  public java.lang.String getTransportID() {
    return transportID;
  }



  /**
   * Creates a new OutboundRTP RecordBuilder.
   * @return A new OutboundRTP RecordBuilder
   */
  public static org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder newBuilder() {
    return new org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder();
  }

  /**
   * Creates a new OutboundRTP RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OutboundRTP RecordBuilder
   */
  public static org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder newBuilder(org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder other) {
    if (other == null) {
      return new org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder();
    } else {
      return new org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder(other);
    }
  }

  /**
   * Creates a new OutboundRTP RecordBuilder by copying an existing OutboundRTP instance.
   * @param other The existing instance to copy.
   * @return A new OutboundRTP RecordBuilder
   */
  public static org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder newBuilder(org.observertc.webrtc.common.reports.avro.OutboundRTP other) {
    if (other == null) {
      return new org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder();
    } else {
      return new org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder(other);
    }
  }

  /**
   * RecordBuilder for OutboundRTP instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OutboundRTP>
    implements org.apache.avro.data.RecordBuilder<OutboundRTP> {

    private java.lang.String peerConnectionUUID;
    private java.lang.String mediaUnit;
    private java.lang.Long bytesSent;
    private java.lang.String codecID;
    private java.lang.String encoderImplementation;
    private java.lang.Integer firCount;
    private java.lang.Integer framesEncoded;
    private java.lang.Long headerBytesSent;
    private java.lang.String id;
    private java.lang.Boolean isRemote;
    private java.lang.Long keyFramesEncoded;
    private java.lang.String mediaSourceID;
    private org.observertc.webrtc.common.reports.avro.MediaType mediaType;
    private java.lang.Integer nackCount;
    private java.lang.Integer packetsSent;
    private java.lang.Integer pliCount;
    private java.lang.Double qpSum;
    private org.observertc.webrtc.common.reports.avro.RTCQualityLimitationReason qualityLimitationReason;
    private java.lang.Long qualityLimitationResolutionChanges;
    private java.lang.String remoteID;
    private java.lang.Long retransmittedBytesSent;
    private java.lang.Integer retransmittedPacketsSent;
    private long ssrc;
    private java.lang.Long totalEncodedBytesTarget;
    private java.lang.Double totalEncodeTime;
    private java.lang.Double totalPacketSendDelay;
    private java.lang.String trackID;
    private java.lang.String transportID;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[0].schema(), other.peerConnectionUUID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mediaUnit)) {
        this.mediaUnit = data().deepCopy(fields()[1].schema(), other.mediaUnit);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[2].schema(), other.bytesSent);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.codecID)) {
        this.codecID = data().deepCopy(fields()[3].schema(), other.codecID);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.encoderImplementation)) {
        this.encoderImplementation = data().deepCopy(fields()[4].schema(), other.encoderImplementation);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.firCount)) {
        this.firCount = data().deepCopy(fields()[5].schema(), other.firCount);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.framesEncoded)) {
        this.framesEncoded = data().deepCopy(fields()[6].schema(), other.framesEncoded);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.headerBytesSent)) {
        this.headerBytesSent = data().deepCopy(fields()[7].schema(), other.headerBytesSent);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.id)) {
        this.id = data().deepCopy(fields()[8].schema(), other.id);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.isRemote)) {
        this.isRemote = data().deepCopy(fields()[9].schema(), other.isRemote);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.keyFramesEncoded)) {
        this.keyFramesEncoded = data().deepCopy(fields()[10].schema(), other.keyFramesEncoded);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.mediaSourceID)) {
        this.mediaSourceID = data().deepCopy(fields()[11].schema(), other.mediaSourceID);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[12].schema(), other.mediaType);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[13].schema(), other.nackCount);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[14].schema(), other.packetsSent);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.pliCount)) {
        this.pliCount = data().deepCopy(fields()[15].schema(), other.pliCount);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.qpSum)) {
        this.qpSum = data().deepCopy(fields()[16].schema(), other.qpSum);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.qualityLimitationReason)) {
        this.qualityLimitationReason = data().deepCopy(fields()[17].schema(), other.qualityLimitationReason);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.qualityLimitationResolutionChanges)) {
        this.qualityLimitationResolutionChanges = data().deepCopy(fields()[18].schema(), other.qualityLimitationResolutionChanges);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.remoteID)) {
        this.remoteID = data().deepCopy(fields()[19].schema(), other.remoteID);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.retransmittedBytesSent)) {
        this.retransmittedBytesSent = data().deepCopy(fields()[20].schema(), other.retransmittedBytesSent);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.retransmittedPacketsSent)) {
        this.retransmittedPacketsSent = data().deepCopy(fields()[21].schema(), other.retransmittedPacketsSent);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[22].schema(), other.ssrc);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.totalEncodedBytesTarget)) {
        this.totalEncodedBytesTarget = data().deepCopy(fields()[23].schema(), other.totalEncodedBytesTarget);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.totalEncodeTime)) {
        this.totalEncodeTime = data().deepCopy(fields()[24].schema(), other.totalEncodeTime);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.totalPacketSendDelay)) {
        this.totalPacketSendDelay = data().deepCopy(fields()[25].schema(), other.totalPacketSendDelay);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.trackID)) {
        this.trackID = data().deepCopy(fields()[26].schema(), other.trackID);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.transportID)) {
        this.transportID = data().deepCopy(fields()[27].schema(), other.transportID);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
    }

    /**
     * Creates a Builder by copying an existing OutboundRTP instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.webrtc.common.reports.avro.OutboundRTP other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[0].schema(), other.peerConnectionUUID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnit)) {
        this.mediaUnit = data().deepCopy(fields()[1].schema(), other.mediaUnit);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[2].schema(), other.bytesSent);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.codecID)) {
        this.codecID = data().deepCopy(fields()[3].schema(), other.codecID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.encoderImplementation)) {
        this.encoderImplementation = data().deepCopy(fields()[4].schema(), other.encoderImplementation);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.firCount)) {
        this.firCount = data().deepCopy(fields()[5].schema(), other.firCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.framesEncoded)) {
        this.framesEncoded = data().deepCopy(fields()[6].schema(), other.framesEncoded);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.headerBytesSent)) {
        this.headerBytesSent = data().deepCopy(fields()[7].schema(), other.headerBytesSent);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.id)) {
        this.id = data().deepCopy(fields()[8].schema(), other.id);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.isRemote)) {
        this.isRemote = data().deepCopy(fields()[9].schema(), other.isRemote);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.keyFramesEncoded)) {
        this.keyFramesEncoded = data().deepCopy(fields()[10].schema(), other.keyFramesEncoded);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.mediaSourceID)) {
        this.mediaSourceID = data().deepCopy(fields()[11].schema(), other.mediaSourceID);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[12].schema(), other.mediaType);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[13].schema(), other.nackCount);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[14].schema(), other.packetsSent);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.pliCount)) {
        this.pliCount = data().deepCopy(fields()[15].schema(), other.pliCount);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.qpSum)) {
        this.qpSum = data().deepCopy(fields()[16].schema(), other.qpSum);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.qualityLimitationReason)) {
        this.qualityLimitationReason = data().deepCopy(fields()[17].schema(), other.qualityLimitationReason);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.qualityLimitationResolutionChanges)) {
        this.qualityLimitationResolutionChanges = data().deepCopy(fields()[18].schema(), other.qualityLimitationResolutionChanges);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.remoteID)) {
        this.remoteID = data().deepCopy(fields()[19].schema(), other.remoteID);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.retransmittedBytesSent)) {
        this.retransmittedBytesSent = data().deepCopy(fields()[20].schema(), other.retransmittedBytesSent);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.retransmittedPacketsSent)) {
        this.retransmittedPacketsSent = data().deepCopy(fields()[21].schema(), other.retransmittedPacketsSent);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[22].schema(), other.ssrc);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.totalEncodedBytesTarget)) {
        this.totalEncodedBytesTarget = data().deepCopy(fields()[23].schema(), other.totalEncodedBytesTarget);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.totalEncodeTime)) {
        this.totalEncodeTime = data().deepCopy(fields()[24].schema(), other.totalEncodeTime);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.totalPacketSendDelay)) {
        this.totalPacketSendDelay = data().deepCopy(fields()[25].schema(), other.totalPacketSendDelay);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.trackID)) {
        this.trackID = data().deepCopy(fields()[26].schema(), other.trackID);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.transportID)) {
        this.transportID = data().deepCopy(fields()[27].schema(), other.transportID);
        fieldSetFlags()[27] = true;
      }
    }

    /**
      * Gets the value of the 'peerConnectionUUID' field.
      * @return The value.
      */
    public java.lang.String getPeerConnectionUUID() {
      return peerConnectionUUID;
    }


    /**
      * Sets the value of the 'peerConnectionUUID' field.
      * @param value The value of 'peerConnectionUUID'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setPeerConnectionUUID(java.lang.String value) {
      validate(fields()[0], value);
      this.peerConnectionUUID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionUUID' field has been set.
      * @return True if the 'peerConnectionUUID' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionUUID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'peerConnectionUUID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearPeerConnectionUUID() {
      peerConnectionUUID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnit' field.
      * @return The value.
      */
    public java.lang.String getMediaUnit() {
      return mediaUnit;
    }


    /**
      * Sets the value of the 'mediaUnit' field.
      * @param value The value of 'mediaUnit'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setMediaUnit(java.lang.String value) {
      validate(fields()[1], value);
      this.mediaUnit = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnit' field has been set.
      * @return True if the 'mediaUnit' field has been set, false otherwise.
      */
    public boolean hasMediaUnit() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mediaUnit' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearMediaUnit() {
      mediaUnit = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesSent' field.
      * @return The value.
      */
    public java.lang.Long getBytesSent() {
      return bytesSent;
    }


    /**
      * Sets the value of the 'bytesSent' field.
      * @param value The value of 'bytesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setBytesSent(java.lang.Long value) {
      validate(fields()[2], value);
      this.bytesSent = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesSent' field has been set.
      * @return True if the 'bytesSent' field has been set, false otherwise.
      */
    public boolean hasBytesSent() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bytesSent' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearBytesSent() {
      bytesSent = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'codecID' field.
      * @return The value.
      */
    public java.lang.String getCodecID() {
      return codecID;
    }


    /**
      * Sets the value of the 'codecID' field.
      * @param value The value of 'codecID'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setCodecID(java.lang.String value) {
      validate(fields()[3], value);
      this.codecID = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'codecID' field has been set.
      * @return True if the 'codecID' field has been set, false otherwise.
      */
    public boolean hasCodecID() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'codecID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearCodecID() {
      codecID = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'encoderImplementation' field.
      * @return The value.
      */
    public java.lang.String getEncoderImplementation() {
      return encoderImplementation;
    }


    /**
      * Sets the value of the 'encoderImplementation' field.
      * @param value The value of 'encoderImplementation'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setEncoderImplementation(java.lang.String value) {
      validate(fields()[4], value);
      this.encoderImplementation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'encoderImplementation' field has been set.
      * @return True if the 'encoderImplementation' field has been set, false otherwise.
      */
    public boolean hasEncoderImplementation() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'encoderImplementation' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearEncoderImplementation() {
      encoderImplementation = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'firCount' field.
      * @return The value.
      */
    public java.lang.Integer getFirCount() {
      return firCount;
    }


    /**
      * Sets the value of the 'firCount' field.
      * @param value The value of 'firCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setFirCount(java.lang.Integer value) {
      validate(fields()[5], value);
      this.firCount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'firCount' field has been set.
      * @return True if the 'firCount' field has been set, false otherwise.
      */
    public boolean hasFirCount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'firCount' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearFirCount() {
      firCount = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesEncoded' field.
      * @return The value.
      */
    public java.lang.Integer getFramesEncoded() {
      return framesEncoded;
    }


    /**
      * Sets the value of the 'framesEncoded' field.
      * @param value The value of 'framesEncoded'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setFramesEncoded(java.lang.Integer value) {
      validate(fields()[6], value);
      this.framesEncoded = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'framesEncoded' field has been set.
      * @return True if the 'framesEncoded' field has been set, false otherwise.
      */
    public boolean hasFramesEncoded() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'framesEncoded' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearFramesEncoded() {
      framesEncoded = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'headerBytesSent' field.
      * @return The value.
      */
    public java.lang.Long getHeaderBytesSent() {
      return headerBytesSent;
    }


    /**
      * Sets the value of the 'headerBytesSent' field.
      * @param value The value of 'headerBytesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setHeaderBytesSent(java.lang.Long value) {
      validate(fields()[7], value);
      this.headerBytesSent = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'headerBytesSent' field has been set.
      * @return True if the 'headerBytesSent' field has been set, false otherwise.
      */
    public boolean hasHeaderBytesSent() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'headerBytesSent' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearHeaderBytesSent() {
      headerBytesSent = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setId(java.lang.String value) {
      validate(fields()[8], value);
      this.id = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearId() {
      id = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'isRemote' field.
      * @return The value.
      */
    public java.lang.Boolean getIsRemote() {
      return isRemote;
    }


    /**
      * Sets the value of the 'isRemote' field.
      * @param value The value of 'isRemote'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setIsRemote(java.lang.Boolean value) {
      validate(fields()[9], value);
      this.isRemote = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'isRemote' field has been set.
      * @return True if the 'isRemote' field has been set, false otherwise.
      */
    public boolean hasIsRemote() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'isRemote' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearIsRemote() {
      isRemote = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyFramesEncoded' field.
      * @return The value.
      */
    public java.lang.Long getKeyFramesEncoded() {
      return keyFramesEncoded;
    }


    /**
      * Sets the value of the 'keyFramesEncoded' field.
      * @param value The value of 'keyFramesEncoded'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setKeyFramesEncoded(java.lang.Long value) {
      validate(fields()[10], value);
      this.keyFramesEncoded = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'keyFramesEncoded' field has been set.
      * @return True if the 'keyFramesEncoded' field has been set, false otherwise.
      */
    public boolean hasKeyFramesEncoded() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'keyFramesEncoded' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearKeyFramesEncoded() {
      keyFramesEncoded = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaSourceID' field.
      * @return The value.
      */
    public java.lang.String getMediaSourceID() {
      return mediaSourceID;
    }


    /**
      * Sets the value of the 'mediaSourceID' field.
      * @param value The value of 'mediaSourceID'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setMediaSourceID(java.lang.String value) {
      validate(fields()[11], value);
      this.mediaSourceID = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaSourceID' field has been set.
      * @return True if the 'mediaSourceID' field has been set, false otherwise.
      */
    public boolean hasMediaSourceID() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'mediaSourceID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearMediaSourceID() {
      mediaSourceID = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaType' field.
      * @return The value.
      */
    public org.observertc.webrtc.common.reports.avro.MediaType getMediaType() {
      return mediaType;
    }


    /**
      * Sets the value of the 'mediaType' field.
      * @param value The value of 'mediaType'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setMediaType(org.observertc.webrtc.common.reports.avro.MediaType value) {
      validate(fields()[12], value);
      this.mediaType = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaType' field has been set.
      * @return True if the 'mediaType' field has been set, false otherwise.
      */
    public boolean hasMediaType() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'mediaType' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearMediaType() {
      mediaType = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'nackCount' field.
      * @return The value.
      */
    public java.lang.Integer getNackCount() {
      return nackCount;
    }


    /**
      * Sets the value of the 'nackCount' field.
      * @param value The value of 'nackCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setNackCount(java.lang.Integer value) {
      validate(fields()[13], value);
      this.nackCount = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'nackCount' field has been set.
      * @return True if the 'nackCount' field has been set, false otherwise.
      */
    public boolean hasNackCount() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'nackCount' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearNackCount() {
      nackCount = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsSent' field.
      * @return The value.
      */
    public java.lang.Integer getPacketsSent() {
      return packetsSent;
    }


    /**
      * Sets the value of the 'packetsSent' field.
      * @param value The value of 'packetsSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setPacketsSent(java.lang.Integer value) {
      validate(fields()[14], value);
      this.packetsSent = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsSent' field has been set.
      * @return True if the 'packetsSent' field has been set, false otherwise.
      */
    public boolean hasPacketsSent() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'packetsSent' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearPacketsSent() {
      packetsSent = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'pliCount' field.
      * @return The value.
      */
    public java.lang.Integer getPliCount() {
      return pliCount;
    }


    /**
      * Sets the value of the 'pliCount' field.
      * @param value The value of 'pliCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setPliCount(java.lang.Integer value) {
      validate(fields()[15], value);
      this.pliCount = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'pliCount' field has been set.
      * @return True if the 'pliCount' field has been set, false otherwise.
      */
    public boolean hasPliCount() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'pliCount' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearPliCount() {
      pliCount = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'qpSum' field.
      * @return The value.
      */
    public java.lang.Double getQpSum() {
      return qpSum;
    }


    /**
      * Sets the value of the 'qpSum' field.
      * @param value The value of 'qpSum'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setQpSum(java.lang.Double value) {
      validate(fields()[16], value);
      this.qpSum = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'qpSum' field has been set.
      * @return True if the 'qpSum' field has been set, false otherwise.
      */
    public boolean hasQpSum() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'qpSum' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearQpSum() {
      qpSum = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityLimitationReason' field.
      * @return The value.
      */
    public org.observertc.webrtc.common.reports.avro.RTCQualityLimitationReason getQualityLimitationReason() {
      return qualityLimitationReason;
    }


    /**
      * Sets the value of the 'qualityLimitationReason' field.
      * @param value The value of 'qualityLimitationReason'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setQualityLimitationReason(org.observertc.webrtc.common.reports.avro.RTCQualityLimitationReason value) {
      validate(fields()[17], value);
      this.qualityLimitationReason = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityLimitationReason' field has been set.
      * @return True if the 'qualityLimitationReason' field has been set, false otherwise.
      */
    public boolean hasQualityLimitationReason() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'qualityLimitationReason' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearQualityLimitationReason() {
      qualityLimitationReason = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityLimitationResolutionChanges' field.
      * @return The value.
      */
    public java.lang.Long getQualityLimitationResolutionChanges() {
      return qualityLimitationResolutionChanges;
    }


    /**
      * Sets the value of the 'qualityLimitationResolutionChanges' field.
      * @param value The value of 'qualityLimitationResolutionChanges'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setQualityLimitationResolutionChanges(java.lang.Long value) {
      validate(fields()[18], value);
      this.qualityLimitationResolutionChanges = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityLimitationResolutionChanges' field has been set.
      * @return True if the 'qualityLimitationResolutionChanges' field has been set, false otherwise.
      */
    public boolean hasQualityLimitationResolutionChanges() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'qualityLimitationResolutionChanges' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearQualityLimitationResolutionChanges() {
      qualityLimitationResolutionChanges = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteID' field.
      * @return The value.
      */
    public java.lang.String getRemoteID() {
      return remoteID;
    }


    /**
      * Sets the value of the 'remoteID' field.
      * @param value The value of 'remoteID'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setRemoteID(java.lang.String value) {
      validate(fields()[19], value);
      this.remoteID = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteID' field has been set.
      * @return True if the 'remoteID' field has been set, false otherwise.
      */
    public boolean hasRemoteID() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'remoteID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearRemoteID() {
      remoteID = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'retransmittedBytesSent' field.
      * @return The value.
      */
    public java.lang.Long getRetransmittedBytesSent() {
      return retransmittedBytesSent;
    }


    /**
      * Sets the value of the 'retransmittedBytesSent' field.
      * @param value The value of 'retransmittedBytesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setRetransmittedBytesSent(java.lang.Long value) {
      validate(fields()[20], value);
      this.retransmittedBytesSent = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'retransmittedBytesSent' field has been set.
      * @return True if the 'retransmittedBytesSent' field has been set, false otherwise.
      */
    public boolean hasRetransmittedBytesSent() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'retransmittedBytesSent' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearRetransmittedBytesSent() {
      retransmittedBytesSent = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'retransmittedPacketsSent' field.
      * @return The value.
      */
    public java.lang.Integer getRetransmittedPacketsSent() {
      return retransmittedPacketsSent;
    }


    /**
      * Sets the value of the 'retransmittedPacketsSent' field.
      * @param value The value of 'retransmittedPacketsSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setRetransmittedPacketsSent(java.lang.Integer value) {
      validate(fields()[21], value);
      this.retransmittedPacketsSent = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'retransmittedPacketsSent' field has been set.
      * @return True if the 'retransmittedPacketsSent' field has been set, false otherwise.
      */
    public boolean hasRetransmittedPacketsSent() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'retransmittedPacketsSent' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearRetransmittedPacketsSent() {
      retransmittedPacketsSent = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssrc' field.
      * @return The value.
      */
    public long getSsrc() {
      return ssrc;
    }


    /**
      * Sets the value of the 'ssrc' field.
      * @param value The value of 'ssrc'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setSsrc(long value) {
      validate(fields()[22], value);
      this.ssrc = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'ssrc' field has been set.
      * @return True if the 'ssrc' field has been set, false otherwise.
      */
    public boolean hasSsrc() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'ssrc' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearSsrc() {
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalEncodedBytesTarget' field.
      * @return The value.
      */
    public java.lang.Long getTotalEncodedBytesTarget() {
      return totalEncodedBytesTarget;
    }


    /**
      * Sets the value of the 'totalEncodedBytesTarget' field.
      * @param value The value of 'totalEncodedBytesTarget'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setTotalEncodedBytesTarget(java.lang.Long value) {
      validate(fields()[23], value);
      this.totalEncodedBytesTarget = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'totalEncodedBytesTarget' field has been set.
      * @return True if the 'totalEncodedBytesTarget' field has been set, false otherwise.
      */
    public boolean hasTotalEncodedBytesTarget() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'totalEncodedBytesTarget' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearTotalEncodedBytesTarget() {
      totalEncodedBytesTarget = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalEncodeTime' field.
      * @return The value.
      */
    public java.lang.Double getTotalEncodeTime() {
      return totalEncodeTime;
    }


    /**
      * Sets the value of the 'totalEncodeTime' field.
      * @param value The value of 'totalEncodeTime'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setTotalEncodeTime(java.lang.Double value) {
      validate(fields()[24], value);
      this.totalEncodeTime = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'totalEncodeTime' field has been set.
      * @return True if the 'totalEncodeTime' field has been set, false otherwise.
      */
    public boolean hasTotalEncodeTime() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'totalEncodeTime' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearTotalEncodeTime() {
      totalEncodeTime = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalPacketSendDelay' field.
      * @return The value.
      */
    public java.lang.Double getTotalPacketSendDelay() {
      return totalPacketSendDelay;
    }


    /**
      * Sets the value of the 'totalPacketSendDelay' field.
      * @param value The value of 'totalPacketSendDelay'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setTotalPacketSendDelay(java.lang.Double value) {
      validate(fields()[25], value);
      this.totalPacketSendDelay = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'totalPacketSendDelay' field has been set.
      * @return True if the 'totalPacketSendDelay' field has been set, false otherwise.
      */
    public boolean hasTotalPacketSendDelay() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'totalPacketSendDelay' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearTotalPacketSendDelay() {
      totalPacketSendDelay = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'trackID' field.
      * @return The value.
      */
    public java.lang.String getTrackID() {
      return trackID;
    }


    /**
      * Sets the value of the 'trackID' field.
      * @param value The value of 'trackID'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setTrackID(java.lang.String value) {
      validate(fields()[26], value);
      this.trackID = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'trackID' field has been set.
      * @return True if the 'trackID' field has been set, false otherwise.
      */
    public boolean hasTrackID() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'trackID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearTrackID() {
      trackID = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportID' field.
      * @return The value.
      */
    public java.lang.String getTransportID() {
      return transportID;
    }


    /**
      * Sets the value of the 'transportID' field.
      * @param value The value of 'transportID'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder setTransportID(java.lang.String value) {
      validate(fields()[27], value);
      this.transportID = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'transportID' field has been set.
      * @return True if the 'transportID' field has been set, false otherwise.
      */
    public boolean hasTransportID() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'transportID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.OutboundRTP.Builder clearTransportID() {
      transportID = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OutboundRTP build() {
      try {
        OutboundRTP record = new OutboundRTP();
        record.peerConnectionUUID = fieldSetFlags()[0] ? this.peerConnectionUUID : (java.lang.String) defaultValue(fields()[0]);
        record.mediaUnit = fieldSetFlags()[1] ? this.mediaUnit : (java.lang.String) defaultValue(fields()[1]);
        record.bytesSent = fieldSetFlags()[2] ? this.bytesSent : (java.lang.Long) defaultValue(fields()[2]);
        record.codecID = fieldSetFlags()[3] ? this.codecID : (java.lang.String) defaultValue(fields()[3]);
        record.encoderImplementation = fieldSetFlags()[4] ? this.encoderImplementation : (java.lang.String) defaultValue(fields()[4]);
        record.firCount = fieldSetFlags()[5] ? this.firCount : (java.lang.Integer) defaultValue(fields()[5]);
        record.framesEncoded = fieldSetFlags()[6] ? this.framesEncoded : (java.lang.Integer) defaultValue(fields()[6]);
        record.headerBytesSent = fieldSetFlags()[7] ? this.headerBytesSent : (java.lang.Long) defaultValue(fields()[7]);
        record.id = fieldSetFlags()[8] ? this.id : (java.lang.String) defaultValue(fields()[8]);
        record.isRemote = fieldSetFlags()[9] ? this.isRemote : (java.lang.Boolean) defaultValue(fields()[9]);
        record.keyFramesEncoded = fieldSetFlags()[10] ? this.keyFramesEncoded : (java.lang.Long) defaultValue(fields()[10]);
        record.mediaSourceID = fieldSetFlags()[11] ? this.mediaSourceID : (java.lang.String) defaultValue(fields()[11]);
        record.mediaType = fieldSetFlags()[12] ? this.mediaType : (org.observertc.webrtc.common.reports.avro.MediaType) defaultValue(fields()[12]);
        record.nackCount = fieldSetFlags()[13] ? this.nackCount : (java.lang.Integer) defaultValue(fields()[13]);
        record.packetsSent = fieldSetFlags()[14] ? this.packetsSent : (java.lang.Integer) defaultValue(fields()[14]);
        record.pliCount = fieldSetFlags()[15] ? this.pliCount : (java.lang.Integer) defaultValue(fields()[15]);
        record.qpSum = fieldSetFlags()[16] ? this.qpSum : (java.lang.Double) defaultValue(fields()[16]);
        record.qualityLimitationReason = fieldSetFlags()[17] ? this.qualityLimitationReason : (org.observertc.webrtc.common.reports.avro.RTCQualityLimitationReason) defaultValue(fields()[17]);
        record.qualityLimitationResolutionChanges = fieldSetFlags()[18] ? this.qualityLimitationResolutionChanges : (java.lang.Long) defaultValue(fields()[18]);
        record.remoteID = fieldSetFlags()[19] ? this.remoteID : (java.lang.String) defaultValue(fields()[19]);
        record.retransmittedBytesSent = fieldSetFlags()[20] ? this.retransmittedBytesSent : (java.lang.Long) defaultValue(fields()[20]);
        record.retransmittedPacketsSent = fieldSetFlags()[21] ? this.retransmittedPacketsSent : (java.lang.Integer) defaultValue(fields()[21]);
        record.ssrc = fieldSetFlags()[22] ? this.ssrc : (java.lang.Long) defaultValue(fields()[22]);
        record.totalEncodedBytesTarget = fieldSetFlags()[23] ? this.totalEncodedBytesTarget : (java.lang.Long) defaultValue(fields()[23]);
        record.totalEncodeTime = fieldSetFlags()[24] ? this.totalEncodeTime : (java.lang.Double) defaultValue(fields()[24]);
        record.totalPacketSendDelay = fieldSetFlags()[25] ? this.totalPacketSendDelay : (java.lang.Double) defaultValue(fields()[25]);
        record.trackID = fieldSetFlags()[26] ? this.trackID : (java.lang.String) defaultValue(fields()[26]);
        record.transportID = fieldSetFlags()[27] ? this.transportID : (java.lang.String) defaultValue(fields()[27]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OutboundRTP>
    WRITER$ = (org.apache.avro.io.DatumWriter<OutboundRTP>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OutboundRTP>
    READER$ = (org.apache.avro.io.DatumReader<OutboundRTP>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.peerConnectionUUID);

    out.writeString(this.mediaUnit);

    if (this.bytesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.bytesSent);
    }

    if (this.codecID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.codecID);
    }

    if (this.encoderImplementation == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.encoderImplementation);
    }

    if (this.firCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.firCount);
    }

    if (this.framesEncoded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.framesEncoded);
    }

    if (this.headerBytesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.headerBytesSent);
    }

    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.isRemote == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.isRemote);
    }

    if (this.keyFramesEncoded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.keyFramesEncoded);
    }

    if (this.mediaSourceID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mediaSourceID);
    }

    out.writeEnum(this.mediaType.ordinal());

    if (this.nackCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.nackCount);
    }

    if (this.packetsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsSent);
    }

    if (this.pliCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.pliCount);
    }

    if (this.qpSum == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.qpSum);
    }

    out.writeEnum(this.qualityLimitationReason.ordinal());

    if (this.qualityLimitationResolutionChanges == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.qualityLimitationResolutionChanges);
    }

    if (this.remoteID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.remoteID);
    }

    if (this.retransmittedBytesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.retransmittedBytesSent);
    }

    if (this.retransmittedPacketsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.retransmittedPacketsSent);
    }

    out.writeLong(this.ssrc);

    if (this.totalEncodedBytesTarget == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.totalEncodedBytesTarget);
    }

    if (this.totalEncodeTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.totalEncodeTime);
    }

    if (this.totalPacketSendDelay == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.totalPacketSendDelay);
    }

    if (this.trackID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.trackID);
    }

    if (this.transportID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.transportID);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.peerConnectionUUID = in.readString();

      this.mediaUnit = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.bytesSent = null;
      } else {
        this.bytesSent = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.codecID = null;
      } else {
        this.codecID = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.encoderImplementation = null;
      } else {
        this.encoderImplementation = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.firCount = null;
      } else {
        this.firCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesEncoded = null;
      } else {
        this.framesEncoded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.headerBytesSent = null;
      } else {
        this.headerBytesSent = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.isRemote = null;
      } else {
        this.isRemote = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.keyFramesEncoded = null;
      } else {
        this.keyFramesEncoded = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mediaSourceID = null;
      } else {
        this.mediaSourceID = in.readString();
      }

      this.mediaType = org.observertc.webrtc.common.reports.avro.MediaType.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.nackCount = null;
      } else {
        this.nackCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsSent = null;
      } else {
        this.packetsSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.pliCount = null;
      } else {
        this.pliCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qpSum = null;
      } else {
        this.qpSum = in.readDouble();
      }

      this.qualityLimitationReason = org.observertc.webrtc.common.reports.avro.RTCQualityLimitationReason.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.qualityLimitationResolutionChanges = null;
      } else {
        this.qualityLimitationResolutionChanges = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.remoteID = null;
      } else {
        this.remoteID = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.retransmittedBytesSent = null;
      } else {
        this.retransmittedBytesSent = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.retransmittedPacketsSent = null;
      } else {
        this.retransmittedPacketsSent = in.readInt();
      }

      this.ssrc = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalEncodedBytesTarget = null;
      } else {
        this.totalEncodedBytesTarget = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalEncodeTime = null;
      } else {
        this.totalEncodeTime = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalPacketSendDelay = null;
      } else {
        this.totalPacketSendDelay = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.trackID = null;
      } else {
        this.trackID = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.transportID = null;
      } else {
        this.transportID = in.readString();
      }

    } else {
      for (int i = 0; i < 28; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.peerConnectionUUID = in.readString();
          break;

        case 1:
          this.mediaUnit = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bytesSent = null;
          } else {
            this.bytesSent = in.readLong();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.codecID = null;
          } else {
            this.codecID = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.encoderImplementation = null;
          } else {
            this.encoderImplementation = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.firCount = null;
          } else {
            this.firCount = in.readInt();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesEncoded = null;
          } else {
            this.framesEncoded = in.readInt();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.headerBytesSent = null;
          } else {
            this.headerBytesSent = in.readLong();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.isRemote = null;
          } else {
            this.isRemote = in.readBoolean();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.keyFramesEncoded = null;
          } else {
            this.keyFramesEncoded = in.readLong();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mediaSourceID = null;
          } else {
            this.mediaSourceID = in.readString();
          }
          break;

        case 12:
          this.mediaType = org.observertc.webrtc.common.reports.avro.MediaType.values()[in.readEnum()];
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nackCount = null;
          } else {
            this.nackCount = in.readInt();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsSent = null;
          } else {
            this.packetsSent = in.readInt();
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.pliCount = null;
          } else {
            this.pliCount = in.readInt();
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qpSum = null;
          } else {
            this.qpSum = in.readDouble();
          }
          break;

        case 17:
          this.qualityLimitationReason = org.observertc.webrtc.common.reports.avro.RTCQualityLimitationReason.values()[in.readEnum()];
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qualityLimitationResolutionChanges = null;
          } else {
            this.qualityLimitationResolutionChanges = in.readLong();
          }
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.remoteID = null;
          } else {
            this.remoteID = in.readString();
          }
          break;

        case 20:
          if (in.readIndex() != 1) {
            in.readNull();
            this.retransmittedBytesSent = null;
          } else {
            this.retransmittedBytesSent = in.readLong();
          }
          break;

        case 21:
          if (in.readIndex() != 1) {
            in.readNull();
            this.retransmittedPacketsSent = null;
          } else {
            this.retransmittedPacketsSent = in.readInt();
          }
          break;

        case 22:
          this.ssrc = in.readLong();
          break;

        case 23:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalEncodedBytesTarget = null;
          } else {
            this.totalEncodedBytesTarget = in.readLong();
          }
          break;

        case 24:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalEncodeTime = null;
          } else {
            this.totalEncodeTime = in.readDouble();
          }
          break;

        case 25:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalPacketSendDelay = null;
          } else {
            this.totalPacketSendDelay = in.readDouble();
          }
          break;

        case 26:
          if (in.readIndex() != 1) {
            in.readNull();
            this.trackID = null;
          } else {
            this.trackID = in.readString();
          }
          break;

        case 27:
          if (in.readIndex() != 1) {
            in.readNull();
            this.transportID = null;
          } else {
            this.transportID = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










