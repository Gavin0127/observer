/*
 * Copyright  2020 Balazs Kreith
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.common.reports.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MediaSource extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2761472915927121547L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MediaSource\",\"namespace\":\"org.observertc.webrtc.common.reports.avro\",\"fields\":[{\"name\":\"peerConnectionUUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mediaUnit\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"audioLevel\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"framesPerSecond\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"height\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mediaType\",\"type\":{\"type\":\"enum\",\"name\":\"MediaType\",\"symbols\":[\"AUDIO\",\"VIDEO\",\"UNKNOWN\"]},\"default\":\"UNKNOWN\"},{\"name\":\"totalAudioEnergy\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"totalSamplesDuration\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"trackIdentifier\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"width\",\"type\":[\"null\",\"double\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MediaSource> ENCODER =
      new BinaryMessageEncoder<MediaSource>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MediaSource> DECODER =
      new BinaryMessageDecoder<MediaSource>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MediaSource> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MediaSource> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MediaSource> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MediaSource>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MediaSource to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MediaSource from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MediaSource instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MediaSource fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String peerConnectionUUID;
   private java.lang.String mediaUnit;
   private java.lang.Float audioLevel;
   private java.lang.Double framesPerSecond;
   private java.lang.Double height;
   private java.lang.String id;
   private org.observertc.webrtc.common.reports.avro.MediaType mediaType;
   private java.lang.Float totalAudioEnergy;
   private java.lang.Double totalSamplesDuration;
   private java.lang.String trackIdentifier;
   private java.lang.Double width;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MediaSource() {}

  /**
   * All-args constructor.
   * @param peerConnectionUUID The new value for peerConnectionUUID
   * @param mediaUnit The new value for mediaUnit
   * @param audioLevel The new value for audioLevel
   * @param framesPerSecond The new value for framesPerSecond
   * @param height The new value for height
   * @param id The new value for id
   * @param mediaType The new value for mediaType
   * @param totalAudioEnergy The new value for totalAudioEnergy
   * @param totalSamplesDuration The new value for totalSamplesDuration
   * @param trackIdentifier The new value for trackIdentifier
   * @param width The new value for width
   */
  public MediaSource(java.lang.String peerConnectionUUID, java.lang.String mediaUnit, java.lang.Float audioLevel, java.lang.Double framesPerSecond, java.lang.Double height, java.lang.String id, org.observertc.webrtc.common.reports.avro.MediaType mediaType, java.lang.Float totalAudioEnergy, java.lang.Double totalSamplesDuration, java.lang.String trackIdentifier, java.lang.Double width) {
    this.peerConnectionUUID = peerConnectionUUID;
    this.mediaUnit = mediaUnit;
    this.audioLevel = audioLevel;
    this.framesPerSecond = framesPerSecond;
    this.height = height;
    this.id = id;
    this.mediaType = mediaType;
    this.totalAudioEnergy = totalAudioEnergy;
    this.totalSamplesDuration = totalSamplesDuration;
    this.trackIdentifier = trackIdentifier;
    this.width = width;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return peerConnectionUUID;
    case 1: return mediaUnit;
    case 2: return audioLevel;
    case 3: return framesPerSecond;
    case 4: return height;
    case 5: return id;
    case 6: return mediaType;
    case 7: return totalAudioEnergy;
    case 8: return totalSamplesDuration;
    case 9: return trackIdentifier;
    case 10: return width;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: peerConnectionUUID = value$ != null ? value$.toString() : null; break;
    case 1: mediaUnit = value$ != null ? value$.toString() : null; break;
    case 2: audioLevel = (java.lang.Float)value$; break;
    case 3: framesPerSecond = (java.lang.Double)value$; break;
    case 4: height = (java.lang.Double)value$; break;
    case 5: id = value$ != null ? value$.toString() : null; break;
    case 6: mediaType = (org.observertc.webrtc.common.reports.avro.MediaType)value$; break;
    case 7: totalAudioEnergy = (java.lang.Float)value$; break;
    case 8: totalSamplesDuration = (java.lang.Double)value$; break;
    case 9: trackIdentifier = value$ != null ? value$.toString() : null; break;
    case 10: width = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'peerConnectionUUID' field.
   * @return The value of the 'peerConnectionUUID' field.
   */
  public java.lang.String getPeerConnectionUUID() {
    return peerConnectionUUID;
  }



  /**
   * Gets the value of the 'mediaUnit' field.
   * @return The value of the 'mediaUnit' field.
   */
  public java.lang.String getMediaUnit() {
    return mediaUnit;
  }



  /**
   * Gets the value of the 'audioLevel' field.
   * @return The value of the 'audioLevel' field.
   */
  public java.lang.Float getAudioLevel() {
    return audioLevel;
  }



  /**
   * Gets the value of the 'framesPerSecond' field.
   * @return The value of the 'framesPerSecond' field.
   */
  public java.lang.Double getFramesPerSecond() {
    return framesPerSecond;
  }



  /**
   * Gets the value of the 'height' field.
   * @return The value of the 'height' field.
   */
  public java.lang.Double getHeight() {
    return height;
  }



  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }



  /**
   * Gets the value of the 'mediaType' field.
   * @return The value of the 'mediaType' field.
   */
  public org.observertc.webrtc.common.reports.avro.MediaType getMediaType() {
    return mediaType;
  }



  /**
   * Gets the value of the 'totalAudioEnergy' field.
   * @return The value of the 'totalAudioEnergy' field.
   */
  public java.lang.Float getTotalAudioEnergy() {
    return totalAudioEnergy;
  }



  /**
   * Gets the value of the 'totalSamplesDuration' field.
   * @return The value of the 'totalSamplesDuration' field.
   */
  public java.lang.Double getTotalSamplesDuration() {
    return totalSamplesDuration;
  }



  /**
   * Gets the value of the 'trackIdentifier' field.
   * @return The value of the 'trackIdentifier' field.
   */
  public java.lang.String getTrackIdentifier() {
    return trackIdentifier;
  }



  /**
   * Gets the value of the 'width' field.
   * @return The value of the 'width' field.
   */
  public java.lang.Double getWidth() {
    return width;
  }



  /**
   * Creates a new MediaSource RecordBuilder.
   * @return A new MediaSource RecordBuilder
   */
  public static org.observertc.webrtc.common.reports.avro.MediaSource.Builder newBuilder() {
    return new org.observertc.webrtc.common.reports.avro.MediaSource.Builder();
  }

  /**
   * Creates a new MediaSource RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MediaSource RecordBuilder
   */
  public static org.observertc.webrtc.common.reports.avro.MediaSource.Builder newBuilder(org.observertc.webrtc.common.reports.avro.MediaSource.Builder other) {
    if (other == null) {
      return new org.observertc.webrtc.common.reports.avro.MediaSource.Builder();
    } else {
      return new org.observertc.webrtc.common.reports.avro.MediaSource.Builder(other);
    }
  }

  /**
   * Creates a new MediaSource RecordBuilder by copying an existing MediaSource instance.
   * @param other The existing instance to copy.
   * @return A new MediaSource RecordBuilder
   */
  public static org.observertc.webrtc.common.reports.avro.MediaSource.Builder newBuilder(org.observertc.webrtc.common.reports.avro.MediaSource other) {
    if (other == null) {
      return new org.observertc.webrtc.common.reports.avro.MediaSource.Builder();
    } else {
      return new org.observertc.webrtc.common.reports.avro.MediaSource.Builder(other);
    }
  }

  /**
   * RecordBuilder for MediaSource instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MediaSource>
    implements org.apache.avro.data.RecordBuilder<MediaSource> {

    private java.lang.String peerConnectionUUID;
    private java.lang.String mediaUnit;
    private java.lang.Float audioLevel;
    private java.lang.Double framesPerSecond;
    private java.lang.Double height;
    private java.lang.String id;
    private org.observertc.webrtc.common.reports.avro.MediaType mediaType;
    private java.lang.Float totalAudioEnergy;
    private java.lang.Double totalSamplesDuration;
    private java.lang.String trackIdentifier;
    private java.lang.Double width;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.webrtc.common.reports.avro.MediaSource.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[0].schema(), other.peerConnectionUUID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mediaUnit)) {
        this.mediaUnit = data().deepCopy(fields()[1].schema(), other.mediaUnit);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.audioLevel)) {
        this.audioLevel = data().deepCopy(fields()[2].schema(), other.audioLevel);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.framesPerSecond)) {
        this.framesPerSecond = data().deepCopy(fields()[3].schema(), other.framesPerSecond);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.height)) {
        this.height = data().deepCopy(fields()[4].schema(), other.height);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.id)) {
        this.id = data().deepCopy(fields()[5].schema(), other.id);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[6].schema(), other.mediaType);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.totalAudioEnergy)) {
        this.totalAudioEnergy = data().deepCopy(fields()[7].schema(), other.totalAudioEnergy);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.totalSamplesDuration)) {
        this.totalSamplesDuration = data().deepCopy(fields()[8].schema(), other.totalSamplesDuration);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.trackIdentifier)) {
        this.trackIdentifier = data().deepCopy(fields()[9].schema(), other.trackIdentifier);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.width)) {
        this.width = data().deepCopy(fields()[10].schema(), other.width);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing MediaSource instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.webrtc.common.reports.avro.MediaSource other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[0].schema(), other.peerConnectionUUID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnit)) {
        this.mediaUnit = data().deepCopy(fields()[1].schema(), other.mediaUnit);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.audioLevel)) {
        this.audioLevel = data().deepCopy(fields()[2].schema(), other.audioLevel);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.framesPerSecond)) {
        this.framesPerSecond = data().deepCopy(fields()[3].schema(), other.framesPerSecond);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.height)) {
        this.height = data().deepCopy(fields()[4].schema(), other.height);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.id)) {
        this.id = data().deepCopy(fields()[5].schema(), other.id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[6].schema(), other.mediaType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.totalAudioEnergy)) {
        this.totalAudioEnergy = data().deepCopy(fields()[7].schema(), other.totalAudioEnergy);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.totalSamplesDuration)) {
        this.totalSamplesDuration = data().deepCopy(fields()[8].schema(), other.totalSamplesDuration);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.trackIdentifier)) {
        this.trackIdentifier = data().deepCopy(fields()[9].schema(), other.trackIdentifier);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.width)) {
        this.width = data().deepCopy(fields()[10].schema(), other.width);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'peerConnectionUUID' field.
      * @return The value.
      */
    public java.lang.String getPeerConnectionUUID() {
      return peerConnectionUUID;
    }


    /**
      * Sets the value of the 'peerConnectionUUID' field.
      * @param value The value of 'peerConnectionUUID'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder setPeerConnectionUUID(java.lang.String value) {
      validate(fields()[0], value);
      this.peerConnectionUUID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionUUID' field has been set.
      * @return True if the 'peerConnectionUUID' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionUUID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'peerConnectionUUID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder clearPeerConnectionUUID() {
      peerConnectionUUID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnit' field.
      * @return The value.
      */
    public java.lang.String getMediaUnit() {
      return mediaUnit;
    }


    /**
      * Sets the value of the 'mediaUnit' field.
      * @param value The value of 'mediaUnit'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder setMediaUnit(java.lang.String value) {
      validate(fields()[1], value);
      this.mediaUnit = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnit' field has been set.
      * @return True if the 'mediaUnit' field has been set, false otherwise.
      */
    public boolean hasMediaUnit() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mediaUnit' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder clearMediaUnit() {
      mediaUnit = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'audioLevel' field.
      * @return The value.
      */
    public java.lang.Float getAudioLevel() {
      return audioLevel;
    }


    /**
      * Sets the value of the 'audioLevel' field.
      * @param value The value of 'audioLevel'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder setAudioLevel(java.lang.Float value) {
      validate(fields()[2], value);
      this.audioLevel = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'audioLevel' field has been set.
      * @return True if the 'audioLevel' field has been set, false otherwise.
      */
    public boolean hasAudioLevel() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'audioLevel' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder clearAudioLevel() {
      audioLevel = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesPerSecond' field.
      * @return The value.
      */
    public java.lang.Double getFramesPerSecond() {
      return framesPerSecond;
    }


    /**
      * Sets the value of the 'framesPerSecond' field.
      * @param value The value of 'framesPerSecond'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder setFramesPerSecond(java.lang.Double value) {
      validate(fields()[3], value);
      this.framesPerSecond = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'framesPerSecond' field has been set.
      * @return True if the 'framesPerSecond' field has been set, false otherwise.
      */
    public boolean hasFramesPerSecond() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'framesPerSecond' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder clearFramesPerSecond() {
      framesPerSecond = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'height' field.
      * @return The value.
      */
    public java.lang.Double getHeight() {
      return height;
    }


    /**
      * Sets the value of the 'height' field.
      * @param value The value of 'height'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder setHeight(java.lang.Double value) {
      validate(fields()[4], value);
      this.height = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'height' field has been set.
      * @return True if the 'height' field has been set, false otherwise.
      */
    public boolean hasHeight() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'height' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder clearHeight() {
      height = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder setId(java.lang.String value) {
      validate(fields()[5], value);
      this.id = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder clearId() {
      id = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaType' field.
      * @return The value.
      */
    public org.observertc.webrtc.common.reports.avro.MediaType getMediaType() {
      return mediaType;
    }


    /**
      * Sets the value of the 'mediaType' field.
      * @param value The value of 'mediaType'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder setMediaType(org.observertc.webrtc.common.reports.avro.MediaType value) {
      validate(fields()[6], value);
      this.mediaType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaType' field has been set.
      * @return True if the 'mediaType' field has been set, false otherwise.
      */
    public boolean hasMediaType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'mediaType' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder clearMediaType() {
      mediaType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalAudioEnergy' field.
      * @return The value.
      */
    public java.lang.Float getTotalAudioEnergy() {
      return totalAudioEnergy;
    }


    /**
      * Sets the value of the 'totalAudioEnergy' field.
      * @param value The value of 'totalAudioEnergy'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder setTotalAudioEnergy(java.lang.Float value) {
      validate(fields()[7], value);
      this.totalAudioEnergy = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'totalAudioEnergy' field has been set.
      * @return True if the 'totalAudioEnergy' field has been set, false otherwise.
      */
    public boolean hasTotalAudioEnergy() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'totalAudioEnergy' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder clearTotalAudioEnergy() {
      totalAudioEnergy = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSamplesDuration' field.
      * @return The value.
      */
    public java.lang.Double getTotalSamplesDuration() {
      return totalSamplesDuration;
    }


    /**
      * Sets the value of the 'totalSamplesDuration' field.
      * @param value The value of 'totalSamplesDuration'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder setTotalSamplesDuration(java.lang.Double value) {
      validate(fields()[8], value);
      this.totalSamplesDuration = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSamplesDuration' field has been set.
      * @return True if the 'totalSamplesDuration' field has been set, false otherwise.
      */
    public boolean hasTotalSamplesDuration() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'totalSamplesDuration' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder clearTotalSamplesDuration() {
      totalSamplesDuration = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'trackIdentifier' field.
      * @return The value.
      */
    public java.lang.String getTrackIdentifier() {
      return trackIdentifier;
    }


    /**
      * Sets the value of the 'trackIdentifier' field.
      * @param value The value of 'trackIdentifier'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder setTrackIdentifier(java.lang.String value) {
      validate(fields()[9], value);
      this.trackIdentifier = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'trackIdentifier' field has been set.
      * @return True if the 'trackIdentifier' field has been set, false otherwise.
      */
    public boolean hasTrackIdentifier() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'trackIdentifier' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder clearTrackIdentifier() {
      trackIdentifier = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'width' field.
      * @return The value.
      */
    public java.lang.Double getWidth() {
      return width;
    }


    /**
      * Sets the value of the 'width' field.
      * @param value The value of 'width'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder setWidth(java.lang.Double value) {
      validate(fields()[10], value);
      this.width = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'width' field has been set.
      * @return True if the 'width' field has been set, false otherwise.
      */
    public boolean hasWidth() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'width' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.MediaSource.Builder clearWidth() {
      width = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MediaSource build() {
      try {
        MediaSource record = new MediaSource();
        record.peerConnectionUUID = fieldSetFlags()[0] ? this.peerConnectionUUID : (java.lang.String) defaultValue(fields()[0]);
        record.mediaUnit = fieldSetFlags()[1] ? this.mediaUnit : (java.lang.String) defaultValue(fields()[1]);
        record.audioLevel = fieldSetFlags()[2] ? this.audioLevel : (java.lang.Float) defaultValue(fields()[2]);
        record.framesPerSecond = fieldSetFlags()[3] ? this.framesPerSecond : (java.lang.Double) defaultValue(fields()[3]);
        record.height = fieldSetFlags()[4] ? this.height : (java.lang.Double) defaultValue(fields()[4]);
        record.id = fieldSetFlags()[5] ? this.id : (java.lang.String) defaultValue(fields()[5]);
        record.mediaType = fieldSetFlags()[6] ? this.mediaType : (org.observertc.webrtc.common.reports.avro.MediaType) defaultValue(fields()[6]);
        record.totalAudioEnergy = fieldSetFlags()[7] ? this.totalAudioEnergy : (java.lang.Float) defaultValue(fields()[7]);
        record.totalSamplesDuration = fieldSetFlags()[8] ? this.totalSamplesDuration : (java.lang.Double) defaultValue(fields()[8]);
        record.trackIdentifier = fieldSetFlags()[9] ? this.trackIdentifier : (java.lang.String) defaultValue(fields()[9]);
        record.width = fieldSetFlags()[10] ? this.width : (java.lang.Double) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MediaSource>
    WRITER$ = (org.apache.avro.io.DatumWriter<MediaSource>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MediaSource>
    READER$ = (org.apache.avro.io.DatumReader<MediaSource>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.peerConnectionUUID);

    out.writeString(this.mediaUnit);

    if (this.audioLevel == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeFloat(this.audioLevel);
    }

    if (this.framesPerSecond == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.framesPerSecond);
    }

    if (this.height == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.height);
    }

    out.writeString(this.id);

    out.writeEnum(this.mediaType.ordinal());

    if (this.totalAudioEnergy == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeFloat(this.totalAudioEnergy);
    }

    if (this.totalSamplesDuration == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.totalSamplesDuration);
    }

    if (this.trackIdentifier == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.trackIdentifier);
    }

    if (this.width == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.width);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.peerConnectionUUID = in.readString();

      this.mediaUnit = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.audioLevel = null;
      } else {
        this.audioLevel = in.readFloat();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesPerSecond = null;
      } else {
        this.framesPerSecond = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.height = null;
      } else {
        this.height = in.readDouble();
      }

      this.id = in.readString();

      this.mediaType = org.observertc.webrtc.common.reports.avro.MediaType.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalAudioEnergy = null;
      } else {
        this.totalAudioEnergy = in.readFloat();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalSamplesDuration = null;
      } else {
        this.totalSamplesDuration = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.trackIdentifier = null;
      } else {
        this.trackIdentifier = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.width = null;
      } else {
        this.width = in.readDouble();
      }

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.peerConnectionUUID = in.readString();
          break;

        case 1:
          this.mediaUnit = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.audioLevel = null;
          } else {
            this.audioLevel = in.readFloat();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesPerSecond = null;
          } else {
            this.framesPerSecond = in.readDouble();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.height = null;
          } else {
            this.height = in.readDouble();
          }
          break;

        case 5:
          this.id = in.readString();
          break;

        case 6:
          this.mediaType = org.observertc.webrtc.common.reports.avro.MediaType.values()[in.readEnum()];
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalAudioEnergy = null;
          } else {
            this.totalAudioEnergy = in.readFloat();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalSamplesDuration = null;
          } else {
            this.totalSamplesDuration = in.readDouble();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.trackIdentifier = null;
          } else {
            this.trackIdentifier = in.readString();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.width = null;
          } else {
            this.width = in.readDouble();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










