/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.common.reports.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ICELocalCandidate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8164168167687397689L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ICELocalCandidate\",\"namespace\":\"org.observertc.webrtc.common.reports.avro\",\"fields\":[{\"name\":\"peerConnectionUUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"candidateType\",\"type\":{\"type\":\"enum\",\"name\":\"CandidateType\",\"symbols\":[\"HOST\",\"PRFLX\",\"RELAY\",\"SRFLX\",\"UNKNOWN\"]}},{\"name\":\"deleted\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ip\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isRemote\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"networkType\",\"type\":{\"type\":\"enum\",\"name\":\"NetworkType\",\"symbols\":[\"BLUETOOTH\",\"CELLULAR\",\"ETHERNET\",\"UNKNOWN\",\"VPN\",\"WIFI\",\"WIMAX\"]},\"default\":\"UNKNOWN\"},{\"name\":\"port\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"priority\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"transportID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ICELocalCandidate> ENCODER =
      new BinaryMessageEncoder<ICELocalCandidate>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ICELocalCandidate> DECODER =
      new BinaryMessageDecoder<ICELocalCandidate>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ICELocalCandidate> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ICELocalCandidate> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ICELocalCandidate> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ICELocalCandidate>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ICELocalCandidate to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ICELocalCandidate from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ICELocalCandidate instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ICELocalCandidate fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   public java.lang.String peerConnectionUUID;
   public org.observertc.webrtc.common.reports.avro.CandidateType candidateType;
   public java.lang.Boolean deleted;
   public java.lang.String id;
   public java.lang.String ip;
   public java.lang.Boolean isRemote;
   public org.observertc.webrtc.common.reports.avro.NetworkType networkType;
   public java.lang.Integer port;
   public java.lang.Long priority;
   public java.lang.String transportID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ICELocalCandidate() {}

  /**
   * All-args constructor.
   * @param peerConnectionUUID The new value for peerConnectionUUID
   * @param candidateType The new value for candidateType
   * @param deleted The new value for deleted
   * @param id The new value for id
   * @param ip The new value for ip
   * @param isRemote The new value for isRemote
   * @param networkType The new value for networkType
   * @param port The new value for port
   * @param priority The new value for priority
   * @param transportID The new value for transportID
   */
  public ICELocalCandidate(java.lang.String peerConnectionUUID, org.observertc.webrtc.common.reports.avro.CandidateType candidateType, java.lang.Boolean deleted, java.lang.String id, java.lang.String ip, java.lang.Boolean isRemote, org.observertc.webrtc.common.reports.avro.NetworkType networkType, java.lang.Integer port, java.lang.Long priority, java.lang.String transportID) {
    this.peerConnectionUUID = peerConnectionUUID;
    this.candidateType = candidateType;
    this.deleted = deleted;
    this.id = id;
    this.ip = ip;
    this.isRemote = isRemote;
    this.networkType = networkType;
    this.port = port;
    this.priority = priority;
    this.transportID = transportID;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return peerConnectionUUID;
    case 1: return candidateType;
    case 2: return deleted;
    case 3: return id;
    case 4: return ip;
    case 5: return isRemote;
    case 6: return networkType;
    case 7: return port;
    case 8: return priority;
    case 9: return transportID;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: peerConnectionUUID = value$ != null ? value$.toString() : null; break;
    case 1: candidateType = (org.observertc.webrtc.common.reports.avro.CandidateType)value$; break;
    case 2: deleted = (java.lang.Boolean)value$; break;
    case 3: id = value$ != null ? value$.toString() : null; break;
    case 4: ip = value$ != null ? value$.toString() : null; break;
    case 5: isRemote = (java.lang.Boolean)value$; break;
    case 6: networkType = (org.observertc.webrtc.common.reports.avro.NetworkType)value$; break;
    case 7: port = (java.lang.Integer)value$; break;
    case 8: priority = (java.lang.Long)value$; break;
    case 9: transportID = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'peerConnectionUUID' field.
   * @return The value of the 'peerConnectionUUID' field.
   */
  public java.lang.String getPeerConnectionUUID() {
    return peerConnectionUUID;
  }



  /**
   * Gets the value of the 'candidateType' field.
   * @return The value of the 'candidateType' field.
   */
  public org.observertc.webrtc.common.reports.avro.CandidateType getCandidateType() {
    return candidateType;
  }



  /**
   * Gets the value of the 'deleted' field.
   * @return The value of the 'deleted' field.
   */
  public java.lang.Boolean getDeleted() {
    return deleted;
  }



  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }



  /**
   * Gets the value of the 'ip' field.
   * @return The value of the 'ip' field.
   */
  public java.lang.String getIp() {
    return ip;
  }



  /**
   * Gets the value of the 'isRemote' field.
   * @return The value of the 'isRemote' field.
   */
  public java.lang.Boolean getIsRemote() {
    return isRemote;
  }



  /**
   * Gets the value of the 'networkType' field.
   * @return The value of the 'networkType' field.
   */
  public org.observertc.webrtc.common.reports.avro.NetworkType getNetworkType() {
    return networkType;
  }



  /**
   * Gets the value of the 'port' field.
   * @return The value of the 'port' field.
   */
  public java.lang.Integer getPort() {
    return port;
  }



  /**
   * Gets the value of the 'priority' field.
   * @return The value of the 'priority' field.
   */
  public java.lang.Long getPriority() {
    return priority;
  }



  /**
   * Gets the value of the 'transportID' field.
   * @return The value of the 'transportID' field.
   */
  public java.lang.String getTransportID() {
    return transportID;
  }



  /**
   * Creates a new ICELocalCandidate RecordBuilder.
   * @return A new ICELocalCandidate RecordBuilder
   */
  public static org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder newBuilder() {
    return new org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder();
  }

  /**
   * Creates a new ICELocalCandidate RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ICELocalCandidate RecordBuilder
   */
  public static org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder newBuilder(org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder other) {
    if (other == null) {
      return new org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder();
    } else {
      return new org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder(other);
    }
  }

  /**
   * Creates a new ICELocalCandidate RecordBuilder by copying an existing ICELocalCandidate instance.
   * @param other The existing instance to copy.
   * @return A new ICELocalCandidate RecordBuilder
   */
  public static org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder newBuilder(org.observertc.webrtc.common.reports.avro.ICELocalCandidate other) {
    if (other == null) {
      return new org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder();
    } else {
      return new org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder(other);
    }
  }

  /**
   * RecordBuilder for ICELocalCandidate instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ICELocalCandidate>
    implements org.apache.avro.data.RecordBuilder<ICELocalCandidate> {

    private java.lang.String peerConnectionUUID;
    private org.observertc.webrtc.common.reports.avro.CandidateType candidateType;
    private java.lang.Boolean deleted;
    private java.lang.String id;
    private java.lang.String ip;
    private java.lang.Boolean isRemote;
    private org.observertc.webrtc.common.reports.avro.NetworkType networkType;
    private java.lang.Integer port;
    private java.lang.Long priority;
    private java.lang.String transportID;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[0].schema(), other.peerConnectionUUID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.candidateType)) {
        this.candidateType = data().deepCopy(fields()[1].schema(), other.candidateType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.deleted)) {
        this.deleted = data().deepCopy(fields()[2].schema(), other.deleted);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.ip)) {
        this.ip = data().deepCopy(fields()[4].schema(), other.ip);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.isRemote)) {
        this.isRemote = data().deepCopy(fields()[5].schema(), other.isRemote);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.networkType)) {
        this.networkType = data().deepCopy(fields()[6].schema(), other.networkType);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.port)) {
        this.port = data().deepCopy(fields()[7].schema(), other.port);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.priority)) {
        this.priority = data().deepCopy(fields()[8].schema(), other.priority);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.transportID)) {
        this.transportID = data().deepCopy(fields()[9].schema(), other.transportID);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing ICELocalCandidate instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.webrtc.common.reports.avro.ICELocalCandidate other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[0].schema(), other.peerConnectionUUID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.candidateType)) {
        this.candidateType = data().deepCopy(fields()[1].schema(), other.candidateType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.deleted)) {
        this.deleted = data().deepCopy(fields()[2].schema(), other.deleted);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ip)) {
        this.ip = data().deepCopy(fields()[4].schema(), other.ip);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isRemote)) {
        this.isRemote = data().deepCopy(fields()[5].schema(), other.isRemote);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.networkType)) {
        this.networkType = data().deepCopy(fields()[6].schema(), other.networkType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.port)) {
        this.port = data().deepCopy(fields()[7].schema(), other.port);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.priority)) {
        this.priority = data().deepCopy(fields()[8].schema(), other.priority);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.transportID)) {
        this.transportID = data().deepCopy(fields()[9].schema(), other.transportID);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'peerConnectionUUID' field.
      * @return The value.
      */
    public java.lang.String getPeerConnectionUUID() {
      return peerConnectionUUID;
    }


    /**
      * Sets the value of the 'peerConnectionUUID' field.
      * @param value The value of 'peerConnectionUUID'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder setPeerConnectionUUID(java.lang.String value) {
      validate(fields()[0], value);
      this.peerConnectionUUID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionUUID' field has been set.
      * @return True if the 'peerConnectionUUID' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionUUID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'peerConnectionUUID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder clearPeerConnectionUUID() {
      peerConnectionUUID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidateType' field.
      * @return The value.
      */
    public org.observertc.webrtc.common.reports.avro.CandidateType getCandidateType() {
      return candidateType;
    }


    /**
      * Sets the value of the 'candidateType' field.
      * @param value The value of 'candidateType'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder setCandidateType(org.observertc.webrtc.common.reports.avro.CandidateType value) {
      validate(fields()[1], value);
      this.candidateType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'candidateType' field has been set.
      * @return True if the 'candidateType' field has been set, false otherwise.
      */
    public boolean hasCandidateType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'candidateType' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder clearCandidateType() {
      candidateType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'deleted' field.
      * @return The value.
      */
    public java.lang.Boolean getDeleted() {
      return deleted;
    }


    /**
      * Sets the value of the 'deleted' field.
      * @param value The value of 'deleted'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder setDeleted(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.deleted = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'deleted' field has been set.
      * @return True if the 'deleted' field has been set, false otherwise.
      */
    public boolean hasDeleted() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'deleted' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder clearDeleted() {
      deleted = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder setId(java.lang.String value) {
      validate(fields()[3], value);
      this.id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder clearId() {
      id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'ip' field.
      * @return The value.
      */
    public java.lang.String getIp() {
      return ip;
    }


    /**
      * Sets the value of the 'ip' field.
      * @param value The value of 'ip'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder setIp(java.lang.String value) {
      validate(fields()[4], value);
      this.ip = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'ip' field has been set.
      * @return True if the 'ip' field has been set, false otherwise.
      */
    public boolean hasIp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'ip' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder clearIp() {
      ip = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'isRemote' field.
      * @return The value.
      */
    public java.lang.Boolean getIsRemote() {
      return isRemote;
    }


    /**
      * Sets the value of the 'isRemote' field.
      * @param value The value of 'isRemote'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder setIsRemote(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.isRemote = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'isRemote' field has been set.
      * @return True if the 'isRemote' field has been set, false otherwise.
      */
    public boolean hasIsRemote() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'isRemote' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder clearIsRemote() {
      isRemote = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'networkType' field.
      * @return The value.
      */
    public org.observertc.webrtc.common.reports.avro.NetworkType getNetworkType() {
      return networkType;
    }


    /**
      * Sets the value of the 'networkType' field.
      * @param value The value of 'networkType'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder setNetworkType(org.observertc.webrtc.common.reports.avro.NetworkType value) {
      validate(fields()[6], value);
      this.networkType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'networkType' field has been set.
      * @return True if the 'networkType' field has been set, false otherwise.
      */
    public boolean hasNetworkType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'networkType' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder clearNetworkType() {
      networkType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'port' field.
      * @return The value.
      */
    public java.lang.Integer getPort() {
      return port;
    }


    /**
      * Sets the value of the 'port' field.
      * @param value The value of 'port'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder setPort(java.lang.Integer value) {
      validate(fields()[7], value);
      this.port = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'port' field has been set.
      * @return True if the 'port' field has been set, false otherwise.
      */
    public boolean hasPort() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'port' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder clearPort() {
      port = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'priority' field.
      * @return The value.
      */
    public java.lang.Long getPriority() {
      return priority;
    }


    /**
      * Sets the value of the 'priority' field.
      * @param value The value of 'priority'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder setPriority(java.lang.Long value) {
      validate(fields()[8], value);
      this.priority = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'priority' field has been set.
      * @return True if the 'priority' field has been set, false otherwise.
      */
    public boolean hasPriority() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'priority' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder clearPriority() {
      priority = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportID' field.
      * @return The value.
      */
    public java.lang.String getTransportID() {
      return transportID;
    }


    /**
      * Sets the value of the 'transportID' field.
      * @param value The value of 'transportID'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder setTransportID(java.lang.String value) {
      validate(fields()[9], value);
      this.transportID = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'transportID' field has been set.
      * @return True if the 'transportID' field has been set, false otherwise.
      */
    public boolean hasTransportID() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'transportID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICELocalCandidate.Builder clearTransportID() {
      transportID = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ICELocalCandidate build() {
      try {
        ICELocalCandidate record = new ICELocalCandidate();
        record.peerConnectionUUID = fieldSetFlags()[0] ? this.peerConnectionUUID : (java.lang.String) defaultValue(fields()[0]);
        record.candidateType = fieldSetFlags()[1] ? this.candidateType : (org.observertc.webrtc.common.reports.avro.CandidateType) defaultValue(fields()[1]);
        record.deleted = fieldSetFlags()[2] ? this.deleted : (java.lang.Boolean) defaultValue(fields()[2]);
        record.id = fieldSetFlags()[3] ? this.id : (java.lang.String) defaultValue(fields()[3]);
        record.ip = fieldSetFlags()[4] ? this.ip : (java.lang.String) defaultValue(fields()[4]);
        record.isRemote = fieldSetFlags()[5] ? this.isRemote : (java.lang.Boolean) defaultValue(fields()[5]);
        record.networkType = fieldSetFlags()[6] ? this.networkType : (org.observertc.webrtc.common.reports.avro.NetworkType) defaultValue(fields()[6]);
        record.port = fieldSetFlags()[7] ? this.port : (java.lang.Integer) defaultValue(fields()[7]);
        record.priority = fieldSetFlags()[8] ? this.priority : (java.lang.Long) defaultValue(fields()[8]);
        record.transportID = fieldSetFlags()[9] ? this.transportID : (java.lang.String) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ICELocalCandidate>
    WRITER$ = (org.apache.avro.io.DatumWriter<ICELocalCandidate>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ICELocalCandidate>
    READER$ = (org.apache.avro.io.DatumReader<ICELocalCandidate>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.peerConnectionUUID);

    out.writeEnum(this.candidateType.ordinal());

    if (this.deleted == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.deleted);
    }

    out.writeString(this.id);

    if (this.ip == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ip);
    }

    if (this.isRemote == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.isRemote);
    }

    out.writeEnum(this.networkType.ordinal());

    if (this.port == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.port);
    }

    if (this.priority == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.priority);
    }

    if (this.transportID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.transportID);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.peerConnectionUUID = in.readString();

      this.candidateType = org.observertc.webrtc.common.reports.avro.CandidateType.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.deleted = null;
      } else {
        this.deleted = in.readBoolean();
      }

      this.id = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.ip = null;
      } else {
        this.ip = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.isRemote = null;
      } else {
        this.isRemote = in.readBoolean();
      }

      this.networkType = org.observertc.webrtc.common.reports.avro.NetworkType.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.port = null;
      } else {
        this.port = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.priority = null;
      } else {
        this.priority = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.transportID = null;
      } else {
        this.transportID = in.readString();
      }

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.peerConnectionUUID = in.readString();
          break;

        case 1:
          this.candidateType = org.observertc.webrtc.common.reports.avro.CandidateType.values()[in.readEnum()];
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.deleted = null;
          } else {
            this.deleted = in.readBoolean();
          }
          break;

        case 3:
          this.id = in.readString();
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ip = null;
          } else {
            this.ip = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.isRemote = null;
          } else {
            this.isRemote = in.readBoolean();
          }
          break;

        case 6:
          this.networkType = org.observertc.webrtc.common.reports.avro.NetworkType.values()[in.readEnum()];
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.port = null;
          } else {
            this.port = in.readInt();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.priority = null;
          } else {
            this.priority = in.readLong();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.transportID = null;
          } else {
            this.transportID = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










