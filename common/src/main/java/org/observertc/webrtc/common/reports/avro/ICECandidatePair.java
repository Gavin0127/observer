/*
 * Copyright  2020 Balazs Kreith
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.common.reports.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ICECandidatePair extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4735940354891153940L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ICECandidatePair\",\"namespace\":\"org.observertc.webrtc.common.reports.avro\",\"fields\":[{\"name\":\"peerConnectionUUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mediaUnit\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"availableOutgoingBitrate\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"bytesReceived\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"bytesSent\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"consentRequestsSent\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"currentRoundTripTime\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"localCandidateID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"nominated\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"priority\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"remoteCandidateID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"requestsReceived\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"requestsSent\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"responsesReceived\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"responsesSent\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"ICEState\",\"symbols\":[\"HOST\",\"PRFLX\",\"RELAY\",\"SRFLX\",\"UNKNOWN\"]},\"default\":\"UNKNOWN\"},{\"name\":\"totalRoundTripTime\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"transportID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"writable\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ICECandidatePair> ENCODER =
      new BinaryMessageEncoder<ICECandidatePair>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ICECandidatePair> DECODER =
      new BinaryMessageDecoder<ICECandidatePair>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ICECandidatePair> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ICECandidatePair> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ICECandidatePair> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ICECandidatePair>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ICECandidatePair to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ICECandidatePair from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ICECandidatePair instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ICECandidatePair fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String peerConnectionUUID;
   private java.lang.String mediaUnit;
   private java.lang.Integer availableOutgoingBitrate;
   private java.lang.Long bytesReceived;
   private java.lang.Long bytesSent;
   private java.lang.Integer consentRequestsSent;
   private java.lang.Double currentRoundTripTime;
   private java.lang.String id;
   private java.lang.String localCandidateID;
   private java.lang.Boolean nominated;
   private java.lang.Long priority;
   private java.lang.String remoteCandidateID;
   private java.lang.Integer requestsReceived;
   private java.lang.Integer requestsSent;
   private java.lang.Integer responsesReceived;
   private java.lang.Integer responsesSent;
   private org.observertc.webrtc.common.reports.avro.ICEState state;
   private java.lang.Double totalRoundTripTime;
   private java.lang.String transportID;
   private java.lang.Boolean writable;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ICECandidatePair() {}

  /**
   * All-args constructor.
   * @param peerConnectionUUID The new value for peerConnectionUUID
   * @param mediaUnit The new value for mediaUnit
   * @param availableOutgoingBitrate The new value for availableOutgoingBitrate
   * @param bytesReceived The new value for bytesReceived
   * @param bytesSent The new value for bytesSent
   * @param consentRequestsSent The new value for consentRequestsSent
   * @param currentRoundTripTime The new value for currentRoundTripTime
   * @param id The new value for id
   * @param localCandidateID The new value for localCandidateID
   * @param nominated The new value for nominated
   * @param priority The new value for priority
   * @param remoteCandidateID The new value for remoteCandidateID
   * @param requestsReceived The new value for requestsReceived
   * @param requestsSent The new value for requestsSent
   * @param responsesReceived The new value for responsesReceived
   * @param responsesSent The new value for responsesSent
   * @param state The new value for state
   * @param totalRoundTripTime The new value for totalRoundTripTime
   * @param transportID The new value for transportID
   * @param writable The new value for writable
   */
  public ICECandidatePair(java.lang.String peerConnectionUUID, java.lang.String mediaUnit, java.lang.Integer availableOutgoingBitrate, java.lang.Long bytesReceived, java.lang.Long bytesSent, java.lang.Integer consentRequestsSent, java.lang.Double currentRoundTripTime, java.lang.String id, java.lang.String localCandidateID, java.lang.Boolean nominated, java.lang.Long priority, java.lang.String remoteCandidateID, java.lang.Integer requestsReceived, java.lang.Integer requestsSent, java.lang.Integer responsesReceived, java.lang.Integer responsesSent, org.observertc.webrtc.common.reports.avro.ICEState state, java.lang.Double totalRoundTripTime, java.lang.String transportID, java.lang.Boolean writable) {
    this.peerConnectionUUID = peerConnectionUUID;
    this.mediaUnit = mediaUnit;
    this.availableOutgoingBitrate = availableOutgoingBitrate;
    this.bytesReceived = bytesReceived;
    this.bytesSent = bytesSent;
    this.consentRequestsSent = consentRequestsSent;
    this.currentRoundTripTime = currentRoundTripTime;
    this.id = id;
    this.localCandidateID = localCandidateID;
    this.nominated = nominated;
    this.priority = priority;
    this.remoteCandidateID = remoteCandidateID;
    this.requestsReceived = requestsReceived;
    this.requestsSent = requestsSent;
    this.responsesReceived = responsesReceived;
    this.responsesSent = responsesSent;
    this.state = state;
    this.totalRoundTripTime = totalRoundTripTime;
    this.transportID = transportID;
    this.writable = writable;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return peerConnectionUUID;
    case 1: return mediaUnit;
    case 2: return availableOutgoingBitrate;
    case 3: return bytesReceived;
    case 4: return bytesSent;
    case 5: return consentRequestsSent;
    case 6: return currentRoundTripTime;
    case 7: return id;
    case 8: return localCandidateID;
    case 9: return nominated;
    case 10: return priority;
    case 11: return remoteCandidateID;
    case 12: return requestsReceived;
    case 13: return requestsSent;
    case 14: return responsesReceived;
    case 15: return responsesSent;
    case 16: return state;
    case 17: return totalRoundTripTime;
    case 18: return transportID;
    case 19: return writable;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: peerConnectionUUID = value$ != null ? value$.toString() : null; break;
    case 1: mediaUnit = value$ != null ? value$.toString() : null; break;
    case 2: availableOutgoingBitrate = (java.lang.Integer)value$; break;
    case 3: bytesReceived = (java.lang.Long)value$; break;
    case 4: bytesSent = (java.lang.Long)value$; break;
    case 5: consentRequestsSent = (java.lang.Integer)value$; break;
    case 6: currentRoundTripTime = (java.lang.Double)value$; break;
    case 7: id = value$ != null ? value$.toString() : null; break;
    case 8: localCandidateID = value$ != null ? value$.toString() : null; break;
    case 9: nominated = (java.lang.Boolean)value$; break;
    case 10: priority = (java.lang.Long)value$; break;
    case 11: remoteCandidateID = value$ != null ? value$.toString() : null; break;
    case 12: requestsReceived = (java.lang.Integer)value$; break;
    case 13: requestsSent = (java.lang.Integer)value$; break;
    case 14: responsesReceived = (java.lang.Integer)value$; break;
    case 15: responsesSent = (java.lang.Integer)value$; break;
    case 16: state = (org.observertc.webrtc.common.reports.avro.ICEState)value$; break;
    case 17: totalRoundTripTime = (java.lang.Double)value$; break;
    case 18: transportID = value$ != null ? value$.toString() : null; break;
    case 19: writable = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'peerConnectionUUID' field.
   * @return The value of the 'peerConnectionUUID' field.
   */
  public java.lang.String getPeerConnectionUUID() {
    return peerConnectionUUID;
  }



  /**
   * Gets the value of the 'mediaUnit' field.
   * @return The value of the 'mediaUnit' field.
   */
  public java.lang.String getMediaUnit() {
    return mediaUnit;
  }



  /**
   * Gets the value of the 'availableOutgoingBitrate' field.
   * @return The value of the 'availableOutgoingBitrate' field.
   */
  public java.lang.Integer getAvailableOutgoingBitrate() {
    return availableOutgoingBitrate;
  }



  /**
   * Gets the value of the 'bytesReceived' field.
   * @return The value of the 'bytesReceived' field.
   */
  public java.lang.Long getBytesReceived() {
    return bytesReceived;
  }



  /**
   * Gets the value of the 'bytesSent' field.
   * @return The value of the 'bytesSent' field.
   */
  public java.lang.Long getBytesSent() {
    return bytesSent;
  }



  /**
   * Gets the value of the 'consentRequestsSent' field.
   * @return The value of the 'consentRequestsSent' field.
   */
  public java.lang.Integer getConsentRequestsSent() {
    return consentRequestsSent;
  }



  /**
   * Gets the value of the 'currentRoundTripTime' field.
   * @return The value of the 'currentRoundTripTime' field.
   */
  public java.lang.Double getCurrentRoundTripTime() {
    return currentRoundTripTime;
  }



  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }



  /**
   * Gets the value of the 'localCandidateID' field.
   * @return The value of the 'localCandidateID' field.
   */
  public java.lang.String getLocalCandidateID() {
    return localCandidateID;
  }



  /**
   * Gets the value of the 'nominated' field.
   * @return The value of the 'nominated' field.
   */
  public java.lang.Boolean getNominated() {
    return nominated;
  }



  /**
   * Gets the value of the 'priority' field.
   * @return The value of the 'priority' field.
   */
  public java.lang.Long getPriority() {
    return priority;
  }



  /**
   * Gets the value of the 'remoteCandidateID' field.
   * @return The value of the 'remoteCandidateID' field.
   */
  public java.lang.String getRemoteCandidateID() {
    return remoteCandidateID;
  }



  /**
   * Gets the value of the 'requestsReceived' field.
   * @return The value of the 'requestsReceived' field.
   */
  public java.lang.Integer getRequestsReceived() {
    return requestsReceived;
  }



  /**
   * Gets the value of the 'requestsSent' field.
   * @return The value of the 'requestsSent' field.
   */
  public java.lang.Integer getRequestsSent() {
    return requestsSent;
  }



  /**
   * Gets the value of the 'responsesReceived' field.
   * @return The value of the 'responsesReceived' field.
   */
  public java.lang.Integer getResponsesReceived() {
    return responsesReceived;
  }



  /**
   * Gets the value of the 'responsesSent' field.
   * @return The value of the 'responsesSent' field.
   */
  public java.lang.Integer getResponsesSent() {
    return responsesSent;
  }



  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public org.observertc.webrtc.common.reports.avro.ICEState getState() {
    return state;
  }



  /**
   * Gets the value of the 'totalRoundTripTime' field.
   * @return The value of the 'totalRoundTripTime' field.
   */
  public java.lang.Double getTotalRoundTripTime() {
    return totalRoundTripTime;
  }



  /**
   * Gets the value of the 'transportID' field.
   * @return The value of the 'transportID' field.
   */
  public java.lang.String getTransportID() {
    return transportID;
  }



  /**
   * Gets the value of the 'writable' field.
   * @return The value of the 'writable' field.
   */
  public java.lang.Boolean getWritable() {
    return writable;
  }



  /**
   * Creates a new ICECandidatePair RecordBuilder.
   * @return A new ICECandidatePair RecordBuilder
   */
  public static org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder newBuilder() {
    return new org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder();
  }

  /**
   * Creates a new ICECandidatePair RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ICECandidatePair RecordBuilder
   */
  public static org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder newBuilder(org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder other) {
    if (other == null) {
      return new org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder();
    } else {
      return new org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder(other);
    }
  }

  /**
   * Creates a new ICECandidatePair RecordBuilder by copying an existing ICECandidatePair instance.
   * @param other The existing instance to copy.
   * @return A new ICECandidatePair RecordBuilder
   */
  public static org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder newBuilder(org.observertc.webrtc.common.reports.avro.ICECandidatePair other) {
    if (other == null) {
      return new org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder();
    } else {
      return new org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder(other);
    }
  }

  /**
   * RecordBuilder for ICECandidatePair instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ICECandidatePair>
    implements org.apache.avro.data.RecordBuilder<ICECandidatePair> {

    private java.lang.String peerConnectionUUID;
    private java.lang.String mediaUnit;
    private java.lang.Integer availableOutgoingBitrate;
    private java.lang.Long bytesReceived;
    private java.lang.Long bytesSent;
    private java.lang.Integer consentRequestsSent;
    private java.lang.Double currentRoundTripTime;
    private java.lang.String id;
    private java.lang.String localCandidateID;
    private java.lang.Boolean nominated;
    private java.lang.Long priority;
    private java.lang.String remoteCandidateID;
    private java.lang.Integer requestsReceived;
    private java.lang.Integer requestsSent;
    private java.lang.Integer responsesReceived;
    private java.lang.Integer responsesSent;
    private org.observertc.webrtc.common.reports.avro.ICEState state;
    private java.lang.Double totalRoundTripTime;
    private java.lang.String transportID;
    private java.lang.Boolean writable;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[0].schema(), other.peerConnectionUUID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mediaUnit)) {
        this.mediaUnit = data().deepCopy(fields()[1].schema(), other.mediaUnit);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.availableOutgoingBitrate)) {
        this.availableOutgoingBitrate = data().deepCopy(fields()[2].schema(), other.availableOutgoingBitrate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[3].schema(), other.bytesReceived);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[4].schema(), other.bytesSent);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.consentRequestsSent)) {
        this.consentRequestsSent = data().deepCopy(fields()[5].schema(), other.consentRequestsSent);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.currentRoundTripTime)) {
        this.currentRoundTripTime = data().deepCopy(fields()[6].schema(), other.currentRoundTripTime);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.id)) {
        this.id = data().deepCopy(fields()[7].schema(), other.id);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.localCandidateID)) {
        this.localCandidateID = data().deepCopy(fields()[8].schema(), other.localCandidateID);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.nominated)) {
        this.nominated = data().deepCopy(fields()[9].schema(), other.nominated);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.priority)) {
        this.priority = data().deepCopy(fields()[10].schema(), other.priority);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.remoteCandidateID)) {
        this.remoteCandidateID = data().deepCopy(fields()[11].schema(), other.remoteCandidateID);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.requestsReceived)) {
        this.requestsReceived = data().deepCopy(fields()[12].schema(), other.requestsReceived);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.requestsSent)) {
        this.requestsSent = data().deepCopy(fields()[13].schema(), other.requestsSent);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.responsesReceived)) {
        this.responsesReceived = data().deepCopy(fields()[14].schema(), other.responsesReceived);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.responsesSent)) {
        this.responsesSent = data().deepCopy(fields()[15].schema(), other.responsesSent);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.state)) {
        this.state = data().deepCopy(fields()[16].schema(), other.state);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.totalRoundTripTime)) {
        this.totalRoundTripTime = data().deepCopy(fields()[17].schema(), other.totalRoundTripTime);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.transportID)) {
        this.transportID = data().deepCopy(fields()[18].schema(), other.transportID);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.writable)) {
        this.writable = data().deepCopy(fields()[19].schema(), other.writable);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
    }

    /**
     * Creates a Builder by copying an existing ICECandidatePair instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.webrtc.common.reports.avro.ICECandidatePair other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[0].schema(), other.peerConnectionUUID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnit)) {
        this.mediaUnit = data().deepCopy(fields()[1].schema(), other.mediaUnit);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.availableOutgoingBitrate)) {
        this.availableOutgoingBitrate = data().deepCopy(fields()[2].schema(), other.availableOutgoingBitrate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[3].schema(), other.bytesReceived);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[4].schema(), other.bytesSent);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.consentRequestsSent)) {
        this.consentRequestsSent = data().deepCopy(fields()[5].schema(), other.consentRequestsSent);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.currentRoundTripTime)) {
        this.currentRoundTripTime = data().deepCopy(fields()[6].schema(), other.currentRoundTripTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.id)) {
        this.id = data().deepCopy(fields()[7].schema(), other.id);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.localCandidateID)) {
        this.localCandidateID = data().deepCopy(fields()[8].schema(), other.localCandidateID);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.nominated)) {
        this.nominated = data().deepCopy(fields()[9].schema(), other.nominated);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.priority)) {
        this.priority = data().deepCopy(fields()[10].schema(), other.priority);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.remoteCandidateID)) {
        this.remoteCandidateID = data().deepCopy(fields()[11].schema(), other.remoteCandidateID);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.requestsReceived)) {
        this.requestsReceived = data().deepCopy(fields()[12].schema(), other.requestsReceived);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.requestsSent)) {
        this.requestsSent = data().deepCopy(fields()[13].schema(), other.requestsSent);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.responsesReceived)) {
        this.responsesReceived = data().deepCopy(fields()[14].schema(), other.responsesReceived);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.responsesSent)) {
        this.responsesSent = data().deepCopy(fields()[15].schema(), other.responsesSent);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.state)) {
        this.state = data().deepCopy(fields()[16].schema(), other.state);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.totalRoundTripTime)) {
        this.totalRoundTripTime = data().deepCopy(fields()[17].schema(), other.totalRoundTripTime);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.transportID)) {
        this.transportID = data().deepCopy(fields()[18].schema(), other.transportID);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.writable)) {
        this.writable = data().deepCopy(fields()[19].schema(), other.writable);
        fieldSetFlags()[19] = true;
      }
    }

    /**
      * Gets the value of the 'peerConnectionUUID' field.
      * @return The value.
      */
    public java.lang.String getPeerConnectionUUID() {
      return peerConnectionUUID;
    }


    /**
      * Sets the value of the 'peerConnectionUUID' field.
      * @param value The value of 'peerConnectionUUID'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setPeerConnectionUUID(java.lang.String value) {
      validate(fields()[0], value);
      this.peerConnectionUUID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionUUID' field has been set.
      * @return True if the 'peerConnectionUUID' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionUUID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'peerConnectionUUID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearPeerConnectionUUID() {
      peerConnectionUUID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnit' field.
      * @return The value.
      */
    public java.lang.String getMediaUnit() {
      return mediaUnit;
    }


    /**
      * Sets the value of the 'mediaUnit' field.
      * @param value The value of 'mediaUnit'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setMediaUnit(java.lang.String value) {
      validate(fields()[1], value);
      this.mediaUnit = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnit' field has been set.
      * @return True if the 'mediaUnit' field has been set, false otherwise.
      */
    public boolean hasMediaUnit() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mediaUnit' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearMediaUnit() {
      mediaUnit = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'availableOutgoingBitrate' field.
      * @return The value.
      */
    public java.lang.Integer getAvailableOutgoingBitrate() {
      return availableOutgoingBitrate;
    }


    /**
      * Sets the value of the 'availableOutgoingBitrate' field.
      * @param value The value of 'availableOutgoingBitrate'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setAvailableOutgoingBitrate(java.lang.Integer value) {
      validate(fields()[2], value);
      this.availableOutgoingBitrate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'availableOutgoingBitrate' field has been set.
      * @return True if the 'availableOutgoingBitrate' field has been set, false otherwise.
      */
    public boolean hasAvailableOutgoingBitrate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'availableOutgoingBitrate' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearAvailableOutgoingBitrate() {
      availableOutgoingBitrate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesReceived' field.
      * @return The value.
      */
    public java.lang.Long getBytesReceived() {
      return bytesReceived;
    }


    /**
      * Sets the value of the 'bytesReceived' field.
      * @param value The value of 'bytesReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setBytesReceived(java.lang.Long value) {
      validate(fields()[3], value);
      this.bytesReceived = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesReceived' field has been set.
      * @return True if the 'bytesReceived' field has been set, false otherwise.
      */
    public boolean hasBytesReceived() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'bytesReceived' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearBytesReceived() {
      bytesReceived = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesSent' field.
      * @return The value.
      */
    public java.lang.Long getBytesSent() {
      return bytesSent;
    }


    /**
      * Sets the value of the 'bytesSent' field.
      * @param value The value of 'bytesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setBytesSent(java.lang.Long value) {
      validate(fields()[4], value);
      this.bytesSent = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesSent' field has been set.
      * @return True if the 'bytesSent' field has been set, false otherwise.
      */
    public boolean hasBytesSent() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'bytesSent' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearBytesSent() {
      bytesSent = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'consentRequestsSent' field.
      * @return The value.
      */
    public java.lang.Integer getConsentRequestsSent() {
      return consentRequestsSent;
    }


    /**
      * Sets the value of the 'consentRequestsSent' field.
      * @param value The value of 'consentRequestsSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setConsentRequestsSent(java.lang.Integer value) {
      validate(fields()[5], value);
      this.consentRequestsSent = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'consentRequestsSent' field has been set.
      * @return True if the 'consentRequestsSent' field has been set, false otherwise.
      */
    public boolean hasConsentRequestsSent() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'consentRequestsSent' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearConsentRequestsSent() {
      consentRequestsSent = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentRoundTripTime' field.
      * @return The value.
      */
    public java.lang.Double getCurrentRoundTripTime() {
      return currentRoundTripTime;
    }


    /**
      * Sets the value of the 'currentRoundTripTime' field.
      * @param value The value of 'currentRoundTripTime'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setCurrentRoundTripTime(java.lang.Double value) {
      validate(fields()[6], value);
      this.currentRoundTripTime = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'currentRoundTripTime' field has been set.
      * @return True if the 'currentRoundTripTime' field has been set, false otherwise.
      */
    public boolean hasCurrentRoundTripTime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'currentRoundTripTime' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearCurrentRoundTripTime() {
      currentRoundTripTime = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setId(java.lang.String value) {
      validate(fields()[7], value);
      this.id = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearId() {
      id = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'localCandidateID' field.
      * @return The value.
      */
    public java.lang.String getLocalCandidateID() {
      return localCandidateID;
    }


    /**
      * Sets the value of the 'localCandidateID' field.
      * @param value The value of 'localCandidateID'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setLocalCandidateID(java.lang.String value) {
      validate(fields()[8], value);
      this.localCandidateID = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'localCandidateID' field has been set.
      * @return True if the 'localCandidateID' field has been set, false otherwise.
      */
    public boolean hasLocalCandidateID() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'localCandidateID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearLocalCandidateID() {
      localCandidateID = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'nominated' field.
      * @return The value.
      */
    public java.lang.Boolean getNominated() {
      return nominated;
    }


    /**
      * Sets the value of the 'nominated' field.
      * @param value The value of 'nominated'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setNominated(java.lang.Boolean value) {
      validate(fields()[9], value);
      this.nominated = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'nominated' field has been set.
      * @return True if the 'nominated' field has been set, false otherwise.
      */
    public boolean hasNominated() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'nominated' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearNominated() {
      nominated = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'priority' field.
      * @return The value.
      */
    public java.lang.Long getPriority() {
      return priority;
    }


    /**
      * Sets the value of the 'priority' field.
      * @param value The value of 'priority'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setPriority(java.lang.Long value) {
      validate(fields()[10], value);
      this.priority = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'priority' field has been set.
      * @return True if the 'priority' field has been set, false otherwise.
      */
    public boolean hasPriority() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'priority' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearPriority() {
      priority = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteCandidateID' field.
      * @return The value.
      */
    public java.lang.String getRemoteCandidateID() {
      return remoteCandidateID;
    }


    /**
      * Sets the value of the 'remoteCandidateID' field.
      * @param value The value of 'remoteCandidateID'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setRemoteCandidateID(java.lang.String value) {
      validate(fields()[11], value);
      this.remoteCandidateID = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteCandidateID' field has been set.
      * @return True if the 'remoteCandidateID' field has been set, false otherwise.
      */
    public boolean hasRemoteCandidateID() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'remoteCandidateID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearRemoteCandidateID() {
      remoteCandidateID = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestsReceived' field.
      * @return The value.
      */
    public java.lang.Integer getRequestsReceived() {
      return requestsReceived;
    }


    /**
      * Sets the value of the 'requestsReceived' field.
      * @param value The value of 'requestsReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setRequestsReceived(java.lang.Integer value) {
      validate(fields()[12], value);
      this.requestsReceived = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'requestsReceived' field has been set.
      * @return True if the 'requestsReceived' field has been set, false otherwise.
      */
    public boolean hasRequestsReceived() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'requestsReceived' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearRequestsReceived() {
      requestsReceived = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestsSent' field.
      * @return The value.
      */
    public java.lang.Integer getRequestsSent() {
      return requestsSent;
    }


    /**
      * Sets the value of the 'requestsSent' field.
      * @param value The value of 'requestsSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setRequestsSent(java.lang.Integer value) {
      validate(fields()[13], value);
      this.requestsSent = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'requestsSent' field has been set.
      * @return True if the 'requestsSent' field has been set, false otherwise.
      */
    public boolean hasRequestsSent() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'requestsSent' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearRequestsSent() {
      requestsSent = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'responsesReceived' field.
      * @return The value.
      */
    public java.lang.Integer getResponsesReceived() {
      return responsesReceived;
    }


    /**
      * Sets the value of the 'responsesReceived' field.
      * @param value The value of 'responsesReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setResponsesReceived(java.lang.Integer value) {
      validate(fields()[14], value);
      this.responsesReceived = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'responsesReceived' field has been set.
      * @return True if the 'responsesReceived' field has been set, false otherwise.
      */
    public boolean hasResponsesReceived() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'responsesReceived' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearResponsesReceived() {
      responsesReceived = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'responsesSent' field.
      * @return The value.
      */
    public java.lang.Integer getResponsesSent() {
      return responsesSent;
    }


    /**
      * Sets the value of the 'responsesSent' field.
      * @param value The value of 'responsesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setResponsesSent(java.lang.Integer value) {
      validate(fields()[15], value);
      this.responsesSent = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'responsesSent' field has been set.
      * @return True if the 'responsesSent' field has been set, false otherwise.
      */
    public boolean hasResponsesSent() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'responsesSent' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearResponsesSent() {
      responsesSent = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public org.observertc.webrtc.common.reports.avro.ICEState getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setState(org.observertc.webrtc.common.reports.avro.ICEState value) {
      validate(fields()[16], value);
      this.state = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearState() {
      state = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalRoundTripTime' field.
      * @return The value.
      */
    public java.lang.Double getTotalRoundTripTime() {
      return totalRoundTripTime;
    }


    /**
      * Sets the value of the 'totalRoundTripTime' field.
      * @param value The value of 'totalRoundTripTime'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setTotalRoundTripTime(java.lang.Double value) {
      validate(fields()[17], value);
      this.totalRoundTripTime = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'totalRoundTripTime' field has been set.
      * @return True if the 'totalRoundTripTime' field has been set, false otherwise.
      */
    public boolean hasTotalRoundTripTime() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'totalRoundTripTime' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearTotalRoundTripTime() {
      totalRoundTripTime = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportID' field.
      * @return The value.
      */
    public java.lang.String getTransportID() {
      return transportID;
    }


    /**
      * Sets the value of the 'transportID' field.
      * @param value The value of 'transportID'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setTransportID(java.lang.String value) {
      validate(fields()[18], value);
      this.transportID = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'transportID' field has been set.
      * @return True if the 'transportID' field has been set, false otherwise.
      */
    public boolean hasTransportID() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'transportID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearTransportID() {
      transportID = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'writable' field.
      * @return The value.
      */
    public java.lang.Boolean getWritable() {
      return writable;
    }


    /**
      * Sets the value of the 'writable' field.
      * @param value The value of 'writable'.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder setWritable(java.lang.Boolean value) {
      validate(fields()[19], value);
      this.writable = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'writable' field has been set.
      * @return True if the 'writable' field has been set, false otherwise.
      */
    public boolean hasWritable() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'writable' field.
      * @return This builder.
      */
    public org.observertc.webrtc.common.reports.avro.ICECandidatePair.Builder clearWritable() {
      writable = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ICECandidatePair build() {
      try {
        ICECandidatePair record = new ICECandidatePair();
        record.peerConnectionUUID = fieldSetFlags()[0] ? this.peerConnectionUUID : (java.lang.String) defaultValue(fields()[0]);
        record.mediaUnit = fieldSetFlags()[1] ? this.mediaUnit : (java.lang.String) defaultValue(fields()[1]);
        record.availableOutgoingBitrate = fieldSetFlags()[2] ? this.availableOutgoingBitrate : (java.lang.Integer) defaultValue(fields()[2]);
        record.bytesReceived = fieldSetFlags()[3] ? this.bytesReceived : (java.lang.Long) defaultValue(fields()[3]);
        record.bytesSent = fieldSetFlags()[4] ? this.bytesSent : (java.lang.Long) defaultValue(fields()[4]);
        record.consentRequestsSent = fieldSetFlags()[5] ? this.consentRequestsSent : (java.lang.Integer) defaultValue(fields()[5]);
        record.currentRoundTripTime = fieldSetFlags()[6] ? this.currentRoundTripTime : (java.lang.Double) defaultValue(fields()[6]);
        record.id = fieldSetFlags()[7] ? this.id : (java.lang.String) defaultValue(fields()[7]);
        record.localCandidateID = fieldSetFlags()[8] ? this.localCandidateID : (java.lang.String) defaultValue(fields()[8]);
        record.nominated = fieldSetFlags()[9] ? this.nominated : (java.lang.Boolean) defaultValue(fields()[9]);
        record.priority = fieldSetFlags()[10] ? this.priority : (java.lang.Long) defaultValue(fields()[10]);
        record.remoteCandidateID = fieldSetFlags()[11] ? this.remoteCandidateID : (java.lang.String) defaultValue(fields()[11]);
        record.requestsReceived = fieldSetFlags()[12] ? this.requestsReceived : (java.lang.Integer) defaultValue(fields()[12]);
        record.requestsSent = fieldSetFlags()[13] ? this.requestsSent : (java.lang.Integer) defaultValue(fields()[13]);
        record.responsesReceived = fieldSetFlags()[14] ? this.responsesReceived : (java.lang.Integer) defaultValue(fields()[14]);
        record.responsesSent = fieldSetFlags()[15] ? this.responsesSent : (java.lang.Integer) defaultValue(fields()[15]);
        record.state = fieldSetFlags()[16] ? this.state : (org.observertc.webrtc.common.reports.avro.ICEState) defaultValue(fields()[16]);
        record.totalRoundTripTime = fieldSetFlags()[17] ? this.totalRoundTripTime : (java.lang.Double) defaultValue(fields()[17]);
        record.transportID = fieldSetFlags()[18] ? this.transportID : (java.lang.String) defaultValue(fields()[18]);
        record.writable = fieldSetFlags()[19] ? this.writable : (java.lang.Boolean) defaultValue(fields()[19]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ICECandidatePair>
    WRITER$ = (org.apache.avro.io.DatumWriter<ICECandidatePair>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ICECandidatePair>
    READER$ = (org.apache.avro.io.DatumReader<ICECandidatePair>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.peerConnectionUUID);

    out.writeString(this.mediaUnit);

    if (this.availableOutgoingBitrate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.availableOutgoingBitrate);
    }

    if (this.bytesReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.bytesReceived);
    }

    if (this.bytesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.bytesSent);
    }

    if (this.consentRequestsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.consentRequestsSent);
    }

    if (this.currentRoundTripTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.currentRoundTripTime);
    }

    out.writeString(this.id);

    if (this.localCandidateID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.localCandidateID);
    }

    if (this.nominated == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.nominated);
    }

    if (this.priority == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.priority);
    }

    if (this.remoteCandidateID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.remoteCandidateID);
    }

    if (this.requestsReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.requestsReceived);
    }

    if (this.requestsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.requestsSent);
    }

    if (this.responsesReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.responsesReceived);
    }

    if (this.responsesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.responsesSent);
    }

    out.writeEnum(this.state.ordinal());

    if (this.totalRoundTripTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.totalRoundTripTime);
    }

    if (this.transportID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.transportID);
    }

    if (this.writable == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.writable);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.peerConnectionUUID = in.readString();

      this.mediaUnit = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.availableOutgoingBitrate = null;
      } else {
        this.availableOutgoingBitrate = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bytesReceived = null;
      } else {
        this.bytesReceived = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bytesSent = null;
      } else {
        this.bytesSent = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.consentRequestsSent = null;
      } else {
        this.consentRequestsSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.currentRoundTripTime = null;
      } else {
        this.currentRoundTripTime = in.readDouble();
      }

      this.id = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.localCandidateID = null;
      } else {
        this.localCandidateID = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nominated = null;
      } else {
        this.nominated = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.priority = null;
      } else {
        this.priority = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.remoteCandidateID = null;
      } else {
        this.remoteCandidateID = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.requestsReceived = null;
      } else {
        this.requestsReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.requestsSent = null;
      } else {
        this.requestsSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.responsesReceived = null;
      } else {
        this.responsesReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.responsesSent = null;
      } else {
        this.responsesSent = in.readInt();
      }

      this.state = org.observertc.webrtc.common.reports.avro.ICEState.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalRoundTripTime = null;
      } else {
        this.totalRoundTripTime = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.transportID = null;
      } else {
        this.transportID = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.writable = null;
      } else {
        this.writable = in.readBoolean();
      }

    } else {
      for (int i = 0; i < 20; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.peerConnectionUUID = in.readString();
          break;

        case 1:
          this.mediaUnit = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.availableOutgoingBitrate = null;
          } else {
            this.availableOutgoingBitrate = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bytesReceived = null;
          } else {
            this.bytesReceived = in.readLong();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bytesSent = null;
          } else {
            this.bytesSent = in.readLong();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.consentRequestsSent = null;
          } else {
            this.consentRequestsSent = in.readInt();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.currentRoundTripTime = null;
          } else {
            this.currentRoundTripTime = in.readDouble();
          }
          break;

        case 7:
          this.id = in.readString();
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.localCandidateID = null;
          } else {
            this.localCandidateID = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nominated = null;
          } else {
            this.nominated = in.readBoolean();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.priority = null;
          } else {
            this.priority = in.readLong();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.remoteCandidateID = null;
          } else {
            this.remoteCandidateID = in.readString();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.requestsReceived = null;
          } else {
            this.requestsReceived = in.readInt();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.requestsSent = null;
          } else {
            this.requestsSent = in.readInt();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.responsesReceived = null;
          } else {
            this.responsesReceived = in.readInt();
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.responsesSent = null;
          } else {
            this.responsesSent = in.readInt();
          }
          break;

        case 16:
          this.state = org.observertc.webrtc.common.reports.avro.ICEState.values()[in.readEnum()];
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalRoundTripTime = null;
          } else {
            this.totalRoundTripTime = in.readDouble();
          }
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.transportID = null;
          } else {
            this.transportID = in.readString();
          }
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.writable = null;
          } else {
            this.writable = in.readBoolean();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










