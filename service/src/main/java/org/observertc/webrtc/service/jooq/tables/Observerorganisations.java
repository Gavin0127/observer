/*
 * This file is generated by jOOQ.
 */
package org.observertc.webrtc.service.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.observertc.webrtc.service.jooq.Indexes;
import org.observertc.webrtc.service.jooq.Keys;
import org.observertc.webrtc.service.jooq.Webrtcobserver;
import org.observertc.webrtc.service.jooq.tables.records.ObserverorganisationsRecord;


/**
 * An associative table to map Observers to Evaluators
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Observerorganisations extends TableImpl<ObserverorganisationsRecord> {

    private static final long serialVersionUID = 1532216236;

    /**
     * The reference instance of <code>WebRTCObserver.ObserverOrganisations</code>
     */
    public static final Observerorganisations OBSERVERORGANISATIONS = new Observerorganisations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ObserverorganisationsRecord> getRecordType() {
        return ObserverorganisationsRecord.class;
    }

    /**
     * The column <code>WebRTCObserver.ObserverOrganisations.observer_id</code>. The identifier of the observer for inside relations, never outside
     */
    public final TableField<ObserverorganisationsRecord, Integer> OBSERVER_ID = createField(DSL.name("observer_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "The identifier of the observer for inside relations, never outside");

    /**
     * The column <code>WebRTCObserver.ObserverOrganisations.organisation_id</code>. The identifier of the organisations for inside relations, never outside
     */
    public final TableField<ObserverorganisationsRecord, Integer> ORGANISATION_ID = createField(DSL.name("organisation_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "The identifier of the organisations for inside relations, never outside");

    /**
     * Create a <code>WebRTCObserver.ObserverOrganisations</code> table reference
     */
    public Observerorganisations() {
        this(DSL.name("ObserverOrganisations"), null);
    }

    /**
     * Create an aliased <code>WebRTCObserver.ObserverOrganisations</code> table reference
     */
    public Observerorganisations(String alias) {
        this(DSL.name(alias), OBSERVERORGANISATIONS);
    }

    /**
     * Create an aliased <code>WebRTCObserver.ObserverOrganisations</code> table reference
     */
    public Observerorganisations(Name alias) {
        this(alias, OBSERVERORGANISATIONS);
    }

    private Observerorganisations(Name alias, Table<ObserverorganisationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Observerorganisations(Name alias, Table<ObserverorganisationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("An associative table to map Observers to Evaluators"), TableOptions.table());
    }

    public <O extends Record> Observerorganisations(Table<O> child, ForeignKey<O, ObserverorganisationsRecord> key) {
        super(child, key, OBSERVERORGANISATIONS);
    }

    @Override
    public Schema getSchema() {
        return Webrtcobserver.WEBRTCOBSERVER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OBSERVERORGANISATIONS_OBSERVER_ID, Indexes.OBSERVERORGANISATIONS_ORGANISATION_ID);
    }

    @Override
    public List<ForeignKey<ObserverorganisationsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ObserverorganisationsRecord, ?>>asList(Keys.OBSERVERORGANISATIONS_IBFK_1, Keys.OBSERVERORGANISATIONS_IBFK_2);
    }

    public Observers observers() {
        return new Observers(this, Keys.OBSERVERORGANISATIONS_IBFK_1);
    }

    public Organisations organisations() {
        return new Organisations(this, Keys.OBSERVERORGANISATIONS_IBFK_2);
    }

    @Override
    public Observerorganisations as(String alias) {
        return new Observerorganisations(DSL.name(alias), this);
    }

    @Override
    public Observerorganisations as(Name alias) {
        return new Observerorganisations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Observerorganisations rename(String name) {
        return new Observerorganisations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Observerorganisations rename(Name name) {
        return new Observerorganisations(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
