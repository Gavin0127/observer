/*
 * This file is generated by jOOQ.
 */
package org.observertc.webrtc.service.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;
import org.observertc.webrtc.service.jooq.tables.Observerorganisations;


/**
 * An associative table to map Observers to Evaluators
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ObserverorganisationsRecord extends TableRecordImpl<ObserverorganisationsRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = -1084946868;

    /**
     * Setter for <code>WebRTCObserver.ObserverOrganisations.observer_id</code>. The identifier of the observer for inside relations, never outside
     */
    public void setObserverId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>WebRTCObserver.ObserverOrganisations.observer_id</code>. The identifier of the observer for inside relations, never outside
     */
    public Integer getObserverId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>WebRTCObserver.ObserverOrganisations.organisation_id</code>. The identifier of the organisations for inside relations, never outside
     */
    public void setOrganisationId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>WebRTCObserver.ObserverOrganisations.organisation_id</code>. The identifier of the organisations for inside relations, never outside
     */
    public Integer getOrganisationId() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Observerorganisations.OBSERVERORGANISATIONS.OBSERVER_ID;
    }

    @Override
    public Field<Integer> field2() {
        return Observerorganisations.OBSERVERORGANISATIONS.ORGANISATION_ID;
    }

    @Override
    public Integer component1() {
        return getObserverId();
    }

    @Override
    public Integer component2() {
        return getOrganisationId();
    }

    @Override
    public Integer value1() {
        return getObserverId();
    }

    @Override
    public Integer value2() {
        return getOrganisationId();
    }

    @Override
    public ObserverorganisationsRecord value1(Integer value) {
        setObserverId(value);
        return this;
    }

    @Override
    public ObserverorganisationsRecord value2(Integer value) {
        setOrganisationId(value);
        return this;
    }

    @Override
    public ObserverorganisationsRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ObserverorganisationsRecord
     */
    public ObserverorganisationsRecord() {
        super(Observerorganisations.OBSERVERORGANISATIONS);
    }

    /**
     * Create a detached, initialised ObserverorganisationsRecord
     */
    public ObserverorganisationsRecord(Integer observerId, Integer organisationId) {
        super(Observerorganisations.OBSERVERORGANISATIONS);

        set(0, observerId);
        set(1, organisationId);
    }
}
