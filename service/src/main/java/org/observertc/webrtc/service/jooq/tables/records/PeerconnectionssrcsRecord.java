/*
 * This file is generated by jOOQ.
 */
package org.observertc.webrtc.service.jooq.tables.records;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;
import org.observertc.webrtc.service.jooq.tables.Peerconnectionssrcs;


/**
 * A table to map peer connections to SSRCs
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PeerconnectionssrcsRecord extends UpdatableRecordImpl<PeerconnectionssrcsRecord> implements Record5<byte[], Long, byte[], LocalDateTime, String> {

    private static final long serialVersionUID = -299152464;

    /**
     * Setter for <code>WebRTCObserver.PeerConnectionSSRCs.observerUUID</code>. The UUID of the observer the SSRC belongs to
     */
    public void setObserveruuid(byte[] value) {
        set(0, value);
    }

    /**
     * Getter for <code>WebRTCObserver.PeerConnectionSSRCs.observerUUID</code>. The UUID of the observer the SSRC belongs to
     */
    public byte[] getObserveruuid() {
        return (byte[]) get(0);
    }

    /**
     * Setter for <code>WebRTCObserver.PeerConnectionSSRCs.SSRC</code>. The SSRC identifier
     */
    public void setSsrc(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>WebRTCObserver.PeerConnectionSSRCs.SSRC</code>. The SSRC identifier
     */
    public Long getSsrc() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>WebRTCObserver.PeerConnectionSSRCs.peerConnectionUUID</code>. The UUID of the peer connection the SSRC belongs to
     */
    public void setPeerconnectionuuid(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>WebRTCObserver.PeerConnectionSSRCs.peerConnectionUUID</code>. The UUID of the peer connection the SSRC belongs to
     */
    public byte[] getPeerconnectionuuid() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>WebRTCObserver.PeerConnectionSSRCs.updated</code>.
     */
    public void setUpdated(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>WebRTCObserver.PeerConnectionSSRCs.updated</code>.
     */
    public LocalDateTime getUpdated() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>WebRTCObserver.PeerConnectionSSRCs.timeZone</code>.
     */
    public void setTimezone(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>WebRTCObserver.PeerConnectionSSRCs.timeZone</code>.
     */
    public String getTimezone() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<byte[], Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<byte[], Long, byte[], LocalDateTime, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<byte[], Long, byte[], LocalDateTime, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<byte[]> field1() {
        return Peerconnectionssrcs.PEERCONNECTIONSSRCS.OBSERVERUUID;
    }

    @Override
    public Field<Long> field2() {
        return Peerconnectionssrcs.PEERCONNECTIONSSRCS.SSRC;
    }

    @Override
    public Field<byte[]> field3() {
        return Peerconnectionssrcs.PEERCONNECTIONSSRCS.PEERCONNECTIONUUID;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Peerconnectionssrcs.PEERCONNECTIONSSRCS.UPDATED;
    }

    @Override
    public Field<String> field5() {
        return Peerconnectionssrcs.PEERCONNECTIONSSRCS.TIMEZONE;
    }

    @Override
    public byte[] component1() {
        return getObserveruuid();
    }

    @Override
    public Long component2() {
        return getSsrc();
    }

    @Override
    public byte[] component3() {
        return getPeerconnectionuuid();
    }

    @Override
    public LocalDateTime component4() {
        return getUpdated();
    }

    @Override
    public String component5() {
        return getTimezone();
    }

    @Override
    public byte[] value1() {
        return getObserveruuid();
    }

    @Override
    public Long value2() {
        return getSsrc();
    }

    @Override
    public byte[] value3() {
        return getPeerconnectionuuid();
    }

    @Override
    public LocalDateTime value4() {
        return getUpdated();
    }

    @Override
    public String value5() {
        return getTimezone();
    }

    @Override
    public PeerconnectionssrcsRecord value1(byte[] value) {
        setObserveruuid(value);
        return this;
    }

    @Override
    public PeerconnectionssrcsRecord value2(Long value) {
        setSsrc(value);
        return this;
    }

    @Override
    public PeerconnectionssrcsRecord value3(byte[] value) {
        setPeerconnectionuuid(value);
        return this;
    }

    @Override
    public PeerconnectionssrcsRecord value4(LocalDateTime value) {
        setUpdated(value);
        return this;
    }

    @Override
    public PeerconnectionssrcsRecord value5(String value) {
        setTimezone(value);
        return this;
    }

    @Override
    public PeerconnectionssrcsRecord values(byte[] value1, Long value2, byte[] value3, LocalDateTime value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PeerconnectionssrcsRecord
     */
    public PeerconnectionssrcsRecord() {
        super(Peerconnectionssrcs.PEERCONNECTIONSSRCS);
    }

    /**
     * Create a detached, initialised PeerconnectionssrcsRecord
     */
    public PeerconnectionssrcsRecord(byte[] observeruuid, Long ssrc, byte[] peerconnectionuuid, LocalDateTime updated, String timezone) {
        super(Peerconnectionssrcs.PEERCONNECTIONSSRCS);

        set(0, observeruuid);
        set(1, ssrc);
        set(2, peerconnectionuuid);
        set(3, updated);
        set(4, timezone);
    }
}
