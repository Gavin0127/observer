/*
 * This file is generated by jOOQ.
 */
package org.observertc.webrtc.service.jooq.tables.records;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.observertc.webrtc.service.jooq.tables.Peerconnectionssrcs;


/**
 * SSRCMap
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PeerconnectionssrcsRecord extends UpdatableRecordImpl<PeerconnectionssrcsRecord> implements Record4<byte[], Long, byte[], LocalDateTime> {

    private static final long serialVersionUID = -354476892;

    /**
     * Setter for <code>WebRTCObserver.PeerconnectionSSRCs.observer</code>. The UUID of the observer the SSRC belongs to
     */
    public void setObserver(byte[] value) {
        set(0, value);
    }

    /**
     * Getter for <code>WebRTCObserver.PeerconnectionSSRCs.observer</code>. The UUID of the observer the SSRC belongs to
     */
    public byte[] getObserver() {
        return (byte[]) get(0);
    }

    /**
     * Setter for <code>WebRTCObserver.PeerconnectionSSRCs.SSRC</code>. The SSRC identifier
     */
    public void setSsrc(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>WebRTCObserver.PeerconnectionSSRCs.SSRC</code>. The SSRC identifier
     */
    public Long getSsrc() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>WebRTCObserver.PeerconnectionSSRCs.peerConnection</code>. The UUID of the peer connection the SSRC belongs to
     */
    public void setPeerconnection(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>WebRTCObserver.PeerconnectionSSRCs.peerConnection</code>. The UUID of the peer connection the SSRC belongs to
     */
    public byte[] getPeerconnection() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>WebRTCObserver.PeerconnectionSSRCs.updated</code>.
     */
    public void setUpdated(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>WebRTCObserver.PeerconnectionSSRCs.updated</code>.
     */
    public LocalDateTime getUpdated() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<byte[], Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<byte[], Long, byte[], LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<byte[], Long, byte[], LocalDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<byte[]> field1() {
        return Peerconnectionssrcs.PEERCONNECTIONSSRCS.OBSERVER;
    }

    @Override
    public Field<Long> field2() {
        return Peerconnectionssrcs.PEERCONNECTIONSSRCS.SSRC;
    }

    @Override
    public Field<byte[]> field3() {
        return Peerconnectionssrcs.PEERCONNECTIONSSRCS.PEERCONNECTION;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Peerconnectionssrcs.PEERCONNECTIONSSRCS.UPDATED;
    }

    @Override
    public byte[] component1() {
        return getObserver();
    }

    @Override
    public Long component2() {
        return getSsrc();
    }

    @Override
    public byte[] component3() {
        return getPeerconnection();
    }

    @Override
    public LocalDateTime component4() {
        return getUpdated();
    }

    @Override
    public byte[] value1() {
        return getObserver();
    }

    @Override
    public Long value2() {
        return getSsrc();
    }

    @Override
    public byte[] value3() {
        return getPeerconnection();
    }

    @Override
    public LocalDateTime value4() {
        return getUpdated();
    }

    @Override
    public PeerconnectionssrcsRecord value1(byte[] value) {
        setObserver(value);
        return this;
    }

    @Override
    public PeerconnectionssrcsRecord value2(Long value) {
        setSsrc(value);
        return this;
    }

    @Override
    public PeerconnectionssrcsRecord value3(byte[] value) {
        setPeerconnection(value);
        return this;
    }

    @Override
    public PeerconnectionssrcsRecord value4(LocalDateTime value) {
        setUpdated(value);
        return this;
    }

    @Override
    public PeerconnectionssrcsRecord values(byte[] value1, Long value2, byte[] value3, LocalDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PeerconnectionssrcsRecord
     */
    public PeerconnectionssrcsRecord() {
        super(Peerconnectionssrcs.PEERCONNECTIONSSRCS);
    }

    /**
     * Create a detached, initialised PeerconnectionssrcsRecord
     */
    public PeerconnectionssrcsRecord(byte[] observer, Long ssrc, byte[] peerconnection, LocalDateTime updated) {
        super(Peerconnectionssrcs.PEERCONNECTIONSSRCS);

        set(0, observer);
        set(1, ssrc);
        set(2, peerconnection);
        set(3, updated);
    }
}
