/*
 * This file is generated by jOOQ.
 */
package org.observertc.webrtc.service.jooq;


import org.jooq.Identity;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;
import org.observertc.webrtc.service.jooq.tables.Activestreams;
import org.observertc.webrtc.service.jooq.tables.Observers;
import org.observertc.webrtc.service.jooq.tables.Peerconnections;
import org.observertc.webrtc.service.jooq.tables.Sentreports;
import org.observertc.webrtc.service.jooq.tables.Users;
import org.observertc.webrtc.service.jooq.tables.records.ActivestreamsRecord;
import org.observertc.webrtc.service.jooq.tables.records.ObserversRecord;
import org.observertc.webrtc.service.jooq.tables.records.PeerconnectionsRecord;
import org.observertc.webrtc.service.jooq.tables.records.SentreportsRecord;
import org.observertc.webrtc.service.jooq.tables.records.UsersRecord;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>WebRTCObserver</code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<ObserversRecord, Integer> IDENTITY_OBSERVERS = Identities0.IDENTITY_OBSERVERS;
    public static final Identity<UsersRecord, Integer> IDENTITY_USERS = Identities0.IDENTITY_USERS;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ActivestreamsRecord> KEY_ACTIVESTREAMS_PRIMARY = UniqueKeys0.KEY_ACTIVESTREAMS_PRIMARY;
    public static final UniqueKey<ObserversRecord> KEY_OBSERVERS_PRIMARY = UniqueKeys0.KEY_OBSERVERS_PRIMARY;
    public static final UniqueKey<ObserversRecord> KEY_OBSERVERS_UUID = UniqueKeys0.KEY_OBSERVERS_UUID;
    public static final UniqueKey<PeerconnectionsRecord> KEY_PEERCONNECTIONS_PRIMARY = UniqueKeys0.KEY_PEERCONNECTIONS_PRIMARY;
    public static final UniqueKey<SentreportsRecord> KEY_SENTREPORTS_PRIMARY = UniqueKeys0.KEY_SENTREPORTS_PRIMARY;
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = UniqueKeys0.KEY_USERS_PRIMARY;
    public static final UniqueKey<UsersRecord> KEY_USERS_UUID = UniqueKeys0.KEY_USERS_UUID;
    public static final UniqueKey<UsersRecord> KEY_USERS_USERNAME = UniqueKeys0.KEY_USERS_USERNAME;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<ObserversRecord, Integer> IDENTITY_OBSERVERS = Internal.createIdentity(Observers.OBSERVERS, Observers.OBSERVERS.ID);
        public static Identity<UsersRecord, Integer> IDENTITY_USERS = Internal.createIdentity(Users.USERS, Users.USERS.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<ActivestreamsRecord> KEY_ACTIVESTREAMS_PRIMARY = Internal.createUniqueKey(Activestreams.ACTIVESTREAMS, "KEY_ActiveStreams_PRIMARY", new TableField[] { Activestreams.ACTIVESTREAMS.OBSERVERUUID, Activestreams.ACTIVESTREAMS.SSRC }, true);
        public static final UniqueKey<ObserversRecord> KEY_OBSERVERS_PRIMARY = Internal.createUniqueKey(Observers.OBSERVERS, "KEY_Observers_PRIMARY", new TableField[] { Observers.OBSERVERS.ID }, true);
        public static final UniqueKey<ObserversRecord> KEY_OBSERVERS_UUID = Internal.createUniqueKey(Observers.OBSERVERS, "KEY_Observers_uuid", new TableField[] { Observers.OBSERVERS.UUID }, true);
        public static final UniqueKey<PeerconnectionsRecord> KEY_PEERCONNECTIONS_PRIMARY = Internal.createUniqueKey(Peerconnections.PEERCONNECTIONS, "KEY_PeerConnections_PRIMARY", new TableField[] { Peerconnections.PEERCONNECTIONS.PEERCONNECTIONUUID }, true);
        public static final UniqueKey<SentreportsRecord> KEY_SENTREPORTS_PRIMARY = Internal.createUniqueKey(Sentreports.SENTREPORTS, "KEY_SentReports_PRIMARY", new TableField[] { Sentreports.SENTREPORTS.SIGNATURE }, true);
        public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, "KEY_Users_PRIMARY", new TableField[] { Users.USERS.ID }, true);
        public static final UniqueKey<UsersRecord> KEY_USERS_UUID = Internal.createUniqueKey(Users.USERS, "KEY_Users_uuid", new TableField[] { Users.USERS.UUID }, true);
        public static final UniqueKey<UsersRecord> KEY_USERS_USERNAME = Internal.createUniqueKey(Users.USERS, "KEY_Users_username", new TableField[] { Users.USERS.USERNAME }, true);
    }
}
