plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id "net.ltgt.apt-eclipse" version "0.21"

    // id "com.github.eirnym.js2p" version "1.0"
    id "nu.studer.jooq" version "4.2"
}

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
    maven { url 'https://packages.confluent.io/maven/' }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

version "0.1"
group "gatekeeper"


//repositories {
//    mavenCentral()
//    maven { url "https://jcenter.bintray.com" }
//}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

task makePretty(type: Delete) {
    delete 'out'
}

task buildDockerImage(type: Exec) {
//    workingDir "$buildDir"
    workingDir "$projectDir"
    commandLine "docker build . -t ${project.name}:latest"


}

dependencies {
    // ------------ Project integration ---------
    implementation project(":common")

    implementation project(':reportsink-bigquery')

    // ------------ Micronaut framework ------------
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut.configuration:micronaut-kafka"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "javax.annotation:javax.annotation-api"
    runtimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
    compile group: 'io.micronaut.data', name: 'micronaut-data-model', version: "${micronautDataModelVersion}"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    implementation "io.micronaut:micronaut-security-jwt"
    compile "io.micronaut:micronaut-management"

    // ------------ Micrometer integration ---------
    compile "io.micronaut.configuration:micronaut-micrometer-core"
    compile "io.micronaut:micronaut-management"

    // ------------ Datasource integration ---------
    implementation "org.jooq:jooq:${jooqVersion}"
    compile group: 'com.zaxxer', name: 'HikariCP', version: "${hikariCPVersion}"
    // ------------ Datasource integration: MySQL ---------
    jooqRuntime "mysql:mysql-connector-java:${mysqlVersion}"
    compile group: 'mysql', name: 'mysql-connector-java', version: "${mysqlVersion}"
    runtime "mysql:mysql-connector-java:${mysqlVersion}"
    jooqRuntime "mysql:mysql-connector-java:${mysqlVersion}"
    implementation 'org.jooq:jooq'

    // ------------ Kafka streams ---------
    compile "org.apache.avro:avro:1.9.2"
    implementation "io.micronaut.configuration:micronaut-kafka-streams:$micronautVersion"
    implementation "io.confluent:kafka-avro-serializer:5.4.0"
    implementation "io.confluent:kafka-streams-avro-serde:5.4.0"

    // ------------ Datawarehouse utilities ------------
    compile 'com.google.cloud:google-cloud-bigquery:1.116.3'
    // the main library

}

//googleApplicationCredentials = ClassLoader.getSystemClassLoader().getResource("ObserveRTC-5d4c3683dd2c.json");
run {
    //environment 'GOOGLE_APPLICATION_CREDENTIALS', file('/Users/balazskreith.finago/github/observertc/gatekeeper/webrtcstat/src/main/resources/ObserveRTC-5d4c3683dd2c.json').absolutePath
//    println System.getenv('GOOGLE_APPLICATION_CREDENTIALS')
//    if (System.getenv('GOOGLE_APPLICATION_CREDENTIALS') == null) {
//        throw new MissingResourceException("GOOGLE_APPLICATION_CREDENTIALS environment value must be set. ")
//         environment 'GOOGLE_APPLICATION_CREDENTIALS', file('/Users/balazskreith.finago/github/observertc/gatekeeper/webrtcstat/src/main/resources/ObserveRTC-5d4c3683dd2c.json').absolutePath
//    }
}

test.classpath += configurations.developmentOnly

mainClassName = "org.observertc.webrtc.service.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

def generatedDir = 'src/main/java/'
sourceSets {
    main {
        java {
            srcDirs += [generatedDir]
        }
    }
}

jooq {
    generateSchemaSourceOnCompilation = true
    MySql(sourceSets.main) {
        jdbc {
            url = 'jdbc:mysql://localhost:3306/WebRTCObserver'
            driver = 'com.mysql.cj.jdbc.Driver'
            user = 'root'
            password = 'password'
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = 'WebRTCObserver'
                includes = '.*'
            }
            target {
                packageName = 'org.observertc.webrtc.service.jooq'
                directory = generatedDir
            }
        }
    }
}
