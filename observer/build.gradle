plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id "net.ltgt.apt-eclipse" version "0.21"
//    id "nu.studer.jooq" version "4.2"
}

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
    maven { url 'https://packages.confluent.io/maven/' }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

version "$observerVersion"
group "webrtc_observer"


/*
 * Copyright  2020 Balazs Kreith
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//repositories {
//    mavenCentral()
//    maven { url "https://jcenter.bintray.com" }
//}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

task makePretty(type: Delete) {
    delete 'out'
}

task buildDockerImage(type: Exec) {
//    workingDir "$buildDir"
    workingDir "$projectDir"
    commandLine "docker build . -t ${project.name}:latest"


}

dependencies {
    // ------------ Project integration ---------
    compile project(":common")
    compile project(":jooq")

//    compile project(':reportsink-bigquery')

    // ------------ Micronaut framework ------------
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautBomVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautBomVersion")
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "javax.annotation:javax.annotation-api"
    runtimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
    compile group: 'io.micronaut.data', name: 'micronaut-data-model', version: "${micronautDataModelVersion}"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautBomVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautBomVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    implementation "io.micronaut:micronaut-security-jwt:$micronautJwtVersion"
    compile "io.micronaut:micronaut-management"
    implementation "io.micronaut.configuration:micronaut-kafka:$micronautKafkaVersion"
    implementation("io.micronaut.kafka:micronaut-kafka:$micronautKafkaVersion")
    developmentOnly("io.micronaut:micronaut-runtime-osx:$micronautRuntimeOSXVerrsion")

    // ------------ Micrometer integration ---------
    compile "io.micronaut.configuration:micronaut-micrometer-core:1.3.1"
    compile "io.micronaut:micronaut-management"

    // ------------ Datasource integration ---------
    implementation "org.jooq:jooq:${jooqVersion}"
    compile group: 'com.zaxxer', name: 'HikariCP', version: "${hikariCPVersion}"
    implementation 'org.jooq:jooq'

    // ------------ Datasource integration: MySQL ---------
    compile group: 'mysql', name: 'mysql-connector-java', version: "${mysqlVersion}"
    runtime "mysql:mysql-connector-java:${mysqlVersion}"

    // ------------ Tracing -----------------
//    compile "io.micronaut:micronaut-tracing"
//    runtime 'io.zipkin.brave:brave-instrumentation-http'
//    runtime 'io.zipkin.reporter2:zipkin-reporter'
//    compile 'io.opentracing.brave:brave-opentracing'

    // ------------ Kafka streams ---------
//    implementation "io.micronaut.configuration:micronaut-kafka-streams:$micronautKafkaStreamsVersion"
//    implementation "io.confluent:kafka-avro-serializer:5.4.0"
//    implementation "io.confluent:kafka-streams-avro-serde:5.4.0"

    // ------------ Datawarehouse utilities ------------
//    compile 'com.google.cloud:google-cloud-bigquery:1.116.3'
    // the main library

}

test.classpath += configurations.developmentOnly

mainClassName = "org.observertc.webrtc.observer.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}
