/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class ICECandidatePair extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4669445577081291413L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ICECandidatePair\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"fields\":[{\"name\":\"mediaUnitId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"callName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"browserId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"peerConnectionUUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"candidatePairId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"availableOutgoingBitrate\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"bytesReceived\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"bytesSent\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"consentRequestsSent\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"currentRoundTripTime\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"localCandidateID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"nominated\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"priority\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"remoteCandidateID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"requestsReceived\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"requestsSent\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"responsesReceived\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"responsesSent\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"ICEState\",\"symbols\":[\"FAILED\",\"FROZEN\",\"IN_PROGRESS\",\"SUCCEEDED\",\"WAITING\",\"UNKNOWN\",\"NULL\"]},\"default\":\"UNKNOWN\"},{\"name\":\"totalRoundTripTime\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"transportID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"writable\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ICECandidatePair> ENCODER =
      new BinaryMessageEncoder<ICECandidatePair>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ICECandidatePair> DECODER =
      new BinaryMessageDecoder<ICECandidatePair>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ICECandidatePair> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ICECandidatePair> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ICECandidatePair> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ICECandidatePair>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ICECandidatePair to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ICECandidatePair from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ICECandidatePair instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ICECandidatePair fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private String mediaUnitId;
   private String callName;
   private String userId;
   private String browserId;
   private String peerConnectionUUID;
   private String candidatePairId;
   private Integer availableOutgoingBitrate;
   private Long bytesReceived;
   private Long bytesSent;
   private Integer consentRequestsSent;
   private Double currentRoundTripTime;
   private String localCandidateID;
   private Boolean nominated;
   private Long priority;
   private String remoteCandidateID;
   private Integer requestsReceived;
   private Integer requestsSent;
   private Integer responsesReceived;
   private Integer responsesSent;
   private ICEState state;
   private Double totalRoundTripTime;
   private String transportID;
   private Boolean writable;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ICECandidatePair() {}

  /**
   * All-args constructor.
   * @param mediaUnitId The new value for mediaUnitId
   * @param callName The new value for callName
   * @param userId The new value for userId
   * @param browserId The new value for browserId
   * @param peerConnectionUUID The new value for peerConnectionUUID
   * @param candidatePairId The new value for candidatePairId
   * @param availableOutgoingBitrate The new value for availableOutgoingBitrate
   * @param bytesReceived The new value for bytesReceived
   * @param bytesSent The new value for bytesSent
   * @param consentRequestsSent The new value for consentRequestsSent
   * @param currentRoundTripTime The new value for currentRoundTripTime
   * @param localCandidateID The new value for localCandidateID
   * @param nominated The new value for nominated
   * @param priority The new value for priority
   * @param remoteCandidateID The new value for remoteCandidateID
   * @param requestsReceived The new value for requestsReceived
   * @param requestsSent The new value for requestsSent
   * @param responsesReceived The new value for responsesReceived
   * @param responsesSent The new value for responsesSent
   * @param state The new value for state
   * @param totalRoundTripTime The new value for totalRoundTripTime
   * @param transportID The new value for transportID
   * @param writable The new value for writable
   */
  public ICECandidatePair(String mediaUnitId, String callName, String userId, String browserId, String peerConnectionUUID, String candidatePairId, Integer availableOutgoingBitrate, Long bytesReceived, Long bytesSent, Integer consentRequestsSent, Double currentRoundTripTime, String localCandidateID, Boolean nominated, Long priority, String remoteCandidateID, Integer requestsReceived, Integer requestsSent, Integer responsesReceived, Integer responsesSent, ICEState state, Double totalRoundTripTime, String transportID, Boolean writable) {
    this.mediaUnitId = mediaUnitId;
    this.callName = callName;
    this.userId = userId;
    this.browserId = browserId;
    this.peerConnectionUUID = peerConnectionUUID;
    this.candidatePairId = candidatePairId;
    this.availableOutgoingBitrate = availableOutgoingBitrate;
    this.bytesReceived = bytesReceived;
    this.bytesSent = bytesSent;
    this.consentRequestsSent = consentRequestsSent;
    this.currentRoundTripTime = currentRoundTripTime;
    this.localCandidateID = localCandidateID;
    this.nominated = nominated;
    this.priority = priority;
    this.remoteCandidateID = remoteCandidateID;
    this.requestsReceived = requestsReceived;
    this.requestsSent = requestsSent;
    this.responsesReceived = responsesReceived;
    this.responsesSent = responsesSent;
    this.state = state;
    this.totalRoundTripTime = totalRoundTripTime;
    this.transportID = transportID;
    this.writable = writable;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return mediaUnitId;
    case 1: return callName;
    case 2: return userId;
    case 3: return browserId;
    case 4: return peerConnectionUUID;
    case 5: return candidatePairId;
    case 6: return availableOutgoingBitrate;
    case 7: return bytesReceived;
    case 8: return bytesSent;
    case 9: return consentRequestsSent;
    case 10: return currentRoundTripTime;
    case 11: return localCandidateID;
    case 12: return nominated;
    case 13: return priority;
    case 14: return remoteCandidateID;
    case 15: return requestsReceived;
    case 16: return requestsSent;
    case 17: return responsesReceived;
    case 18: return responsesSent;
    case 19: return state;
    case 20: return totalRoundTripTime;
    case 21: return transportID;
    case 22: return writable;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: mediaUnitId = value$ != null ? value$.toString() : null; break;
    case 1: callName = value$ != null ? value$.toString() : null; break;
    case 2: userId = value$ != null ? value$.toString() : null; break;
    case 3: browserId = value$ != null ? value$.toString() : null; break;
    case 4: peerConnectionUUID = value$ != null ? value$.toString() : null; break;
    case 5: candidatePairId = value$ != null ? value$.toString() : null; break;
    case 6: availableOutgoingBitrate = (Integer)value$; break;
    case 7: bytesReceived = (Long)value$; break;
    case 8: bytesSent = (Long)value$; break;
    case 9: consentRequestsSent = (Integer)value$; break;
    case 10: currentRoundTripTime = (Double)value$; break;
    case 11: localCandidateID = value$ != null ? value$.toString() : null; break;
    case 12: nominated = (Boolean)value$; break;
    case 13: priority = (Long)value$; break;
    case 14: remoteCandidateID = value$ != null ? value$.toString() : null; break;
    case 15: requestsReceived = (Integer)value$; break;
    case 16: requestsSent = (Integer)value$; break;
    case 17: responsesReceived = (Integer)value$; break;
    case 18: responsesSent = (Integer)value$; break;
    case 19: state = (ICEState)value$; break;
    case 20: totalRoundTripTime = (Double)value$; break;
    case 21: transportID = value$ != null ? value$.toString() : null; break;
    case 22: writable = (Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The value of the 'mediaUnitId' field.
   */
  public String getMediaUnitId() {
    return mediaUnitId;
  }



  /**
   * Gets the value of the 'callName' field.
   * @return The value of the 'callName' field.
   */
  public String getCallName() {
    return callName;
  }



  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public String getUserId() {
    return userId;
  }



  /**
   * Gets the value of the 'browserId' field.
   * @return The value of the 'browserId' field.
   */
  public String getBrowserId() {
    return browserId;
  }



  /**
   * Gets the value of the 'peerConnectionUUID' field.
   * @return The value of the 'peerConnectionUUID' field.
   */
  public String getPeerConnectionUUID() {
    return peerConnectionUUID;
  }



  /**
   * Gets the value of the 'candidatePairId' field.
   * @return The value of the 'candidatePairId' field.
   */
  public String getCandidatePairId() {
    return candidatePairId;
  }



  /**
   * Gets the value of the 'availableOutgoingBitrate' field.
   * @return The value of the 'availableOutgoingBitrate' field.
   */
  public Integer getAvailableOutgoingBitrate() {
    return availableOutgoingBitrate;
  }



  /**
   * Gets the value of the 'bytesReceived' field.
   * @return The value of the 'bytesReceived' field.
   */
  public Long getBytesReceived() {
    return bytesReceived;
  }



  /**
   * Gets the value of the 'bytesSent' field.
   * @return The value of the 'bytesSent' field.
   */
  public Long getBytesSent() {
    return bytesSent;
  }



  /**
   * Gets the value of the 'consentRequestsSent' field.
   * @return The value of the 'consentRequestsSent' field.
   */
  public Integer getConsentRequestsSent() {
    return consentRequestsSent;
  }



  /**
   * Gets the value of the 'currentRoundTripTime' field.
   * @return The value of the 'currentRoundTripTime' field.
   */
  public Double getCurrentRoundTripTime() {
    return currentRoundTripTime;
  }



  /**
   * Gets the value of the 'localCandidateID' field.
   * @return The value of the 'localCandidateID' field.
   */
  public String getLocalCandidateID() {
    return localCandidateID;
  }



  /**
   * Gets the value of the 'nominated' field.
   * @return The value of the 'nominated' field.
   */
  public Boolean getNominated() {
    return nominated;
  }



  /**
   * Gets the value of the 'priority' field.
   * @return The value of the 'priority' field.
   */
  public Long getPriority() {
    return priority;
  }



  /**
   * Gets the value of the 'remoteCandidateID' field.
   * @return The value of the 'remoteCandidateID' field.
   */
  public String getRemoteCandidateID() {
    return remoteCandidateID;
  }



  /**
   * Gets the value of the 'requestsReceived' field.
   * @return The value of the 'requestsReceived' field.
   */
  public Integer getRequestsReceived() {
    return requestsReceived;
  }



  /**
   * Gets the value of the 'requestsSent' field.
   * @return The value of the 'requestsSent' field.
   */
  public Integer getRequestsSent() {
    return requestsSent;
  }



  /**
   * Gets the value of the 'responsesReceived' field.
   * @return The value of the 'responsesReceived' field.
   */
  public Integer getResponsesReceived() {
    return responsesReceived;
  }



  /**
   * Gets the value of the 'responsesSent' field.
   * @return The value of the 'responsesSent' field.
   */
  public Integer getResponsesSent() {
    return responsesSent;
  }



  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public ICEState getState() {
    return state;
  }



  /**
   * Gets the value of the 'totalRoundTripTime' field.
   * @return The value of the 'totalRoundTripTime' field.
   */
  public Double getTotalRoundTripTime() {
    return totalRoundTripTime;
  }



  /**
   * Gets the value of the 'transportID' field.
   * @return The value of the 'transportID' field.
   */
  public String getTransportID() {
    return transportID;
  }



  /**
   * Gets the value of the 'writable' field.
   * @return The value of the 'writable' field.
   */
  public Boolean getWritable() {
    return writable;
  }



  /**
   * Creates a new ICECandidatePair RecordBuilder.
   * @return A new ICECandidatePair RecordBuilder
   */
  public static ICECandidatePair.Builder newBuilder() {
    return new ICECandidatePair.Builder();
  }

  /**
   * Creates a new ICECandidatePair RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ICECandidatePair RecordBuilder
   */
  public static ICECandidatePair.Builder newBuilder(ICECandidatePair.Builder other) {
    if (other == null) {
      return new ICECandidatePair.Builder();
    } else {
      return new ICECandidatePair.Builder(other);
    }
  }

  /**
   * Creates a new ICECandidatePair RecordBuilder by copying an existing ICECandidatePair instance.
   * @param other The existing instance to copy.
   * @return A new ICECandidatePair RecordBuilder
   */
  public static ICECandidatePair.Builder newBuilder(ICECandidatePair other) {
    if (other == null) {
      return new ICECandidatePair.Builder();
    } else {
      return new ICECandidatePair.Builder(other);
    }
  }

  /**
   * RecordBuilder for ICECandidatePair instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ICECandidatePair>
    implements org.apache.avro.data.RecordBuilder<ICECandidatePair> {

    private String mediaUnitId;
    private String callName;
    private String userId;
    private String browserId;
    private String peerConnectionUUID;
    private String candidatePairId;
    private Integer availableOutgoingBitrate;
    private Long bytesReceived;
    private Long bytesSent;
    private Integer consentRequestsSent;
    private Double currentRoundTripTime;
    private String localCandidateID;
    private Boolean nominated;
    private Long priority;
    private String remoteCandidateID;
    private Integer requestsReceived;
    private Integer requestsSent;
    private Integer responsesReceived;
    private Integer responsesSent;
    private ICEState state;
    private Double totalRoundTripTime;
    private String transportID;
    private Boolean writable;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ICECandidatePair.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.callName)) {
        this.callName = data().deepCopy(fields()[1].schema(), other.callName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.browserId)) {
        this.browserId = data().deepCopy(fields()[3].schema(), other.browserId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[4].schema(), other.peerConnectionUUID);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.candidatePairId)) {
        this.candidatePairId = data().deepCopy(fields()[5].schema(), other.candidatePairId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.availableOutgoingBitrate)) {
        this.availableOutgoingBitrate = data().deepCopy(fields()[6].schema(), other.availableOutgoingBitrate);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[7].schema(), other.bytesReceived);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[8].schema(), other.bytesSent);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.consentRequestsSent)) {
        this.consentRequestsSent = data().deepCopy(fields()[9].schema(), other.consentRequestsSent);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.currentRoundTripTime)) {
        this.currentRoundTripTime = data().deepCopy(fields()[10].schema(), other.currentRoundTripTime);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.localCandidateID)) {
        this.localCandidateID = data().deepCopy(fields()[11].schema(), other.localCandidateID);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.nominated)) {
        this.nominated = data().deepCopy(fields()[12].schema(), other.nominated);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.priority)) {
        this.priority = data().deepCopy(fields()[13].schema(), other.priority);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.remoteCandidateID)) {
        this.remoteCandidateID = data().deepCopy(fields()[14].schema(), other.remoteCandidateID);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.requestsReceived)) {
        this.requestsReceived = data().deepCopy(fields()[15].schema(), other.requestsReceived);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.requestsSent)) {
        this.requestsSent = data().deepCopy(fields()[16].schema(), other.requestsSent);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.responsesReceived)) {
        this.responsesReceived = data().deepCopy(fields()[17].schema(), other.responsesReceived);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.responsesSent)) {
        this.responsesSent = data().deepCopy(fields()[18].schema(), other.responsesSent);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.state)) {
        this.state = data().deepCopy(fields()[19].schema(), other.state);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.totalRoundTripTime)) {
        this.totalRoundTripTime = data().deepCopy(fields()[20].schema(), other.totalRoundTripTime);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.transportID)) {
        this.transportID = data().deepCopy(fields()[21].schema(), other.transportID);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.writable)) {
        this.writable = data().deepCopy(fields()[22].schema(), other.writable);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
    }

    /**
     * Creates a Builder by copying an existing ICECandidatePair instance
     * @param other The existing instance to copy.
     */
    private Builder(ICECandidatePair other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.callName)) {
        this.callName = data().deepCopy(fields()[1].schema(), other.callName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.browserId)) {
        this.browserId = data().deepCopy(fields()[3].schema(), other.browserId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[4].schema(), other.peerConnectionUUID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.candidatePairId)) {
        this.candidatePairId = data().deepCopy(fields()[5].schema(), other.candidatePairId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.availableOutgoingBitrate)) {
        this.availableOutgoingBitrate = data().deepCopy(fields()[6].schema(), other.availableOutgoingBitrate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[7].schema(), other.bytesReceived);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[8].schema(), other.bytesSent);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.consentRequestsSent)) {
        this.consentRequestsSent = data().deepCopy(fields()[9].schema(), other.consentRequestsSent);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.currentRoundTripTime)) {
        this.currentRoundTripTime = data().deepCopy(fields()[10].schema(), other.currentRoundTripTime);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.localCandidateID)) {
        this.localCandidateID = data().deepCopy(fields()[11].schema(), other.localCandidateID);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.nominated)) {
        this.nominated = data().deepCopy(fields()[12].schema(), other.nominated);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.priority)) {
        this.priority = data().deepCopy(fields()[13].schema(), other.priority);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.remoteCandidateID)) {
        this.remoteCandidateID = data().deepCopy(fields()[14].schema(), other.remoteCandidateID);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.requestsReceived)) {
        this.requestsReceived = data().deepCopy(fields()[15].schema(), other.requestsReceived);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.requestsSent)) {
        this.requestsSent = data().deepCopy(fields()[16].schema(), other.requestsSent);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.responsesReceived)) {
        this.responsesReceived = data().deepCopy(fields()[17].schema(), other.responsesReceived);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.responsesSent)) {
        this.responsesSent = data().deepCopy(fields()[18].schema(), other.responsesSent);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.state)) {
        this.state = data().deepCopy(fields()[19].schema(), other.state);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.totalRoundTripTime)) {
        this.totalRoundTripTime = data().deepCopy(fields()[20].schema(), other.totalRoundTripTime);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.transportID)) {
        this.transportID = data().deepCopy(fields()[21].schema(), other.transportID);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.writable)) {
        this.writable = data().deepCopy(fields()[22].schema(), other.writable);
        fieldSetFlags()[22] = true;
      }
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * @return The value.
      */
    public String getMediaUnitId() {
      return mediaUnitId;
    }


    /**
      * Sets the value of the 'mediaUnitId' field.
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setMediaUnitId(String value) {
      validate(fields()[0], value);
      this.mediaUnitId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'callName' field.
      * @return The value.
      */
    public String getCallName() {
      return callName;
    }


    /**
      * Sets the value of the 'callName' field.
      * @param value The value of 'callName'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setCallName(String value) {
      validate(fields()[1], value);
      this.callName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'callName' field has been set.
      * @return True if the 'callName' field has been set, false otherwise.
      */
    public boolean hasCallName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'callName' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearCallName() {
      callName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setUserId(String value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'browserId' field.
      * @return The value.
      */
    public String getBrowserId() {
      return browserId;
    }


    /**
      * Sets the value of the 'browserId' field.
      * @param value The value of 'browserId'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setBrowserId(String value) {
      validate(fields()[3], value);
      this.browserId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'browserId' field has been set.
      * @return True if the 'browserId' field has been set, false otherwise.
      */
    public boolean hasBrowserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'browserId' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearBrowserId() {
      browserId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionUUID' field.
      * @return The value.
      */
    public String getPeerConnectionUUID() {
      return peerConnectionUUID;
    }


    /**
      * Sets the value of the 'peerConnectionUUID' field.
      * @param value The value of 'peerConnectionUUID'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setPeerConnectionUUID(String value) {
      validate(fields()[4], value);
      this.peerConnectionUUID = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionUUID' field has been set.
      * @return True if the 'peerConnectionUUID' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionUUID() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'peerConnectionUUID' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearPeerConnectionUUID() {
      peerConnectionUUID = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairId' field.
      * @return The value.
      */
    public String getCandidatePairId() {
      return candidatePairId;
    }


    /**
      * Sets the value of the 'candidatePairId' field.
      * @param value The value of 'candidatePairId'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setCandidatePairId(String value) {
      validate(fields()[5], value);
      this.candidatePairId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairId' field has been set.
      * @return True if the 'candidatePairId' field has been set, false otherwise.
      */
    public boolean hasCandidatePairId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'candidatePairId' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearCandidatePairId() {
      candidatePairId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'availableOutgoingBitrate' field.
      * @return The value.
      */
    public Integer getAvailableOutgoingBitrate() {
      return availableOutgoingBitrate;
    }


    /**
      * Sets the value of the 'availableOutgoingBitrate' field.
      * @param value The value of 'availableOutgoingBitrate'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setAvailableOutgoingBitrate(Integer value) {
      validate(fields()[6], value);
      this.availableOutgoingBitrate = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'availableOutgoingBitrate' field has been set.
      * @return True if the 'availableOutgoingBitrate' field has been set, false otherwise.
      */
    public boolean hasAvailableOutgoingBitrate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'availableOutgoingBitrate' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearAvailableOutgoingBitrate() {
      availableOutgoingBitrate = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesReceived' field.
      * @return The value.
      */
    public Long getBytesReceived() {
      return bytesReceived;
    }


    /**
      * Sets the value of the 'bytesReceived' field.
      * @param value The value of 'bytesReceived'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setBytesReceived(Long value) {
      validate(fields()[7], value);
      this.bytesReceived = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesReceived' field has been set.
      * @return True if the 'bytesReceived' field has been set, false otherwise.
      */
    public boolean hasBytesReceived() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'bytesReceived' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearBytesReceived() {
      bytesReceived = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesSent' field.
      * @return The value.
      */
    public Long getBytesSent() {
      return bytesSent;
    }


    /**
      * Sets the value of the 'bytesSent' field.
      * @param value The value of 'bytesSent'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setBytesSent(Long value) {
      validate(fields()[8], value);
      this.bytesSent = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesSent' field has been set.
      * @return True if the 'bytesSent' field has been set, false otherwise.
      */
    public boolean hasBytesSent() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'bytesSent' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearBytesSent() {
      bytesSent = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'consentRequestsSent' field.
      * @return The value.
      */
    public Integer getConsentRequestsSent() {
      return consentRequestsSent;
    }


    /**
      * Sets the value of the 'consentRequestsSent' field.
      * @param value The value of 'consentRequestsSent'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setConsentRequestsSent(Integer value) {
      validate(fields()[9], value);
      this.consentRequestsSent = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'consentRequestsSent' field has been set.
      * @return True if the 'consentRequestsSent' field has been set, false otherwise.
      */
    public boolean hasConsentRequestsSent() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'consentRequestsSent' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearConsentRequestsSent() {
      consentRequestsSent = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentRoundTripTime' field.
      * @return The value.
      */
    public Double getCurrentRoundTripTime() {
      return currentRoundTripTime;
    }


    /**
      * Sets the value of the 'currentRoundTripTime' field.
      * @param value The value of 'currentRoundTripTime'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setCurrentRoundTripTime(Double value) {
      validate(fields()[10], value);
      this.currentRoundTripTime = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'currentRoundTripTime' field has been set.
      * @return True if the 'currentRoundTripTime' field has been set, false otherwise.
      */
    public boolean hasCurrentRoundTripTime() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'currentRoundTripTime' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearCurrentRoundTripTime() {
      currentRoundTripTime = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'localCandidateID' field.
      * @return The value.
      */
    public String getLocalCandidateID() {
      return localCandidateID;
    }


    /**
      * Sets the value of the 'localCandidateID' field.
      * @param value The value of 'localCandidateID'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setLocalCandidateID(String value) {
      validate(fields()[11], value);
      this.localCandidateID = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'localCandidateID' field has been set.
      * @return True if the 'localCandidateID' field has been set, false otherwise.
      */
    public boolean hasLocalCandidateID() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'localCandidateID' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearLocalCandidateID() {
      localCandidateID = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'nominated' field.
      * @return The value.
      */
    public Boolean getNominated() {
      return nominated;
    }


    /**
      * Sets the value of the 'nominated' field.
      * @param value The value of 'nominated'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setNominated(Boolean value) {
      validate(fields()[12], value);
      this.nominated = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'nominated' field has been set.
      * @return True if the 'nominated' field has been set, false otherwise.
      */
    public boolean hasNominated() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'nominated' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearNominated() {
      nominated = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'priority' field.
      * @return The value.
      */
    public Long getPriority() {
      return priority;
    }


    /**
      * Sets the value of the 'priority' field.
      * @param value The value of 'priority'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setPriority(Long value) {
      validate(fields()[13], value);
      this.priority = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'priority' field has been set.
      * @return True if the 'priority' field has been set, false otherwise.
      */
    public boolean hasPriority() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'priority' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearPriority() {
      priority = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteCandidateID' field.
      * @return The value.
      */
    public String getRemoteCandidateID() {
      return remoteCandidateID;
    }


    /**
      * Sets the value of the 'remoteCandidateID' field.
      * @param value The value of 'remoteCandidateID'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setRemoteCandidateID(String value) {
      validate(fields()[14], value);
      this.remoteCandidateID = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteCandidateID' field has been set.
      * @return True if the 'remoteCandidateID' field has been set, false otherwise.
      */
    public boolean hasRemoteCandidateID() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'remoteCandidateID' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearRemoteCandidateID() {
      remoteCandidateID = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestsReceived' field.
      * @return The value.
      */
    public Integer getRequestsReceived() {
      return requestsReceived;
    }


    /**
      * Sets the value of the 'requestsReceived' field.
      * @param value The value of 'requestsReceived'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setRequestsReceived(Integer value) {
      validate(fields()[15], value);
      this.requestsReceived = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'requestsReceived' field has been set.
      * @return True if the 'requestsReceived' field has been set, false otherwise.
      */
    public boolean hasRequestsReceived() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'requestsReceived' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearRequestsReceived() {
      requestsReceived = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestsSent' field.
      * @return The value.
      */
    public Integer getRequestsSent() {
      return requestsSent;
    }


    /**
      * Sets the value of the 'requestsSent' field.
      * @param value The value of 'requestsSent'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setRequestsSent(Integer value) {
      validate(fields()[16], value);
      this.requestsSent = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'requestsSent' field has been set.
      * @return True if the 'requestsSent' field has been set, false otherwise.
      */
    public boolean hasRequestsSent() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'requestsSent' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearRequestsSent() {
      requestsSent = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'responsesReceived' field.
      * @return The value.
      */
    public Integer getResponsesReceived() {
      return responsesReceived;
    }


    /**
      * Sets the value of the 'responsesReceived' field.
      * @param value The value of 'responsesReceived'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setResponsesReceived(Integer value) {
      validate(fields()[17], value);
      this.responsesReceived = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'responsesReceived' field has been set.
      * @return True if the 'responsesReceived' field has been set, false otherwise.
      */
    public boolean hasResponsesReceived() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'responsesReceived' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearResponsesReceived() {
      responsesReceived = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'responsesSent' field.
      * @return The value.
      */
    public Integer getResponsesSent() {
      return responsesSent;
    }


    /**
      * Sets the value of the 'responsesSent' field.
      * @param value The value of 'responsesSent'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setResponsesSent(Integer value) {
      validate(fields()[18], value);
      this.responsesSent = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'responsesSent' field has been set.
      * @return True if the 'responsesSent' field has been set, false otherwise.
      */
    public boolean hasResponsesSent() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'responsesSent' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearResponsesSent() {
      responsesSent = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public ICEState getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setState(ICEState value) {
      validate(fields()[19], value);
      this.state = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearState() {
      state = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalRoundTripTime' field.
      * @return The value.
      */
    public Double getTotalRoundTripTime() {
      return totalRoundTripTime;
    }


    /**
      * Sets the value of the 'totalRoundTripTime' field.
      * @param value The value of 'totalRoundTripTime'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setTotalRoundTripTime(Double value) {
      validate(fields()[20], value);
      this.totalRoundTripTime = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'totalRoundTripTime' field has been set.
      * @return True if the 'totalRoundTripTime' field has been set, false otherwise.
      */
    public boolean hasTotalRoundTripTime() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'totalRoundTripTime' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearTotalRoundTripTime() {
      totalRoundTripTime = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportID' field.
      * @return The value.
      */
    public String getTransportID() {
      return transportID;
    }


    /**
      * Sets the value of the 'transportID' field.
      * @param value The value of 'transportID'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setTransportID(String value) {
      validate(fields()[21], value);
      this.transportID = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'transportID' field has been set.
      * @return True if the 'transportID' field has been set, false otherwise.
      */
    public boolean hasTransportID() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'transportID' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearTransportID() {
      transportID = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'writable' field.
      * @return The value.
      */
    public Boolean getWritable() {
      return writable;
    }


    /**
      * Sets the value of the 'writable' field.
      * @param value The value of 'writable'.
      * @return This builder.
      */
    public ICECandidatePair.Builder setWritable(Boolean value) {
      validate(fields()[22], value);
      this.writable = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'writable' field has been set.
      * @return True if the 'writable' field has been set, false otherwise.
      */
    public boolean hasWritable() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'writable' field.
      * @return This builder.
      */
    public ICECandidatePair.Builder clearWritable() {
      writable = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ICECandidatePair build() {
      try {
        ICECandidatePair record = new ICECandidatePair();
        record.mediaUnitId = fieldSetFlags()[0] ? this.mediaUnitId : (String) defaultValue(fields()[0]);
        record.callName = fieldSetFlags()[1] ? this.callName : (String) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (String) defaultValue(fields()[2]);
        record.browserId = fieldSetFlags()[3] ? this.browserId : (String) defaultValue(fields()[3]);
        record.peerConnectionUUID = fieldSetFlags()[4] ? this.peerConnectionUUID : (String) defaultValue(fields()[4]);
        record.candidatePairId = fieldSetFlags()[5] ? this.candidatePairId : (String) defaultValue(fields()[5]);
        record.availableOutgoingBitrate = fieldSetFlags()[6] ? this.availableOutgoingBitrate : (Integer) defaultValue(fields()[6]);
        record.bytesReceived = fieldSetFlags()[7] ? this.bytesReceived : (Long) defaultValue(fields()[7]);
        record.bytesSent = fieldSetFlags()[8] ? this.bytesSent : (Long) defaultValue(fields()[8]);
        record.consentRequestsSent = fieldSetFlags()[9] ? this.consentRequestsSent : (Integer) defaultValue(fields()[9]);
        record.currentRoundTripTime = fieldSetFlags()[10] ? this.currentRoundTripTime : (Double) defaultValue(fields()[10]);
        record.localCandidateID = fieldSetFlags()[11] ? this.localCandidateID : (String) defaultValue(fields()[11]);
        record.nominated = fieldSetFlags()[12] ? this.nominated : (Boolean) defaultValue(fields()[12]);
        record.priority = fieldSetFlags()[13] ? this.priority : (Long) defaultValue(fields()[13]);
        record.remoteCandidateID = fieldSetFlags()[14] ? this.remoteCandidateID : (String) defaultValue(fields()[14]);
        record.requestsReceived = fieldSetFlags()[15] ? this.requestsReceived : (Integer) defaultValue(fields()[15]);
        record.requestsSent = fieldSetFlags()[16] ? this.requestsSent : (Integer) defaultValue(fields()[16]);
        record.responsesReceived = fieldSetFlags()[17] ? this.responsesReceived : (Integer) defaultValue(fields()[17]);
        record.responsesSent = fieldSetFlags()[18] ? this.responsesSent : (Integer) defaultValue(fields()[18]);
        record.state = fieldSetFlags()[19] ? this.state : (ICEState) defaultValue(fields()[19]);
        record.totalRoundTripTime = fieldSetFlags()[20] ? this.totalRoundTripTime : (Double) defaultValue(fields()[20]);
        record.transportID = fieldSetFlags()[21] ? this.transportID : (String) defaultValue(fields()[21]);
        record.writable = fieldSetFlags()[22] ? this.writable : (Boolean) defaultValue(fields()[22]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ICECandidatePair>
    WRITER$ = (org.apache.avro.io.DatumWriter<ICECandidatePair>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ICECandidatePair>
    READER$ = (org.apache.avro.io.DatumReader<ICECandidatePair>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.mediaUnitId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mediaUnitId);
    }

    if (this.callName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.callName);
    }

    if (this.userId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.userId);
    }

    if (this.browserId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.browserId);
    }

    out.writeString(this.peerConnectionUUID);

    out.writeString(this.candidatePairId);

    if (this.availableOutgoingBitrate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.availableOutgoingBitrate);
    }

    if (this.bytesReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.bytesReceived);
    }

    if (this.bytesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.bytesSent);
    }

    if (this.consentRequestsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.consentRequestsSent);
    }

    if (this.currentRoundTripTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.currentRoundTripTime);
    }

    if (this.localCandidateID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.localCandidateID);
    }

    if (this.nominated == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.nominated);
    }

    if (this.priority == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.priority);
    }

    if (this.remoteCandidateID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.remoteCandidateID);
    }

    if (this.requestsReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.requestsReceived);
    }

    if (this.requestsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.requestsSent);
    }

    if (this.responsesReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.responsesReceived);
    }

    if (this.responsesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.responsesSent);
    }

    out.writeEnum(this.state.ordinal());

    if (this.totalRoundTripTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.totalRoundTripTime);
    }

    if (this.transportID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.transportID);
    }

    if (this.writable == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.writable);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.mediaUnitId = null;
      } else {
        this.mediaUnitId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.callName = null;
      } else {
        this.callName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.userId = null;
      } else {
        this.userId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.browserId = null;
      } else {
        this.browserId = in.readString();
      }

      this.peerConnectionUUID = in.readString();

      this.candidatePairId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.availableOutgoingBitrate = null;
      } else {
        this.availableOutgoingBitrate = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bytesReceived = null;
      } else {
        this.bytesReceived = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bytesSent = null;
      } else {
        this.bytesSent = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.consentRequestsSent = null;
      } else {
        this.consentRequestsSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.currentRoundTripTime = null;
      } else {
        this.currentRoundTripTime = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.localCandidateID = null;
      } else {
        this.localCandidateID = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nominated = null;
      } else {
        this.nominated = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.priority = null;
      } else {
        this.priority = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.remoteCandidateID = null;
      } else {
        this.remoteCandidateID = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.requestsReceived = null;
      } else {
        this.requestsReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.requestsSent = null;
      } else {
        this.requestsSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.responsesReceived = null;
      } else {
        this.responsesReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.responsesSent = null;
      } else {
        this.responsesSent = in.readInt();
      }

      this.state = ICEState.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalRoundTripTime = null;
      } else {
        this.totalRoundTripTime = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.transportID = null;
      } else {
        this.transportID = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.writable = null;
      } else {
        this.writable = in.readBoolean();
      }

    } else {
      for (int i = 0; i < 23; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mediaUnitId = null;
          } else {
            this.mediaUnitId = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.callName = null;
          } else {
            this.callName = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.userId = null;
          } else {
            this.userId = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.browserId = null;
          } else {
            this.browserId = in.readString();
          }
          break;

        case 4:
          this.peerConnectionUUID = in.readString();
          break;

        case 5:
          this.candidatePairId = in.readString();
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.availableOutgoingBitrate = null;
          } else {
            this.availableOutgoingBitrate = in.readInt();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bytesReceived = null;
          } else {
            this.bytesReceived = in.readLong();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bytesSent = null;
          } else {
            this.bytesSent = in.readLong();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.consentRequestsSent = null;
          } else {
            this.consentRequestsSent = in.readInt();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.currentRoundTripTime = null;
          } else {
            this.currentRoundTripTime = in.readDouble();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.localCandidateID = null;
          } else {
            this.localCandidateID = in.readString();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nominated = null;
          } else {
            this.nominated = in.readBoolean();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.priority = null;
          } else {
            this.priority = in.readLong();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.remoteCandidateID = null;
          } else {
            this.remoteCandidateID = in.readString();
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.requestsReceived = null;
          } else {
            this.requestsReceived = in.readInt();
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.requestsSent = null;
          } else {
            this.requestsSent = in.readInt();
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.responsesReceived = null;
          } else {
            this.responsesReceived = in.readInt();
          }
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.responsesSent = null;
          } else {
            this.responsesSent = in.readInt();
          }
          break;

        case 19:
          this.state = ICEState.values()[in.readEnum()];
          break;

        case 20:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalRoundTripTime = null;
          } else {
            this.totalRoundTripTime = in.readDouble();
          }
          break;

        case 21:
          if (in.readIndex() != 1) {
            in.readNull();
            this.transportID = null;
          } else {
            this.transportID = in.readString();
          }
          break;

        case 22:
          if (in.readIndex() != 1) {
            in.readNull();
            this.writable = null;
          } else {
            this.writable = in.readBoolean();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










